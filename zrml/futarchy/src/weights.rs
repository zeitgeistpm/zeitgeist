// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_futarchy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-24`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=zrml_futarchy
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/futarchy/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_futarchy (automatically generated)
pub trait WeightInfoZeitgeist {
    fn submit_proposal() -> Weight;
    fn maybe_schedule_proposal() -> Weight;
    fn take_proposals(n: u32) -> Weight;
}

/// Weight functions for zrml_futarchy (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: `Futarchy::ProposalCount` (r:1 w:1)
    /// Proof: `Futarchy::ProposalCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Futarchy::Proposals` (r:1 w:1)
    /// Proof: `Futarchy::Proposals` (`max_values`: None, `max_size`: Some(1261), added: 3736, mode: `MaxEncodedLen`)
    fn submit_proposal() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `122`
        //  Estimated: `4726`
        // Minimum execution time: 18_920 nanoseconds.
        Weight::from_parts(18_920_000, 4726)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(109074), added: 111549, mode: `MaxEncodedLen`)
    fn maybe_schedule_proposal() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3`
        //  Estimated: `112539`
        // Minimum execution time: 10_800 nanoseconds.
        Weight::from_parts(10_800_000, 112539)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Futarchy::Proposals` (r:1 w:1)
    /// Proof: `Futarchy::Proposals` (`max_values`: None, `max_size`: Some(1261), added: 3736, mode: `MaxEncodedLen`)
    /// Storage: `Futarchy::ProposalCount` (r:1 w:0)
    /// Proof: `Futarchy::ProposalCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 4]`.
    fn take_proposals(_n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `94 + n * (309 Â±0)`
        //  Estimated: `4726`
        // Minimum execution time: 7_070 nanoseconds.
        Weight::from_parts(7_690_000, 4726)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
