// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_global_disputes
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-24`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=zrml_global_disputes
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/global-disputes/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_global_disputes (automatically generated)
pub trait WeightInfoZeitgeist {
    fn vote_on_outcome(o: u32, v: u32) -> Weight;
    fn unlock_vote_balance_set(l: u32, o: u32) -> Weight;
    fn unlock_vote_balance_remove(l: u32, o: u32) -> Weight;
    fn add_vote_outcome(w: u32) -> Weight;
    fn reward_outcome_owner_shared_possession(o: u32) -> Weight;
    fn reward_outcome_owner_paid_possession() -> Weight;
    fn purge_outcomes(k: u32, o: u32) -> Weight;
    fn refund_vote_fees(k: u32, o: u32) -> Weight;
}

/// Weight functions for zrml_global_disputes (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:1)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::Outcomes` (r:1 w:1)
    /// Proof: `GlobalDisputes::Outcomes` (`max_values`: None, `max_size`: Some(395), added: 2870, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::Locks` (r:1 w:1)
    /// Proof: `GlobalDisputes::Locks` (`max_values`: None, `max_size`: Some(1641), added: 4116, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[2, 10]`.
    /// The range of component `v` is `[0, 49]`.
    fn vote_on_outcome(_o: u32, v: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `498 + o * (24 ±0) + v * (32 ±0)`
        //  Estimated: `5106`
        // Minimum execution time: 49_870 nanoseconds.
        Weight::from_parts(50_176_250, 5106)
            // Standard Error: 7_953
            .saturating_add(Weight::from_parts(22_959, 0).saturating_mul(v.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `GlobalDisputes::Locks` (r:1 w:1)
    /// Proof: `GlobalDisputes::Locks` (`max_values`: None, `max_size`: Some(1641), added: 4116, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:50 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 50]`.
    /// The range of component `o` is `[1, 10]`.
    fn unlock_vote_balance_set(l: u32, o: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + l * (436 ±0) + o * (1600 ±0)`
        //  Estimated: `5106 + l * (2890 ±0)`
        // Minimum execution time: 30_080 nanoseconds.
        Weight::from_parts(2_702_222, 5106)
            // Standard Error: 667_878
            .saturating_add(Weight::from_parts(3_024_200, 0).saturating_mul(l.into()))
            // Standard Error: 3_710_437
            .saturating_add(Weight::from_parts(2_737_777, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(l.into())))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 2890).saturating_mul(l.into()))
    }
    /// Storage: `GlobalDisputes::Locks` (r:1 w:1)
    /// Proof: `GlobalDisputes::Locks` (`max_values`: None, `max_size`: Some(1641), added: 4116, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:50 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 50]`.
    /// The range of component `o` is `[1, 10]`.
    fn unlock_vote_balance_remove(l: u32, o: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + l * (420 ±0) + o * (1600 ±0)`
        //  Estimated: `5106 + l * (2890 ±0)`
        // Minimum execution time: 29_960 nanoseconds.
        Weight::from_parts(1_843_333, 5106)
            // Standard Error: 424_179
            .saturating_add(Weight::from_parts(3_077_700, 0).saturating_mul(l.into()))
            // Standard Error: 2_356_551
            .saturating_add(Weight::from_parts(2_811_666, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(l.into())))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 2890).saturating_mul(l.into()))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:1)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::Outcomes` (r:1 w:1)
    /// Proof: `GlobalDisputes::Outcomes` (`max_values`: None, `max_size`: Some(395), added: 2870, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `w` is `[1, 10]`.
    fn add_vote_outcome(_w: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `680 + w * (32 ±0)`
        //  Estimated: `4173`
        // Minimum execution time: 60_400 nanoseconds.
        Weight::from_parts(61_290_000, 4173)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `GlobalDisputes::Outcomes` (r:1 w:0)
    /// Proof: `GlobalDisputes::Outcomes` (`max_values`: None, `max_size`: Some(395), added: 2870, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:11 w:11)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[1, 10]`.
    fn reward_outcome_owner_shared_possession(_o: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `453 + o * (42 ±0)`
        //  Estimated: `29667`
        // Minimum execution time: 59_200 nanoseconds.
        Weight::from_parts(322_159_000, 29667)
            .saturating_add(T::DbWeight::get().reads(13))
            .saturating_add(T::DbWeight::get().writes(11))
    }
    /// Storage: `GlobalDisputes::Outcomes` (r:1 w:0)
    /// Proof: `GlobalDisputes::Outcomes` (`max_values`: None, `max_size`: Some(395), added: 2870, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn reward_outcome_owner_paid_possession() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `511`
        //  Estimated: `6204`
        // Minimum execution time: 59_070 nanoseconds.
        Weight::from_parts(59_070_000, 6204)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:1)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::Outcomes` (r:250 w:249)
    /// Proof: `GlobalDisputes::Outcomes` (`max_values`: None, `max_size`: Some(395), added: 2870, mode: `MaxEncodedLen`)
    /// The range of component `k` is `[2, 248]`.
    /// The range of component `o` is `[1, 10]`.
    fn purge_outcomes(k: u32, o: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `369 + k * (90 ±0) + o * (32 ±0)`
        //  Estimated: `6730 + k * (2870 ±0)`
        // Minimum execution time: 40_760 nanoseconds.
        Weight::from_parts(28_863_598, 6730)
            // Standard Error: 105_859
            .saturating_add(Weight::from_parts(4_445_422, 0).saturating_mul(k.into()))
            // Standard Error: 2_893_487
            .saturating_add(Weight::from_parts(300_555, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
            .saturating_add(Weight::from_parts(0, 2870).saturating_mul(k.into()))
    }
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::Outcomes` (r:250 w:249)
    /// Proof: `GlobalDisputes::Outcomes` (`max_values`: None, `max_size`: Some(395), added: 2870, mode: `MaxEncodedLen`)
    /// The range of component `k` is `[2, 248]`.
    /// The range of component `o` is `[1, 10]`.
    fn refund_vote_fees(k: u32, o: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `369 + k * (90 ±0) + o * (32 ±0)`
        //  Estimated: `6730 + k * (2870 ±0)`
        // Minimum execution time: 38_950 nanoseconds.
        Weight::from_parts(38_950_000, 6730)
            // Standard Error: 105_429
            .saturating_add(Weight::from_parts(4_427_059, 0).saturating_mul(k.into()))
            // Standard Error: 2_610_330
            .saturating_add(Weight::from_parts(685_751, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
            .saturating_add(Weight::from_parts(0, 2870).saturating_mul(k.into()))
    }
}
