// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_hybrid_router
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-03-06`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=zrml_hybrid_router
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/hybrid-router/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_hybrid_router (automatically generated)
pub trait WeightInfoZeitgeist {
    fn buy(n: u32, o: u32, ) -> Weight;
    fn sell(n: u32, o: u32, ) -> Weight;
}

/// Weight functions for zrml_hybrid_router (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Orderbook Orders (r:100 w:101)
    /// Proof: Orderbook Orders (max_values: None, max_size: Some(142), added: 2617, mode: MaxEncodedLen)
    /// Storage: NeoSwaps Pools (r:1 w:1)
    /// Proof: NeoSwaps Pools (max_values: None, max_size: Some(144745), added: 147220, mode: MaxEncodedLen)
    /// Storage: Tokens Reserves (r:100 w:100)
    /// Proof: Tokens Reserves (max_values: None, max_size: Some(1276), added: 3751, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:229 w:229)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:102 w:102)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:128 w:128)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Orderbook NextOrderId (r:1 w:1)
    /// Proof: Orderbook NextOrderId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// The range of component `n` is `[2, 128]`.
    /// The range of component `o` is `[0, 100]`.
    fn buy(n: u32, o: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3195 + n * (195 ±0) + o * (604 ±0)`
        //  Estimated: `162420 + o * (11573 ±0) + n * (5116 ±0)`
        // Minimum execution time: 1_365_752 nanoseconds.
        Weight::from_parts(1_375_032_000, 162420)
            // Standard Error: 209_606
            .saturating_add(Weight::from_parts(6_717_847, 0).saturating_mul(n.into()))
            // Standard Error: 269_034
            .saturating_add(Weight::from_parts(64_672_320, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(o.into())))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(o.into())))
           .saturating_add(Weight::from_parts(0, 11573).saturating_mul(o.into()))
           .saturating_add(Weight::from_parts(0, 5116).saturating_mul(n.into()))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:229 w:229)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Orderbook Orders (r:100 w:101)
    /// Proof: Orderbook Orders (max_values: None, max_size: Some(142), added: 2617, mode: MaxEncodedLen)
    /// Storage: NeoSwaps Pools (r:1 w:1)
    /// Proof: NeoSwaps Pools (max_values: None, max_size: Some(144745), added: 147220, mode: MaxEncodedLen)
    /// Storage: System Account (r:102 w:102)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:128 w:128)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:100 w:100)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: Orderbook NextOrderId (r:1 w:1)
    /// Proof: Orderbook NextOrderId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: Tokens Reserves (r:1 w:1)
    /// Proof: Tokens Reserves (max_values: None, max_size: Some(1276), added: 3751, mode: MaxEncodedLen)
    /// The range of component `n` is `[2, 128]`.
    /// The range of component `o` is `[0, 100]`.
    fn sell(n: u32, o: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3232 + n * (195 ±0) + o * (415 ±0)`
        //  Estimated: `162447 + n * (5116 ±0) + o * (11546 ±0)`
        // Minimum execution time: 1_816_221 nanoseconds.
        Weight::from_parts(1_826_621_000, 162447)
            // Standard Error: 251_831
            .saturating_add(Weight::from_parts(5_673_500, 0).saturating_mul(n.into()))
            // Standard Error: 323_230
            .saturating_add(Weight::from_parts(56_050_101, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(o.into())))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes((4_u64).saturating_mul(o.into())))
           .saturating_add(Weight::from_parts(0, 5116).saturating_mul(n.into()))
           .saturating_add(Weight::from_parts(0, 11546).saturating_mul(o.into()))
    }
}
