// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_authorized
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-24`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=zrml_authorized
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/authorized/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_authorized (automatically generated)
pub trait WeightInfoZeitgeist {
    fn authorize_market_outcome_first_report(m: u32) -> Weight;
    fn authorize_market_outcome_existing_report() -> Weight;
    fn on_dispute_weight() -> Weight;
    fn on_resolution_weight() -> Weight;
    fn exchange_weight() -> Weight;
    fn get_auto_resolve_weight() -> Weight;
    fn has_failed_weight() -> Weight;
    fn on_global_dispute_weight() -> Weight;
    fn clear_weight() -> Weight;
}

/// Weight functions for zrml_authorized (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:1 w:1)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// The range of component `m` is `[1, 63]`.
    fn authorize_market_outcome_first_report(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `560 + m * (24 Â±0)`
        //  Estimated: `4507`
        // Minimum execution time: 26_170 nanoseconds.
        Weight::from_parts(29_070_000, 4507)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:1 w:1)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    fn authorize_market_outcome_existing_report() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `561`
        //  Estimated: `4173`
        // Minimum execution time: 22_480 nanoseconds.
        Weight::from_parts(22_480_000, 4173)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    fn on_dispute_weight() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 230 nanoseconds.
        Weight::from_parts(230_000, 0)
    }
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:1 w:1)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    fn on_resolution_weight() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `217`
        //  Estimated: `3514`
        // Minimum execution time: 7_420 nanoseconds.
        Weight::from_parts(7_420_000, 3514)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    fn exchange_weight() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 270 nanoseconds.
        Weight::from_parts(270_000, 0)
    }
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:1 w:0)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    fn get_auto_resolve_weight() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `217`
        //  Estimated: `3514`
        // Minimum execution time: 6_970 nanoseconds.
        Weight::from_parts(6_970_000, 3514).saturating_add(T::DbWeight::get().reads(1))
    }
    fn has_failed_weight() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 260 nanoseconds.
        Weight::from_parts(260_000, 0)
    }
    fn on_global_dispute_weight() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 260 nanoseconds.
        Weight::from_parts(260_000, 0)
    }
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:0 w:1)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    fn clear_weight() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_260 nanoseconds.
        Weight::from_parts(2_260_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
}
