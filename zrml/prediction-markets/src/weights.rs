// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_prediction_markets
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-04-15`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=zrml_prediction_markets
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/prediction-markets/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_prediction_markets (automatically generated)
pub trait WeightInfoZeitgeist {
    fn admin_move_market_to_closed(c: u32) -> Weight;
    fn admin_move_market_to_resolved_scalar_reported(r: u32) -> Weight;
    fn admin_move_market_to_resolved_categorical_reported(r: u32) -> Weight;
    fn admin_move_market_to_resolved_scalar_disputed(r: u32) -> Weight;
    fn admin_move_market_to_resolved_categorical_disputed(r: u32) -> Weight;
    fn approve_market() -> Weight;
    fn request_edit(r: u32) -> Weight;
    fn buy_complete_set(a: u32) -> Weight;
    fn create_market(m: u32) -> Weight;
    fn edit_market(m: u32) -> Weight;
    fn start_global_dispute(m: u32, n: u32) -> Weight;
    fn dispute_authorized() -> Weight;
    fn handle_expired_advised_market() -> Weight;
    fn internal_resolve_categorical_reported() -> Weight;
    fn internal_resolve_categorical_disputed() -> Weight;
    fn internal_resolve_scalar_reported() -> Weight;
    fn internal_resolve_scalar_disputed() -> Weight;
    fn on_initialize_resolve_overhead() -> Weight;
    fn redeem_shares_categorical() -> Weight;
    fn redeem_shares_scalar() -> Weight;
    fn reject_market(c: u32, r: u32) -> Weight;
    fn report_market_with_dispute_mechanism(m: u32) -> Weight;
    fn report_trusted_market() -> Weight;
    fn sell_complete_set(a: u32) -> Weight;
    fn market_status_manager(b: u32, f: u32) -> Weight;
    fn market_resolution_manager(r: u32, d: u32) -> Weight;
    fn schedule_early_close_as_authority(o: u32, n: u32) -> Weight;
    fn schedule_early_close_after_dispute(o: u32, n: u32) -> Weight;
    fn schedule_early_close_as_market_creator(o: u32, n: u32) -> Weight;
    fn dispute_early_close(o: u32, n: u32) -> Weight;
    fn reject_early_close_after_authority(o: u32, n: u32) -> Weight;
    fn reject_early_close_after_dispute() -> Weight;
    fn close_trusted_market(c: u32) -> Weight;
    fn create_market_and_deploy_pool(m: u32, n: u32) -> Weight;
    fn manually_close_market(o: u32) -> Weight;
}

/// Weight functions for zrml_prediction_markets (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// The range of component `c` is `[0, 63]`.
    fn admin_move_market_to_closed(_c: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `726 + c * (16 ±0)`
        //  Estimated: `7195`
        // Minimum execution time: 47_010 nanoseconds.
        Weight::from_parts(62_466_368, 7195)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_scalar_reported(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `772 + r * (16 ±0)`
        //  Estimated: `10408`
        // Minimum execution time: 84_500 nanoseconds.
        Weight::from_parts(116_294_372, 10408)
            // Standard Error: 15_139
            .saturating_add(Weight::from_parts(22_900, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:63 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:63 w:63)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_categorical_reported(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `17743 + r * (16 ±0)`
        //  Estimated: `420008`
        // Minimum execution time: 977_573 nanoseconds.
        Weight::from_parts(1_233_328_742, 420008)
            // Standard Error: 144_771
            .saturating_add(Weight::from_parts(164_049, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(131))
            .saturating_add(T::DbWeight::get().writes(67))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:2 w:2)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_scalar_disputed(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1369 + r * (16 ±0)`
        //  Estimated: `22134`
        // Minimum execution time: 141_201 nanoseconds.
        Weight::from_parts(193_086_493, 22134)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(6))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:2 w:2)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:63 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:63 w:63)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_categorical_disputed(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `18325 + r * (16 ±0)`
        //  Estimated: `431734`
        // Minimum execution time: 1_027_543 nanoseconds.
        Weight::from_parts(1_303_716_166, 431734)
            .saturating_add(T::DbWeight::get().reads(135))
            .saturating_add(T::DbWeight::get().writes(70))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:1 w:0)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:64)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn approve_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `672`
        //  Estimated: `183216`
        // Minimum execution time: 578_002 nanoseconds.
        Weight::from_parts(751_902_000, 183216)
            .saturating_add(T::DbWeight::get().reads(67))
            .saturating_add(T::DbWeight::get().writes(66))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 1024]`.
    fn request_edit(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `535`
        //  Estimated: `6692`
        // Minimum execution time: 26_710 nanoseconds.
        Weight::from_parts(35_866_931, 6692)
            // Standard Error: 339
            .saturating_add(Weight::from_parts(1_624, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:64)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: MarketAssets Account (r:64 w:64)
    /// Proof: MarketAssets Account (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 64]`.
    fn buy_complete_set(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `595 + a * (265 ±0)`
        //  Estimated: `5774 + a * (5292 ±0)`
        // Minimum execution time: 116_930 nanoseconds.
        Weight::from_parts(94_849_694, 5774)
            // Standard Error: 124_185
            .saturating_add(Weight::from_parts(24_826_280, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 5292).saturating_mul(a.into()))
    }
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketCounter (r:1 w:1)
    /// Proof: MarketCommons MarketCounter (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:64)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:0 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 63]`.
    fn create_market(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `316 + m * (16 ±0)`
        //  Estimated: `181063`
        // Minimum execution time: 580_722 nanoseconds.
        Weight::from_parts(746_949_580, 181063)
            // Standard Error: 134_673
            .saturating_add(Weight::from_parts(95_879, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(68))
            .saturating_add(T::DbWeight::get().writes(68))
    }
    /// Storage: PredictionMarkets MarketIdsForEdit (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 63]`.
    fn edit_market(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `751 + m * (16 ±0)`
        //  Estimated: `10720`
        // Minimum execution time: 56_321 nanoseconds.
        Weight::from_parts(74_197_986, 10720)
            // Standard Error: 12_078
            .saturating_add(Weight::from_parts(99_545, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:1)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:0)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(96002), added: 96497, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:31 w:31)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes Outcomes (r:1 w:1)
    /// Proof: GlobalDisputes Outcomes (max_values: None, max_size: Some(395), added: 2870, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// The range of component `m` is `[1, 64]`.
    /// The range of component `n` is `[1, 64]`.
    fn start_global_dispute(m: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `10022 + m * (16 ±0)`
        //  Estimated: `353731`
        // Minimum execution time: 320_101 nanoseconds.
        Weight::from_parts(392_505_353, 353731)
            // Standard Error: 43_508
            .saturating_add(Weight::from_parts(186_891, 0).saturating_mul(m.into()))
            // Standard Error: 43_508
            .saturating_add(Weight::from_parts(73_177, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(40))
            .saturating_add(T::DbWeight::get().writes(36))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn dispute_authorized() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `642`
        //  Estimated: `6891`
        // Minimum execution time: 44_220 nanoseconds.
        Weight::from_parts(59_390_000, 6891)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:0 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    fn handle_expired_advised_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `555`
        //  Estimated: `6891`
        // Minimum execution time: 77_490 nanoseconds.
        Weight::from_parts(79_210_000, 6891)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:63 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:63 w:63)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    fn internal_resolve_categorical_reported() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `17613`
        //  Estimated: `416491`
        // Minimum execution time: 994_903 nanoseconds.
        Weight::from_parts(1_206_524_000, 416491)
            .saturating_add(T::DbWeight::get().reads(130))
            .saturating_add(T::DbWeight::get().writes(66))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:63 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:63 w:63)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    fn internal_resolve_categorical_disputed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `17939`
        //  Estimated: `421886`
        // Minimum execution time: 1_024_403 nanoseconds.
        Weight::from_parts(1_238_704_000, 421886)
            .saturating_add(T::DbWeight::get().reads(132))
            .saturating_add(T::DbWeight::get().writes(67))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn internal_resolve_scalar_reported() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `642`
        //  Estimated: `6891`
        // Minimum execution time: 68_250 nanoseconds.
        Weight::from_parts(83_570_000, 6891)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    fn internal_resolve_scalar_disputed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `983`
        //  Estimated: `12286`
        // Minimum execution time: 118_200 nanoseconds.
        Weight::from_parts(144_091_000, 12286)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets LastTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets LastTimeFrame (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseBlock (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    fn on_initialize_resolve_overhead() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79`
        //  Estimated: `15090`
        // Minimum execution time: 27_990 nanoseconds.
        Weight::from_parts(34_200_000, 15090)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:1 w:1)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: MarketAssets Account (r:1 w:1)
    /// Proof: MarketAssets Account (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    fn redeem_shares_categorical() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3910`
        //  Estimated: `94450`
        // Minimum execution time: 163_190 nanoseconds.
        Weight::from_parts(168_670_000, 94450)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:2 w:2)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: MarketAssets Account (r:2 w:2)
    /// Proof: MarketAssets Account (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:2 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    fn redeem_shares_scalar() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1750`
        //  Estimated: `102260`
        // Minimum execution time: 174_740 nanoseconds.
        Weight::from_parts(235_220_000, 102260)
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(6))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:0 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `c` is `[0, 63]`.
    /// The range of component `r` is `[0, 1024]`.
    fn reject_market(c: u32, r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `659 + c * (16 ±0)`
        //  Estimated: `10416`
        // Minimum execution time: 87_590 nanoseconds.
        Weight::from_parts(116_270_405, 10416)
            // Standard Error: 10_421
            .saturating_add(Weight::from_parts(33_746, 0).saturating_mul(c.into()))
            // Standard Error: 645
            .saturating_add(Weight::from_parts(2_262, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 63]`.
    fn report_market_with_dispute_mechanism(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `732`
        //  Estimated: `7187`
        // Minimum execution time: 42_990 nanoseconds.
        Weight::from_parts(56_207_943, 7187)
            // Standard Error: 7_812
            .saturating_add(Weight::from_parts(6_290, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:2 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:2 w:2)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    fn report_trusted_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1369`
        //  Estimated: `98193`
        // Minimum execution time: 146_430 nanoseconds.
        Weight::from_parts(179_401_000, 98193)
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:64)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: MarketAssets Account (r:64 w:64)
    /// Proof: MarketAssets Account (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 64]`.
    fn sell_complete_set(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `756 + a * (373 ±0)`
        //  Estimated: `5774 + a * (5292 ±0)`
        // Minimum execution time: 147_940 nanoseconds.
        Weight::from_parts(89_827_511, 5774)
            // Standard Error: 219_441
            .saturating_add(Weight::from_parts(42_430_954, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 5292).saturating_mul(a.into()))
    }
    /// Storage: PredictionMarkets MarketIdsPerCloseBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseBlock (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:62 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `b` is `[1, 31]`.
    /// The range of component `f` is `[1, 31]`.
    fn market_status_manager(b: u32, f: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2539 + b * (345 ±0) + f * (347 ±0)`
        //  Estimated: `7050 + b * (3167 ±0) + f * (3167 ±0)`
        // Minimum execution time: 232_361 nanoseconds.
        Weight::from_parts(89_001_117, 7050)
            // Standard Error: 82_419
            .saturating_add(Weight::from_parts(6_613_776, 0).saturating_mul(b.into()))
            // Standard Error: 82_419
            .saturating_add(Weight::from_parts(6_927_874, 0).saturating_mul(f.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(f.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 3167).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 3167).saturating_mul(f.into()))
    }
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:62 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 31]`.
    /// The range of component `d` is `[1, 31]`.
    fn market_resolution_manager(r: u32, d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2483 + r * (345 ±0) + d * (347 ±0)`
        //  Estimated: `7034 + r * (3167 ±0) + d * (3167 ±0)`
        // Minimum execution time: 232_451 nanoseconds.
        Weight::from_parts(84_083_353, 7034)
            // Standard Error: 70_931
            .saturating_add(Weight::from_parts(6_584_415, 0).saturating_mul(r.into()))
            // Standard Error: 70_931
            .saturating_add(Weight::from_parts(6_864_391, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 3167).saturating_mul(r.into()))
            .saturating_add(Weight::from_parts(0, 3167).saturating_mul(d.into()))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_as_authority(o: u32, _n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `763 + o * (16 ±0)`
        //  Estimated: `10720`
        // Minimum execution time: 53_380 nanoseconds.
        Weight::from_parts(69_829_159, 10720)
            // Standard Error: 9_438
            .saturating_add(Weight::from_parts(58_622, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_after_dispute(_o: u32, _n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `986 + o * (16 ±0)`
        //  Estimated: `14444`
        // Minimum execution time: 98_240 nanoseconds.
        Weight::from_parts(129_586_211, 14444)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_as_market_creator(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `824 + o * (16 ±0)`
        //  Estimated: `14444`
        // Minimum execution time: 75_620 nanoseconds.
        Weight::from_parts(92_020_605, 14444)
            // Standard Error: 13_677
            .saturating_add(Weight::from_parts(115_579, 0).saturating_mul(o.into()))
            // Standard Error: 13_677
            .saturating_add(Weight::from_parts(28_959, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn dispute_early_close(_o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `940 + o * (16 ±0) + n * (16 ±0)`
        //  Estimated: `14444`
        // Minimum execution time: 72_551 nanoseconds.
        Weight::from_parts(96_247_822, 14444)
            // Standard Error: 11_213
            .saturating_add(Weight::from_parts(22_013, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn reject_early_close_after_authority(_o: u32, _n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `830 + o * (16 ±0) + n * (16 ±0)`
        //  Estimated: `10720`
        // Minimum execution time: 57_031 nanoseconds.
        Weight::from_parts(75_086_876, 10720)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn reject_early_close_after_dispute() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `688`
        //  Estimated: `6891`
        // Minimum execution time: 69_480 nanoseconds.
        Weight::from_parts(88_480_000, 6891)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// The range of component `c` is `[0, 63]`.
    fn close_trusted_market(_c: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `725 + c * (16 ±0)`
        //  Estimated: `7195`
        // Minimum execution time: 47_610 nanoseconds.
        Weight::from_parts(61_392_473, 7195)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketCounter (r:1 w:1)
    /// Proof: MarketCommons MarketCounter (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:64)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: MarketAssets Account (r:128 w:128)
    /// Proof: MarketAssets Account (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
    /// Storage: NeoSwaps Pools (r:1 w:1)
    /// Proof: NeoSwaps Pools (max_values: None, max_size: Some(144746), added: 147221, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:0 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 63]`.
    /// The range of component `n` is `[2, 64]`.
    fn create_market_and_deploy_pool(_m: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `371 + m * (16 ±0)`
        //  Estimated: `160698 + n * (7884 ±0)`
        // Minimum execution time: 320_281 nanoseconds.
        Weight::from_parts(232_994_984, 160698)
            // Standard Error: 231_500
            .saturating_add(Weight::from_parts(73_326_774, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 7884).saturating_mul(n.into()))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(692), added: 3167, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[1, 63]`.
    fn manually_close_market(o: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `710 + o * (16 ±0)`
        //  Estimated: `7195`
        // Minimum execution time: 45_710 nanoseconds.
        Weight::from_parts(57_406_653, 7195)
            // Standard Error: 9_276
            .saturating_add(Weight::from_parts(73_233, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
