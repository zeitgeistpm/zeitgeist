// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_prediction_markets
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-09-19`, STEPS: `10`, REPEAT: `1000`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=1000
// --pallet=zrml_prediction_markets
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/prediction-markets/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_prediction_markets (automatically generated)
pub trait WeightInfoZeitgeist {
    fn admin_destroy_disputed_market(a: u32, o: u32, c: u32, r: u32) -> Weight;
    fn admin_destroy_reported_market(a: u32, o: u32, c: u32, r: u32) -> Weight;
    fn admin_move_market_to_closed(o: u32, c: u32) -> Weight;
    fn admin_move_market_to_resolved_scalar_reported(r: u32) -> Weight;
    fn admin_move_market_to_resolved_categorical_reported(r: u32) -> Weight;
    fn admin_move_market_to_resolved_scalar_disputed(r: u32) -> Weight;
    fn admin_move_market_to_resolved_categorical_disputed(r: u32) -> Weight;
    fn approve_market() -> Weight;
    fn request_edit(r: u32) -> Weight;
    fn buy_complete_set(a: u32) -> Weight;
    fn create_market(m: u32) -> Weight;
    fn edit_market(m: u32) -> Weight;
    fn deploy_swap_pool_for_market_future_pool(a: u32, o: u32) -> Weight;
    fn deploy_swap_pool_for_market_open_pool(a: u32) -> Weight;
    fn start_global_dispute(m: u32, n: u32) -> Weight;
    fn dispute_authorized() -> Weight;
    fn handle_expired_advised_market() -> Weight;
    fn internal_resolve_categorical_reported() -> Weight;
    fn internal_resolve_categorical_disputed() -> Weight;
    fn internal_resolve_scalar_reported() -> Weight;
    fn internal_resolve_scalar_disputed() -> Weight;
    fn on_initialize_resolve_overhead() -> Weight;
    fn process_subsidy_collecting_markets_raw(a: u32) -> Weight;
    fn redeem_shares_categorical() -> Weight;
    fn redeem_shares_scalar() -> Weight;
    fn reject_market(c: u32, o: u32, r: u32) -> Weight;
    fn report_market_with_dispute_mechanism(m: u32) -> Weight;
    fn report_trusted_market() -> Weight;
    fn sell_complete_set(a: u32) -> Weight;
    fn start_subsidy(a: u32) -> Weight;
    fn market_status_manager(b: u32, f: u32) -> Weight;
    fn market_resolution_manager(r: u32, d: u32) -> Weight;
    fn process_subsidy_collecting_markets_dummy() -> Weight;
    fn create_market_and_deploy_pool(m: u32) -> Weight;
}

/// Weight functions for zrml_prediction_markets (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:2 w:2)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: System Account (r:3 w:3)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:1)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:64 w:64)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    fn admin_destroy_disputed_market(a: u32, o: u32, c: u32, r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2060 + a * (215 ±0) + r * (16 ±0)`
        //  Estimated: `35846 + a * (5116 ±0)`
        // Minimum execution time: 275_961 nanoseconds.
        Weight::from_parts(223_802_648, 35846)
            // Standard Error: 39_490
            .saturating_add(Weight::from_ref_time(29_860_680).saturating_mul(a.into()))
            // Standard Error: 39_293
            .saturating_add(Weight::from_ref_time(133_295).saturating_mul(o.into()))
            // Standard Error: 39_293
            .saturating_add(Weight::from_ref_time(199_113).saturating_mul(c.into()))
            // Standard Error: 39_293
            .saturating_add(Weight::from_ref_time(205_263).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(11_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(10_u64))
            .saturating_add(Weight::from_proof_size(5116).saturating_mul(a.into()))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:1)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:64 w:64)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    fn admin_destroy_reported_market(a: u32, _o: u32, _c: u32, r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1691 + a * (215 ±0) + r * (16 ±0)`
        //  Estimated: `26991 + a * (5116 ±0)`
        // Minimum execution time: 241_041 nanoseconds.
        Weight::from_parts(196_167_863, 26991)
            // Standard Error: 42_480
            .saturating_add(Weight::from_ref_time(30_146_656).saturating_mul(a.into()))
            // Standard Error: 42_269
            .saturating_add(Weight::from_ref_time(177_697).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(7_u64))
            .saturating_add(Weight::from_proof_size(5116).saturating_mul(a.into()))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerOpenTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerOpenTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn admin_move_market_to_closed(_o: u32, c: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `788 + o * (16 ±0) + c * (16 ±0)`
        //  Estimated: `13092`
        // Minimum execution time: 54_890 nanoseconds.
        Weight::from_parts(63_112_401, 13092)
            // Standard Error: 2_775
            .saturating_add(Weight::from_ref_time(31_849).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    fn admin_move_market_to_resolved_scalar_reported(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `785 + r * (16 ±0)`
        //  Estimated: `12780`
        // Minimum execution time: 81_821 nanoseconds.
        Weight::from_parts(89_305_749, 12780)
            // Standard Error: 5_012
            .saturating_add(Weight::from_ref_time(38_041).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn admin_move_market_to_resolved_categorical_reported(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4478 + r * (16 ±0)`
        //  Estimated: `18906`
        // Minimum execution time: 131_161 nanoseconds.
        Weight::from_parts(145_030_674, 18906)
            // Standard Error: 7_894
            .saturating_add(Weight::from_ref_time(17_273).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:2 w:2)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    fn admin_move_market_to_resolved_scalar_disputed(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1311 + r * (16 ±0)`
        //  Estimated: `24506`
        // Minimum execution time: 136_731 nanoseconds.
        Weight::from_parts(153_221_659, 24506)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(6_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:2 w:2)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn admin_move_market_to_resolved_categorical_disputed(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4989 + r * (16 ±0)`
        //  Estimated: `30632`
        // Minimum execution time: 187_561 nanoseconds.
        Weight::from_parts(209_238_581, 30632)
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:1 w:0)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn approve_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `576`
        //  Estimated: `10265`
        // Minimum execution time: 50_180 nanoseconds.
        Weight::from_parts(56_000_000, 10265)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    fn request_edit(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `515`
        //  Estimated: `6541`
        // Minimum execution time: 25_330 nanoseconds.
        Weight::from_parts(27_716_399, 6541)
            // Standard Error: 93
            .saturating_add(Weight::from_ref_time(3_016).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:64 w:64)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn buy_complete_set(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `516`
        //  Estimated: `5623 + a * (5116 ±0)`
        // Minimum execution time: 94_390 nanoseconds.
        Weight::from_parts(49_976_568, 5623)
            // Standard Error: 34_483
            .saturating_add(Weight::from_ref_time(20_543_093).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_proof_size(5116).saturating_mul(a.into()))
    }
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketCounter (r:1 w:1)
    /// Proof: MarketCommons MarketCounter (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:0 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    fn create_market(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `240 + m * (16 ±0)`
        //  Estimated: `8263`
        // Minimum execution time: 51_590 nanoseconds.
        Weight::from_parts(58_403_973, 8263)
            // Standard Error: 3_407
            .saturating_add(Weight::from_ref_time(72_624).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: PredictionMarkets MarketIdsForEdit (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn edit_market(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `731 + m * (16 ±0)`
        //  Estimated: `10569`
        // Minimum execution time: 50_340 nanoseconds.
        Weight::from_parts(55_894_142, 10569)
            // Standard Error: 3_233
            .saturating_add(Weight::from_ref_time(65_400).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Swaps NextPoolId (r:1 w:1)
    /// Proof: Swaps NextPoolId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:129 w:129)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerOpenTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerOpenTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:1)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:0 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn deploy_swap_pool_for_market_future_pool(a: u32, _o: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1208 + a * (118 ±0) + o * (16 ±0)`
        //  Estimated: `17801 + a * (5196 ±0)`
        // Minimum execution time: 183_711 nanoseconds.
        Weight::from_parts(125_849_185, 17801)
            // Standard Error: 50_587
            .saturating_add(Weight::from_ref_time(34_168_218).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(7_u64))
            .saturating_add(Weight::from_proof_size(5196).saturating_mul(a.into()))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Swaps NextPoolId (r:1 w:1)
    /// Proof: Swaps NextPoolId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:129 w:129)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:1)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:0 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn deploy_swap_pool_for_market_open_pool(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1074 + a * (119 ±0)`
        //  Estimated: `14276 + a * (5196 ±0)`
        // Minimum execution time: 185_270 nanoseconds.
        Weight::from_parts(121_585_882, 14276)
            // Standard Error: 50_458
            .saturating_add(Weight::from_ref_time(34_187_947).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(6_u64))
            .saturating_add(Weight::from_proof_size(5196).saturating_mul(a.into()))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:1)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:0)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:31 w:31)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes Outcomes (r:1 w:1)
    /// Proof: GlobalDisputes Outcomes (max_values: None, max_size: Some(395), added: 2870, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    fn start_global_dispute(m: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `9153 + m * (16 ±0)`
        //  Estimated: `329580`
        // Minimum execution time: 318_381 nanoseconds.
        Weight::from_parts(343_839_230, 329580)
            // Standard Error: 15_691
            .saturating_add(Weight::from_ref_time(141_874).saturating_mul(m.into()))
            // Standard Error: 15_691
            .saturating_add(Weight::from_ref_time(107_823).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(40_u64))
            .saturating_add(T::DbWeight::get().writes(36_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn dispute_authorized() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `622`
        //  Estimated: `6740`
        // Minimum execution time: 42_720 nanoseconds.
        Weight::from_parts(44_301_000, 6740)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:0 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    fn handle_expired_advised_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `535`
        //  Estimated: `6740`
        // Minimum execution time: 55_820 nanoseconds.
        Weight::from_parts(57_280_000, 6740)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn internal_resolve_categorical_reported() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4315`
        //  Estimated: `15389`
        // Minimum execution time: 107_820 nanoseconds.
        Weight::from_parts(123_431_000, 15389)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn internal_resolve_categorical_disputed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4570`
        //  Estimated: `20784`
        // Minimum execution time: 155_591 nanoseconds.
        Weight::from_parts(162_400_000, 20784)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    fn internal_resolve_scalar_reported() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `622`
        //  Estimated: `9263`
        // Minimum execution time: 59_350 nanoseconds.
        Weight::from_parts(66_380_000, 9263)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    fn internal_resolve_scalar_disputed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `892`
        //  Estimated: `14658`
        // Minimum execution time: 101_650 nanoseconds.
        Weight::from_parts(123_340_000, 14658)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketsCollectingSubsidy (r:1 w:1)
    /// Proof: PredictionMarkets MarketsCollectingSubsidy (max_values: Some(1), max_size: Some(529), added: 1024, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets LastTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets LastTimeFrame (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerOpenBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerOpenBlock (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerOpenTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerOpenTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseBlock (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    fn on_initialize_resolve_overhead() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79`
        //  Estimated: `23164`
        // Minimum execution time: 33_180 nanoseconds.
        Weight::from_parts(34_210_000, 23164)
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    /// Storage: PredictionMarkets MarketsCollectingSubsidy (r:1 w:1)
    /// Proof: PredictionMarkets MarketsCollectingSubsidy (max_values: Some(1), max_size: Some(529), added: 1024, mode: MaxEncodedLen)
    fn process_subsidy_collecting_markets_raw(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `63 + a * (33 ±0)`
        //  Estimated: `1024`
        // Minimum execution time: 5_290 nanoseconds.
        Weight::from_parts(7_432_139, 1024)
            // Standard Error: 6_874
            .saturating_add(Weight::from_ref_time(481_432).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:1 w:1)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn redeem_shares_categorical() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2024`
        //  Estimated: `10739`
        // Minimum execution time: 92_690 nanoseconds.
        Weight::from_parts(96_821_000, 10739)
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:2 w:2)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:2 w:2)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn redeem_shares_scalar() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1171`
        //  Estimated: `15855`
        // Minimum execution time: 117_211 nanoseconds.
        Weight::from_parts(133_970_000, 15855)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerOpenTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerOpenTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:0 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    fn reject_market(_c: u32, _o: u32, r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `719 + c * (16 ±0) + o * (16 ±0)`
        //  Estimated: `13790`
        // Minimum execution time: 94_260 nanoseconds.
        Weight::from_parts(106_089_785, 13790)
            // Standard Error: 266
            .saturating_add(Weight::from_ref_time(1_689).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    // Storage: MarketCommons Markets (r:1 w:1)
    // Storage: Timestamp Now (r:1 w:0)
    // Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    fn report_market_with_dispute_mechanism(_m: u32) -> Weight {
        Weight::from_ref_time(69_185_134)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    fn report_trusted_market() -> Weight {
        Weight::from_ref_time(123)
    }
    // Storage: MarketCommons Markets (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    // Storage: Tokens Accounts (r:2 w:2)
    // Storage: Tokens TotalIssuance (r:2 w:2)
    fn sell_complete_set(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `756 + a * (161 ±0)`
        //  Estimated: `5623 + a * (5116 ±0)`
        // Minimum execution time: 108_711 nanoseconds.
        Weight::from_parts(62_607_060, 5623)
            // Standard Error: 40_843
            .saturating_add(Weight::from_ref_time(27_796_650).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_proof_size(5116).saturating_mul(a.into()))
    }
    /// Storage: Swaps NextPoolId (r:1 w:1)
    /// Proof: Swaps NextPoolId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:1)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:1)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketsCollectingSubsidy (r:1 w:1)
    /// Proof: PredictionMarkets MarketsCollectingSubsidy (max_values: Some(1), max_size: Some(529), added: 1024, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:0 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn start_subsidy(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `525`
        //  Estimated: `9869`
        // Minimum execution time: 44_180 nanoseconds.
        Weight::from_parts(48_544_019, 9869)
            // Standard Error: 2_939
            .saturating_add(Weight::from_ref_time(91_778).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: PredictionMarkets MarketIdsPerOpenBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerOpenBlock (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:62 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerOpenTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerOpenTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    fn market_status_manager(b: u32, f: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2536 + b * (325 ±0) + f * (327 ±0)`
        //  Estimated: `7050 + b * (3016 ±0) + f * (3016 ±0)`
        // Minimum execution time: 159_270 nanoseconds.
        Weight::from_parts(54_901_658, 7050)
            // Standard Error: 22_664
            .saturating_add(Weight::from_ref_time(3_831_565).saturating_mul(b.into()))
            // Standard Error: 22_664
            .saturating_add(Weight::from_ref_time(3_813_691).saturating_mul(f.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(f.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(3016).saturating_mul(b.into()))
            .saturating_add(Weight::from_proof_size(3016).saturating_mul(f.into()))
    }
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:62 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    fn market_resolution_manager(r: u32, d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2487 + r * (325 ±0) + d * (327 ±0)`
        //  Estimated: `7034 + r * (3016 ±0) + d * (3016 ±0)`
        // Minimum execution time: 157_310 nanoseconds.
        Weight::from_parts(52_065_042, 7034)
            // Standard Error: 22_349
            .saturating_add(Weight::from_ref_time(3_800_277).saturating_mul(r.into()))
            // Standard Error: 22_349
            .saturating_add(Weight::from_ref_time(3_858_826).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(3016).saturating_mul(r.into()))
            .saturating_add(Weight::from_proof_size(3016).saturating_mul(d.into()))
    }
    /// Storage: PredictionMarkets MarketsCollectingSubsidy (r:1 w:1)
    /// Proof: PredictionMarkets MarketsCollectingSubsidy (max_values: Some(1), max_size: Some(529), added: 1024, mode: MaxEncodedLen)
    fn process_subsidy_collecting_markets_dummy() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27`
        //  Estimated: `1024`
        // Minimum execution time: 5_120 nanoseconds.
        Weight::from_parts(5_900_000, 1024)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketCounter (r:1 w:1)
    /// Proof: MarketCommons MarketCounter (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4 w:4)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:2 w:2)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: NeoSwaps Pools (r:1 w:1)
    /// Proof: NeoSwaps Pools (max_values: None, max_size: Some(4652), added: 7127, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:0 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    fn create_market_and_deploy_pool(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `291 + m * (17 ±0)`
        //  Estimated: `36032`
        // Minimum execution time: 166_000 nanoseconds.
        Weight::from_parts(172_000_000, 36032)
            .saturating_add(T::DbWeight::get().reads(13_u64))
            .saturating_add(T::DbWeight::get().writes(13_u64))
    }
}
