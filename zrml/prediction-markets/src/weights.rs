//! Autogenerated weights for zrml_prediction_markets
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-03-23, STEPS: `10`, REPEAT: 1000, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// --chain=dev
// --steps=10
// --repeat=1000
// --pallet=zrml_prediction_markets
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --output=./zrml/prediction-markets/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_prediction_markets (automatically generated)
pub trait WeightInfoZeitgeist {
    fn admin_destroy_disputed_market(a: u32, b: u32, c: u32) -> Weight;
    fn admin_destroy_reported_market(a: u32, b: u32, c: u32) -> Weight;
    fn admin_move_market_to_closed() -> Weight;
    fn admin_move_market_to_resolved_overhead() -> Weight;
    fn approve_market() -> Weight;
    fn buy_complete_set(a: u32) -> Weight;
    fn cancel_pending_market() -> Weight;
    fn create_categorical_market() -> Weight;
    fn create_scalar_market() -> Weight;
    fn deploy_swap_pool_for_market(a: u32) -> Weight;
    fn dispute(a: u32) -> Weight;
    fn internal_resolve_categorical_reported(a: u32, _b: u32, c: u32) -> Weight;
    fn internal_resolve_categorical_disputed(a: u32, _b: u32, c: u32, d: u32) -> Weight;
    fn internal_resolve_scalar_reported() -> Weight;
    fn internal_resolve_scalar_disputed(_d: u32) -> Weight;
    fn on_initialize_resolve_overhead() -> Weight;
    fn process_subsidy_collecting_markets_raw(a: u32) -> Weight;
    fn redeem_shares_categorical() -> Weight;
    fn redeem_shares_scalar() -> Weight;
    fn reject_market() -> Weight;
    fn report() -> Weight;
    fn sell_complete_set(a: u32) -> Weight;
    fn start_subsidy(a: u32) -> Weight;
}

/// Weight functions for zrml_prediction_markets (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    fn admin_destroy_disputed_market(a: u32, b: u32, c: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 170_000
            .saturating_add((85_234_000 as Weight).saturating_mul(a as Weight))
            // Standard Error: 170_000
            .saturating_add((2_780_000 as Weight).saturating_mul(b as Weight))
            // Standard Error: 222_000
            .saturating_add((85_130_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
    }

    fn admin_destroy_reported_market(a: u32, b: u32, c: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 165_000
            .saturating_add((83_407_000 as Weight).saturating_mul(a as Weight))
            // Standard Error: 165_000
            .saturating_add((4_034_000 as Weight).saturating_mul(b as Weight))
            // Standard Error: 217_000
            .saturating_add((85_359_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
    }

    fn admin_move_market_to_closed() -> Weight {
        (14_730_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }

    fn admin_move_market_to_resolved_overhead() -> Weight {
        (150_830_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(7 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }

    fn approve_market() -> Weight {
        (66_960_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }

    fn buy_complete_set(a: u32) -> Weight {
        (110_973_000 as Weight)
            // Standard Error: 113_000
            .saturating_add((24_566_000 as Weight).saturating_mul(a as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
            .saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
    }

    fn cancel_pending_market() -> Weight {
        (67_550_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }

    fn create_categorical_market() -> Weight {
        (71_260_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }

    fn create_scalar_market() -> Weight {
        (59_310_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }

    fn deploy_swap_pool_for_market(a: u32) -> Weight {
        (172_134_000 as Weight)
            // Standard Error: 207_000
            .saturating_add((50_832_000 as Weight).saturating_mul(a as Weight))
            .saturating_add(T::DbWeight::get().reads(7 as Weight))
            .saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
            .saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
    }

    fn dispute(a: u32) -> Weight {
        (13_898_000 as Weight)
            // Standard Error: 10_000
            .saturating_add((91_000 as Weight).saturating_mul(a as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }

    fn internal_resolve_categorical_reported(a: u32, _b: u32, c: u32) -> Weight {
        (14_632_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((35_000 as Weight).saturating_mul(a as Weight))
            // Standard Error: 4_000
            .saturating_add((6_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }

    fn internal_resolve_categorical_disputed(a: u32, _b: u32, c: u32, d: u32) -> Weight {
        (13_941_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((12_000 as Weight).saturating_mul(a as Weight))
            // Standard Error: 4_000
            .saturating_add((32_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 6_000
            .saturating_add((86_000 as Weight).saturating_mul(d as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }

    fn internal_resolve_scalar_reported() -> Weight {
        (16_260_000 as Weight).saturating_add(T::DbWeight::get().reads(2 as Weight))
    }

    fn internal_resolve_scalar_disputed(_d: u32) -> Weight {
        (15_604_000 as Weight).saturating_add(T::DbWeight::get().reads(2 as Weight))
    }

    fn on_initialize_resolve_overhead() -> Weight {
        (20_280_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }

    fn process_subsidy_collecting_markets_raw(a: u32) -> Weight {
        (7_950_000 as Weight)
            // Standard Error: 3_000
            .saturating_add((419_000 as Weight).saturating_mul(a as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }

    fn redeem_shares_categorical() -> Weight {
        (89_910_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }

    fn redeem_shares_scalar() -> Weight {
        (112_720_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(6 as Weight))
            .saturating_add(T::DbWeight::get().writes(5 as Weight))
    }

    fn reject_market() -> Weight {
        (76_380_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }

    fn report() -> Weight {
        (51_120_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }

    fn sell_complete_set(a: u32) -> Weight {
        (78_421_000 as Weight)
            // Standard Error: 109_000
            .saturating_add((23_828_000 as Weight).saturating_mul(a as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
            .saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
    }

    fn start_subsidy(a: u32) -> Weight {
        (53_377_000 as Weight)
            // Standard Error: 27_000
            .saturating_add((925_000 as Weight).saturating_mul(a as Weight))
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(5 as Weight))
    }
}
