// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_prediction_markets
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2025-02-26`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ztg-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=zrml_prediction_markets
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/prediction-markets/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_prediction_markets (automatically generated)
pub trait WeightInfoZeitgeist {
    fn admin_move_market_to_closed(c: u32) -> Weight;
    fn admin_move_market_to_resolved_scalar_reported(r: u32) -> Weight;
    fn admin_move_market_to_resolved_categorical_reported(r: u32) -> Weight;
    fn admin_move_market_to_resolved_scalar_disputed(r: u32) -> Weight;
    fn admin_move_market_to_resolved_categorical_disputed(r: u32) -> Weight;
    fn approve_market() -> Weight;
    fn request_edit(r: u32) -> Weight;
    fn buy_complete_set(a: u32) -> Weight;
    fn create_market(m: u32) -> Weight;
    fn edit_market(m: u32) -> Weight;
    fn start_global_dispute(m: u32, n: u32) -> Weight;
    fn dispute_authorized() -> Weight;
    fn handle_expired_advised_market() -> Weight;
    fn internal_resolve_categorical_reported() -> Weight;
    fn internal_resolve_categorical_disputed() -> Weight;
    fn internal_resolve_scalar_reported() -> Weight;
    fn internal_resolve_scalar_disputed() -> Weight;
    fn on_initialize_resolve_overhead() -> Weight;
    fn redeem_shares_categorical() -> Weight;
    fn redeem_shares_scalar() -> Weight;
    fn reject_market(c: u32, r: u32) -> Weight;
    fn report_market_with_dispute_mechanism(m: u32) -> Weight;
    fn report_trusted_market() -> Weight;
    fn sell_complete_set(a: u32) -> Weight;
    fn market_status_manager(b: u32, f: u32) -> Weight;
    fn market_resolution_manager(r: u32, d: u32) -> Weight;
    fn schedule_early_close_as_authority(o: u32, n: u32) -> Weight;
    fn schedule_early_close_after_dispute(o: u32, n: u32) -> Weight;
    fn schedule_early_close_as_market_creator(o: u32, n: u32) -> Weight;
    fn dispute_early_close(o: u32, n: u32) -> Weight;
    fn reject_early_close_after_authority(o: u32, n: u32) -> Weight;
    fn reject_early_close_after_dispute() -> Weight;
    fn close_trusted_market(c: u32) -> Weight;
    fn create_market_and_deploy_pool(m: u32, n: u32) -> Weight;
    fn manually_close_market(o: u32) -> Weight;
}

/// Weight functions for zrml_prediction_markets (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[0, 63]`.
    fn admin_move_market_to_closed(c: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `695 + c * (16 ±0)`
        //  Estimated: `4515`
        // Minimum execution time: 36_731 nanoseconds.
        Weight::from_parts(38_619_418, 4515)
            // Standard Error: 2_834
            .saturating_add(Weight::from_parts(30_985, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerReportBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerReportBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_scalar_reported(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `708 + r * (16 ±0)`
        //  Estimated: `4714`
        // Minimum execution time: 77_082 nanoseconds.
        Weight::from_parts(80_183_879, 4714)
            // Standard Error: 5_585
            .saturating_add(Weight::from_parts(31_648, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerReportBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerReportBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_categorical_reported(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `664 + r * (16 ±0)`
        //  Estimated: `4714`
        // Minimum execution time: 75_902 nanoseconds.
        Weight::from_parts(79_639_741, 4714)
            // Standard Error: 4_054
            .saturating_add(Weight::from_parts(35_058, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:1 w:1)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:2 w:2)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_scalar_disputed(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1240 + r * (16 ±0)`
        //  Estimated: `8438`
        // Minimum execution time: 134_313 nanoseconds.
        Weight::from_parts(140_351_610, 8438)
            // Standard Error: 6_345
            .saturating_add(Weight::from_parts(14_793, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(6))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:1 w:1)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:2 w:2)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_categorical_disputed(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1181 + r * (16 ±0)`
        //  Estimated: `8438`
        // Minimum execution time: 133_743 nanoseconds.
        Weight::from_parts(138_140_455, 8438)
            // Standard Error: 6_863
            .saturating_add(Weight::from_parts(42_089, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(6))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsForEdit` (r:1 w:0)
    /// Proof: `PredictionMarkets::MarketIdsForEdit` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    fn approve_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `564`
        //  Estimated: `4714`
        // Minimum execution time: 45_511 nanoseconds.
        Weight::from_parts(47_291_000, 4714)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsForEdit` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsForEdit` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[0, 1024]`.
    fn request_edit(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `503`
        //  Estimated: `4515`
        // Minimum execution time: 21_150 nanoseconds.
        Weight::from_parts(22_936_974, 4515)
            // Standard Error: 222
            .saturating_add(Weight::from_parts(2_106, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:64 w:64)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:64 w:64)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[2, 64]`.
    fn buy_complete_set(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `538`
        //  Estimated: `4173 + a * (2612 ±0)`
        // Minimum execution time: 106_163 nanoseconds.
        Weight::from_parts(74_586_933, 4173)
            // Standard Error: 35_964
            .saturating_add(Weight::from_parts(17_363_952, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 2612).saturating_mul(a.into()))
    }
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::MarketCounter` (r:1 w:1)
    /// Proof: `MarketCommons::MarketCounter` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:0 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// The range of component `m` is `[0, 63]`.
    fn create_market(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `241 + m * (16 ±0)`
        //  Estimated: `4714`
        // Minimum execution time: 52_332 nanoseconds.
        Weight::from_parts(56_656_667, 4714)
            // Standard Error: 5_208
            .saturating_add(Weight::from_parts(21_515, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `PredictionMarkets::MarketIdsForEdit` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsForEdit` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// The range of component `m` is `[0, 63]`.
    fn edit_market(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `720 + m * (16 ±0)`
        //  Estimated: `4515`
        // Minimum execution time: 46_701 nanoseconds.
        Weight::from_parts(49_202_456, 4515)
            // Standard Error: 3_671
            .saturating_add(Weight::from_parts(57_592, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:1)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `Court::MarketIdToCourtId` (r:1 w:0)
    /// Proof: `Court::MarketIdToCourtId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtPool` (r:1 w:0)
    /// Proof: `Court::CourtPool` (`max_values`: Some(1), `max_size`: Some(96002), added: 96497, mode: `MaxEncodedLen`)
    /// Storage: `Court::Courts` (r:1 w:1)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtIdToMarketId` (r:1 w:0)
    /// Proof: `Court::CourtIdToMarketId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectedDraws` (r:1 w:1)
    /// Proof: `Court::SelectedDraws` (`max_values`: None, `max_size`: Some(149974), added: 152449, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:31 w:31)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::Outcomes` (r:1 w:1)
    /// Proof: `GlobalDisputes::Outcomes` (`max_values`: None, `max_size`: Some(395), added: 2870, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// The range of component `m` is `[1, 64]`.
    /// The range of component `n` is `[1, 64]`.
    fn start_global_dispute(_m: u32, _n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `8805 + m * (16 ±0)`
        //  Estimated: `153439`
        // Minimum execution time: 295_077 nanoseconds.
        Weight::from_parts(306_470_413, 153439)
            .saturating_add(T::DbWeight::get().reads(40))
            .saturating_add(T::DbWeight::get().writes(36))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    fn dispute_authorized() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `610`
        //  Estimated: `4714`
        // Minimum execution time: 39_141 nanoseconds.
        Weight::from_parts(41_401_000, 4714)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsForEdit` (r:0 w:1)
    /// Proof: `PredictionMarkets::MarketIdsForEdit` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    fn handle_expired_advised_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `523`
        //  Estimated: `4714`
        // Minimum execution time: 58_571 nanoseconds.
        Weight::from_parts(60_101_000, 4714)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    fn internal_resolve_categorical_reported() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `566`
        //  Estimated: `4714`
        // Minimum execution time: 58_491 nanoseconds.
        Weight::from_parts(59_792_000, 4714)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:1 w:1)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    fn internal_resolve_categorical_disputed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `859`
        //  Estimated: `4714`
        // Minimum execution time: 103_442 nanoseconds.
        Weight::from_parts(105_963_000, 4714)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    fn internal_resolve_scalar_reported() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `610`
        //  Estimated: `4714`
        // Minimum execution time: 57_951 nanoseconds.
        Weight::from_parts(60_221_000, 4714)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:1 w:1)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    fn internal_resolve_scalar_disputed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `918`
        //  Estimated: `4714`
        // Minimum execution time: 103_793 nanoseconds.
        Weight::from_parts(106_522_000, 4714)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::LastTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::LastTimeFrame` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseBlock` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerReportBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerReportBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    fn on_initialize_resolve_overhead() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `112`
        //  Estimated: `4515`
        // Minimum execution time: 20_040 nanoseconds.
        Weight::from_parts(20_600_000, 4515)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:1 w:1)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:1 w:1)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    fn redeem_shares_categorical() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1982`
        //  Estimated: `4173`
        // Minimum execution time: 107_483 nanoseconds.
        Weight::from_parts(111_663_000, 4173)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:2 w:2)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:2 w:2)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    fn redeem_shares_scalar() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1097`
        //  Estimated: `6214`
        // Minimum execution time: 128_273 nanoseconds.
        Weight::from_parts(132_073_000, 6214)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsForEdit` (r:0 w:1)
    /// Proof: `PredictionMarkets::MarketIdsForEdit` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[0, 63]`.
    /// The range of component `r` is `[0, 1024]`.
    fn reject_market(c: u32, r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `595 + c * (16 ±0)`
        //  Estimated: `4714`
        // Minimum execution time: 81_512 nanoseconds.
        Weight::from_parts(84_333_685, 4714)
            // Standard Error: 4_205
            .saturating_add(Weight::from_parts(41_705, 0).saturating_mul(c.into()))
            // Standard Error: 260
            .saturating_add(Weight::from_parts(1_174, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerReportBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerReportBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// The range of component `m` is `[0, 63]`.
    fn report_market_with_dispute_mechanism(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `733`
        //  Estimated: `4507`
        // Minimum execution time: 32_930 nanoseconds.
        Weight::from_parts(35_834_788, 4507)
            // Standard Error: 3_063
            .saturating_add(Weight::from_parts(19_442, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    fn report_trusted_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `522`
        //  Estimated: `4714`
        // Minimum execution time: 78_181 nanoseconds.
        Weight::from_parts(80_823_000, 4714)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:64 w:64)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:64 w:64)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[2, 64]`.
    fn sell_complete_set(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `745 + a * (129 ±0)`
        //  Estimated: `4173 + a * (2612 ±0)`
        // Minimum execution time: 126_082 nanoseconds.
        Weight::from_parts(72_612_851, 4173)
            // Standard Error: 56_271
            .saturating_add(Weight::from_parts(24_694_326, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 2612).saturating_mul(a.into()))
    }
    /// Storage: `PredictionMarkets::MarketIdsPerCloseBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseBlock` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:62 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `b` is `[1, 31]`.
    /// The range of component `f` is `[1, 31]`.
    fn market_status_manager(b: u32, f: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2475 + b * (312 ±0) + f * (314 ±0)`
        //  Estimated: `4515 + b * (3183 ±0) + f * (3183 ±0)`
        // Minimum execution time: 165_714 nanoseconds.
        Weight::from_parts(41_089_414, 4515)
            // Standard Error: 18_757
            .saturating_add(Weight::from_parts(4_089_525, 0).saturating_mul(b.into()))
            // Standard Error: 18_757
            .saturating_add(Weight::from_parts(4_278_128, 0).saturating_mul(f.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(f.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 3183).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 3183).saturating_mul(f.into()))
    }
    /// Storage: `PredictionMarkets::MarketIdsPerReportBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerReportBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:62 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 31]`.
    /// The range of component `d` is `[1, 31]`.
    fn market_resolution_manager(r: u32, d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2419 + d * (314 ±0) + r * (312 ±0)`
        //  Estimated: `4507 + d * (3183 ±0) + r * (3183 ±0)`
        // Minimum execution time: 164_313 nanoseconds.
        Weight::from_parts(33_755_315, 4507)
            // Standard Error: 19_231
            .saturating_add(Weight::from_parts(4_257_444, 0).saturating_mul(r.into()))
            // Standard Error: 19_231
            .saturating_add(Weight::from_parts(4_412_412, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 3183).saturating_mul(d.into()))
            .saturating_add(Weight::from_parts(0, 3183).saturating_mul(r.into()))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:2 w:2)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_as_authority(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `732 + o * (16 ±0)`
        //  Estimated: `8040`
        // Minimum execution time: 41_471 nanoseconds.
        Weight::from_parts(44_019_306, 8040)
            // Standard Error: 3_646
            .saturating_add(Weight::from_parts(24_550, 0).saturating_mul(o.into()))
            // Standard Error: 3_646
            .saturating_add(Weight::from_parts(10_337, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:2 w:2)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_after_dispute(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `955 + o * (16 ±0)`
        //  Estimated: `8040`
        // Minimum execution time: 87_912 nanoseconds.
        Weight::from_parts(90_586_066, 8040)
            // Standard Error: 17_523
            .saturating_add(Weight::from_parts(27_760, 0).saturating_mul(o.into()))
            // Standard Error: 17_523
            .saturating_add(Weight::from_parts(36_946, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:2 w:2)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_as_market_creator(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `793 + o * (16 ±0)`
        //  Estimated: `8040`
        // Minimum execution time: 64_042 nanoseconds.
        Weight::from_parts(65_453_298, 8040)
            // Standard Error: 4_479
            .saturating_add(Weight::from_parts(41_945, 0).saturating_mul(o.into()))
            // Standard Error: 4_479
            .saturating_add(Weight::from_parts(35_293, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:2 w:2)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn dispute_early_close(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `877 + n * (16 ±0) + o * (16 ±0)`
        //  Estimated: `8040`
        // Minimum execution time: 60_601 nanoseconds.
        Weight::from_parts(62_161_170, 8040)
            // Standard Error: 3_971
            .saturating_add(Weight::from_parts(36_459, 0).saturating_mul(o.into()))
            // Standard Error: 3_971
            .saturating_add(Weight::from_parts(40_923, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:2 w:2)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn reject_early_close_after_authority(_o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `767 + n * (16 ±0) + o * (16 ±0)`
        //  Estimated: `8040`
        // Minimum execution time: 45_831 nanoseconds.
        Weight::from_parts(50_083_993, 8040)
            // Standard Error: 7_262
            .saturating_add(Weight::from_parts(18_380, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    fn reject_early_close_after_dispute() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `656`
        //  Estimated: `4714`
        // Minimum execution time: 65_411 nanoseconds.
        Weight::from_parts(69_492_000, 4714)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[0, 63]`.
    fn close_trusted_market(_c: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694 + c * (16 ±0)`
        //  Estimated: `4515`
        // Minimum execution time: 36_730 nanoseconds.
        Weight::from_parts(40_668_463, 4515)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::MarketCounter` (r:1 w:1)
    /// Proof: `MarketCommons::MarketCounter` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:128 w:128)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:64 w:64)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::MarketIdToPoolId` (r:1 w:1)
    /// Proof: `NeoSwaps::MarketIdToPoolId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::PoolCount` (r:1 w:1)
    /// Proof: `NeoSwaps::PoolCount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::Pools` (r:0 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:0 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// The range of component `m` is `[0, 63]`.
    /// The range of component `n` is `[2, 64]`.
    fn create_market_and_deploy_pool(m: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `411 + m * (16 ±0)`
        //  Estimated: `6204 + n * (5224 ±0)`
        // Minimum execution time: 274_526 nanoseconds.
        Weight::from_parts(172_979_694, 6204)
            // Standard Error: 81_993
            .saturating_add(Weight::from_parts(490_363, 0).saturating_mul(m.into()))
            // Standard Error: 83_221
            .saturating_add(Weight::from_parts(46_175_314, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(9))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 5224).saturating_mul(n.into()))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[1, 63]`.
    fn manually_close_market(o: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `679 + o * (16 ±0)`
        //  Estimated: `4515`
        // Minimum execution time: 35_441 nanoseconds.
        Weight::from_parts(38_497_957, 4515)
            // Standard Error: 3_648
            .saturating_add(Weight::from_parts(12_632, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
