// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_prediction_markets
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-08-28`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=zrml_prediction_markets
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/prediction-markets/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_prediction_markets (automatically generated)
pub trait WeightInfoZeitgeist {
    fn admin_move_market_to_closed(c: u32) -> Weight;
    fn admin_move_market_to_resolved_scalar_reported(r: u32) -> Weight;
    fn admin_move_market_to_resolved_categorical_reported(r: u32) -> Weight;
    fn admin_move_market_to_resolved_scalar_disputed(r: u32) -> Weight;
    fn admin_move_market_to_resolved_categorical_disputed(r: u32) -> Weight;
    fn approve_market() -> Weight;
    fn request_edit(r: u32) -> Weight;
    fn buy_complete_set(a: u32) -> Weight;
    fn create_market(m: u32) -> Weight;
    fn edit_market(m: u32) -> Weight;
    fn start_global_dispute(m: u32, n: u32) -> Weight;
    fn dispute_authorized() -> Weight;
    fn handle_expired_advised_market() -> Weight;
    fn internal_resolve_categorical_reported() -> Weight;
    fn internal_resolve_categorical_disputed() -> Weight;
    fn internal_resolve_scalar_reported() -> Weight;
    fn internal_resolve_scalar_disputed() -> Weight;
    fn on_initialize_resolve_overhead() -> Weight;
    fn redeem_shares_categorical() -> Weight;
    fn redeem_shares_scalar() -> Weight;
    fn reject_market(c: u32, r: u32) -> Weight;
    fn report_market_with_dispute_mechanism(m: u32) -> Weight;
    fn report_trusted_market() -> Weight;
    fn sell_complete_set(a: u32) -> Weight;
    fn market_status_manager(b: u32, f: u32) -> Weight;
    fn market_resolution_manager(r: u32, d: u32) -> Weight;
    fn schedule_early_close_as_authority(o: u32, n: u32) -> Weight;
    fn schedule_early_close_after_dispute(o: u32, n: u32) -> Weight;
    fn schedule_early_close_as_market_creator(o: u32, n: u32) -> Weight;
    fn dispute_early_close(o: u32, n: u32) -> Weight;
    fn reject_early_close_after_authority(o: u32, n: u32) -> Weight;
    fn reject_early_close_after_dispute() -> Weight;
    fn close_trusted_market(c: u32) -> Weight;
    fn create_market_and_deploy_pool(m: u32, n: u32) -> Weight;
    fn manually_close_market(o: u32) -> Weight;
}

/// Weight functions for zrml_prediction_markets (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[0, 63]`.
    fn admin_move_market_to_closed(c: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `662 + c * (16 ±0)`
        //  Estimated: `4515`
        // Minimum execution time: 36_831 nanoseconds.
        Weight::from_parts(38_421_633, 4515)
            // Standard Error: 2_042
            .saturating_add(Weight::from_parts(20_167, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerReportBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerReportBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_scalar_reported(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `708 + r * (16 ±0)`
        //  Estimated: `4714`
        // Minimum execution time: 79_302 nanoseconds.
        Weight::from_parts(81_984_963, 4714)
            // Standard Error: 5_599
            .saturating_add(Weight::from_parts(41_550, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerReportBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerReportBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_categorical_reported(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `664 + r * (16 ±0)`
        //  Estimated: `4714`
        // Minimum execution time: 77_842 nanoseconds.
        Weight::from_parts(82_291_971, 4714)
            // Standard Error: 4_485
            .saturating_add(Weight::from_parts(10_323, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:1 w:1)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:2 w:2)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_scalar_disputed(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1240 + r * (16 ±0)`
        //  Estimated: `8438`
        // Minimum execution time: 137_113 nanoseconds.
        Weight::from_parts(141_679_247, 8438)
            // Standard Error: 6_463
            .saturating_add(Weight::from_parts(31_634, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(6))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:1 w:1)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:2 w:2)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_categorical_disputed(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1181 + r * (16 ±0)`
        //  Estimated: `8438`
        // Minimum execution time: 136_583 nanoseconds.
        Weight::from_parts(141_473_597, 8438)
            // Standard Error: 8_261
            .saturating_add(Weight::from_parts(38_708, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(6))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsForEdit` (r:1 w:0)
    /// Proof: `PredictionMarkets::MarketIdsForEdit` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    fn approve_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `564`
        //  Estimated: `4714`
        // Minimum execution time: 45_821 nanoseconds.
        Weight::from_parts(48_390_000, 4714)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsForEdit` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsForEdit` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[0, 1024]`.
    fn request_edit(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `503`
        //  Estimated: `4515`
        // Minimum execution time: 21_080 nanoseconds.
        Weight::from_parts(22_303_172, 4515)
            // Standard Error: 91
            .saturating_add(Weight::from_parts(1_159, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:64 w:64)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:64 w:64)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(43), added: 2518, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[2, 64]`.
    fn buy_complete_set(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `538`
        //  Estimated: `4159 + a * (2598 ±0)`
        // Minimum execution time: 108_012 nanoseconds.
        Weight::from_parts(71_664_486, 4159)
            // Standard Error: 29_779
            .saturating_add(Weight::from_parts(18_371_668, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 2598).saturating_mul(a.into()))
    }
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::MarketCounter` (r:1 w:1)
    /// Proof: `MarketCommons::MarketCounter` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:0 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// The range of component `m` is `[0, 63]`.
    fn create_market(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `208 + m * (16 ±0)`
        //  Estimated: `4714`
        // Minimum execution time: 51_602 nanoseconds.
        Weight::from_parts(57_117_346, 4714)
            // Standard Error: 5_992
            .saturating_add(Weight::from_parts(17_678, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `PredictionMarkets::MarketIdsForEdit` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsForEdit` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// The range of component `m` is `[0, 63]`.
    fn edit_market(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `687 + m * (16 ±0)`
        //  Estimated: `4515`
        // Minimum execution time: 47_221 nanoseconds.
        Weight::from_parts(49_232_779, 4515)
            // Standard Error: 2_843
            .saturating_add(Weight::from_parts(47_641, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:1)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `Court::MarketIdToCourtId` (r:1 w:0)
    /// Proof: `Court::MarketIdToCourtId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtPool` (r:1 w:0)
    /// Proof: `Court::CourtPool` (`max_values`: Some(1), `max_size`: Some(96002), added: 96497, mode: `MaxEncodedLen`)
    /// Storage: `Court::Courts` (r:1 w:1)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtIdToMarketId` (r:1 w:0)
    /// Proof: `Court::CourtIdToMarketId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectedDraws` (r:1 w:1)
    /// Proof: `Court::SelectedDraws` (`max_values`: None, `max_size`: Some(149974), added: 152449, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:31 w:31)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::Outcomes` (r:1 w:1)
    /// Proof: `GlobalDisputes::Outcomes` (`max_values`: None, `max_size`: Some(395), added: 2870, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// The range of component `m` is `[1, 64]`.
    /// The range of component `n` is `[1, 64]`.
    fn start_global_dispute(m: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `8805 + m * (16 ±0)`
        //  Estimated: `153439`
        // Minimum execution time: 289_446 nanoseconds.
        Weight::from_parts(297_513_059, 153439)
            // Standard Error: 14_165
            .saturating_add(Weight::from_parts(65_823, 0).saturating_mul(m.into()))
            // Standard Error: 14_165
            .saturating_add(Weight::from_parts(43_214, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(40))
            .saturating_add(T::DbWeight::get().writes(36))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    fn dispute_authorized() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `610`
        //  Estimated: `4714`
        // Minimum execution time: 39_190 nanoseconds.
        Weight::from_parts(40_650_000, 4714)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsForEdit` (r:0 w:1)
    /// Proof: `PredictionMarkets::MarketIdsForEdit` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    fn handle_expired_advised_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `523`
        //  Estimated: `4714`
        // Minimum execution time: 60_451 nanoseconds.
        Weight::from_parts(62_032_000, 4714)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    fn internal_resolve_categorical_reported() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `566`
        //  Estimated: `4714`
        // Minimum execution time: 59_531 nanoseconds.
        Weight::from_parts(61_472_000, 4714)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:1 w:1)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    fn internal_resolve_categorical_disputed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `859`
        //  Estimated: `4714`
        // Minimum execution time: 105_522 nanoseconds.
        Weight::from_parts(108_163_000, 4714)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    fn internal_resolve_scalar_reported() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `610`
        //  Estimated: `4714`
        // Minimum execution time: 59_501 nanoseconds.
        Weight::from_parts(61_501_000, 4714)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `GlobalDisputes::GlobalDisputesInfo` (r:1 w:0)
    /// Proof: `GlobalDisputes::GlobalDisputesInfo` (`max_values`: None, `max_size`: Some(396), added: 2871, mode: `MaxEncodedLen`)
    /// Storage: `Authorized::AuthorizedOutcomeReports` (r:1 w:1)
    /// Proof: `Authorized::AuthorizedOutcomeReports` (`max_values`: None, `max_size`: Some(49), added: 2524, mode: `MaxEncodedLen`)
    fn internal_resolve_scalar_disputed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `918`
        //  Estimated: `4714`
        // Minimum execution time: 107_393 nanoseconds.
        Weight::from_parts(109_502_000, 4714)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::LastTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::LastTimeFrame` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseBlock` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerReportBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerReportBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    fn on_initialize_resolve_overhead() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79`
        //  Estimated: `4515`
        // Minimum execution time: 19_711 nanoseconds.
        Weight::from_parts(20_150_000, 4515)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:1 w:1)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:1 w:1)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(43), added: 2518, mode: `MaxEncodedLen`)
    fn redeem_shares_categorical() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1982`
        //  Estimated: `4159`
        // Minimum execution time: 109_602 nanoseconds.
        Weight::from_parts(112_433_000, 4159)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:2 w:2)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:2 w:2)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(43), added: 2518, mode: `MaxEncodedLen`)
    fn redeem_shares_scalar() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1097`
        //  Estimated: `6186`
        // Minimum execution time: 132_524 nanoseconds.
        Weight::from_parts(137_973_000, 6186)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsForEdit` (r:0 w:1)
    /// Proof: `PredictionMarkets::MarketIdsForEdit` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[0, 63]`.
    /// The range of component `r` is `[0, 1024]`.
    fn reject_market(c: u32, r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `595 + c * (16 ±0)`
        //  Estimated: `4714`
        // Minimum execution time: 83_302 nanoseconds.
        Weight::from_parts(86_490_998, 4714)
            // Standard Error: 4_477
            .saturating_add(Weight::from_parts(32_226, 0).saturating_mul(c.into()))
            // Standard Error: 277
            .saturating_add(Weight::from_parts(61, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerReportBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerReportBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// The range of component `m` is `[0, 63]`.
    fn report_market_with_dispute_mechanism(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `700`
        //  Estimated: `4507`
        // Minimum execution time: 32_890 nanoseconds.
        Weight::from_parts(35_838_009, 4507)
            // Standard Error: 2_258
            .saturating_add(Weight::from_parts(8_413, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    fn report_trusted_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `522`
        //  Estimated: `4714`
        // Minimum execution time: 79_152 nanoseconds.
        Weight::from_parts(81_713_000, 4714)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:64 w:64)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:64 w:64)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(43), added: 2518, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[2, 64]`.
    fn sell_complete_set(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `745 + a * (129 ±0)`
        //  Estimated: `4159 + a * (2598 ±0)`
        // Minimum execution time: 126_733 nanoseconds.
        Weight::from_parts(72_032_003, 4159)
            // Standard Error: 35_921
            .saturating_add(Weight::from_parts(25_272_652, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 2598).saturating_mul(a.into()))
    }
    /// Storage: `PredictionMarkets::MarketIdsPerCloseBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseBlock` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:62 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `b` is `[1, 31]`.
    /// The range of component `f` is `[1, 31]`.
    fn market_status_manager(b: u32, f: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2475 + b * (312 ±0) + f * (314 ±0)`
        //  Estimated: `4515 + b * (3169 ±0) + f * (3169 ±0)`
        // Minimum execution time: 160_883 nanoseconds.
        Weight::from_parts(37_645_751, 4515)
            // Standard Error: 19_417
            .saturating_add(Weight::from_parts(4_093_621, 0).saturating_mul(b.into()))
            // Standard Error: 19_417
            .saturating_add(Weight::from_parts(4_234_326, 0).saturating_mul(f.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(f.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 3169).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 3169).saturating_mul(f.into()))
    }
    /// Storage: `PredictionMarkets::MarketIdsPerReportBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerReportBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:62 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 31]`.
    /// The range of component `d` is `[1, 31]`.
    fn market_resolution_manager(r: u32, d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2419 + d * (314 ±0) + r * (312 ±0)`
        //  Estimated: `4507 + d * (3169 ±0) + r * (3169 ±0)`
        // Minimum execution time: 159_323 nanoseconds.
        Weight::from_parts(33_983_702, 4507)
            // Standard Error: 19_828
            .saturating_add(Weight::from_parts(4_131_663, 0).saturating_mul(r.into()))
            // Standard Error: 19_828
            .saturating_add(Weight::from_parts(4_255_579, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 3169).saturating_mul(d.into()))
            .saturating_add(Weight::from_parts(0, 3169).saturating_mul(r.into()))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:2 w:2)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_as_authority(o: u32, _n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `699 + o * (16 ±0)`
        //  Estimated: `8040`
        // Minimum execution time: 41_331 nanoseconds.
        Weight::from_parts(43_076_242, 8040)
            // Standard Error: 2_527
            .saturating_add(Weight::from_parts(36_461, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:2 w:2)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_after_dispute(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `922 + o * (16 ±0)`
        //  Estimated: `8040`
        // Minimum execution time: 88_921 nanoseconds.
        Weight::from_parts(91_328_810, 8040)
            // Standard Error: 3_108
            .saturating_add(Weight::from_parts(24_632, 0).saturating_mul(o.into()))
            // Standard Error: 3_108
            .saturating_add(Weight::from_parts(2_344, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:2 w:2)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_as_market_creator(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760 + o * (16 ±0)`
        //  Estimated: `8040`
        // Minimum execution time: 64_121 nanoseconds.
        Weight::from_parts(64_952_653, 8040)
            // Standard Error: 2_769
            .saturating_add(Weight::from_parts(50_603, 0).saturating_mul(o.into()))
            // Standard Error: 2_769
            .saturating_add(Weight::from_parts(19_632, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:2 w:2)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn dispute_early_close(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `844 + n * (16 ±0) + o * (16 ±0)`
        //  Estimated: `8040`
        // Minimum execution time: 60_892 nanoseconds.
        Weight::from_parts(62_339_997, 8040)
            // Standard Error: 2_789
            .saturating_add(Weight::from_parts(34_659, 0).saturating_mul(o.into()))
            // Standard Error: 2_789
            .saturating_add(Weight::from_parts(21_330, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:2 w:2)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn reject_early_close_after_authority(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `734 + n * (16 ±0) + o * (16 ±0)`
        //  Estimated: `8040`
        // Minimum execution time: 45_731 nanoseconds.
        Weight::from_parts(47_186_887, 8040)
            // Standard Error: 1_785
            .saturating_add(Weight::from_parts(17_033, 0).saturating_mul(o.into()))
            // Standard Error: 1_785
            .saturating_add(Weight::from_parts(17_692, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    fn reject_early_close_after_dispute() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `656`
        //  Estimated: `4714`
        // Minimum execution time: 66_901 nanoseconds.
        Weight::from_parts(68_771_000, 4714)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// The range of component `c` is `[0, 63]`.
    fn close_trusted_market(c: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `661 + c * (16 ±0)`
        //  Estimated: `4515`
        // Minimum execution time: 36_730 nanoseconds.
        Weight::from_parts(38_396_464, 4515)
            // Standard Error: 1_844
            .saturating_add(Weight::from_parts(25_746, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::MarketCounter` (r:1 w:1)
    /// Proof: `MarketCommons::MarketCounter` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:128 w:128)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:64 w:64)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(43), added: 2518, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(144746), added: 147221, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:0 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// The range of component `m` is `[0, 63]`.
    /// The range of component `n` is `[2, 64]`.
    fn create_market_and_deploy_pool(_m: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `378 + m * (16 ±0)`
        //  Estimated: `148211 + n * (5196 ±0)`
        // Minimum execution time: 276_356 nanoseconds.
        Weight::from_parts(239_872_618, 148211)
            // Standard Error: 165_406
            .saturating_add(Weight::from_parts(47_247_235, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 5196).saturating_mul(n.into()))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:1)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(694), added: 3169, mode: `MaxEncodedLen`)
    /// Storage: `Timestamp::Now` (r:1 w:0)
    /// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerCloseTimeFrame` (`max_values`: None, `max_size`: Some(1050), added: 3525, mode: `MaxEncodedLen`)
    /// The range of component `o` is `[1, 63]`.
    fn manually_close_market(o: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `646 + o * (16 ±0)`
        //  Estimated: `4515`
        // Minimum execution time: 35_641 nanoseconds.
        Weight::from_parts(37_500_911, 4515)
            // Standard Error: 2_029
            .saturating_add(Weight::from_parts(19_473, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
