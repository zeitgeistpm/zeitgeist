// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_prediction_markets
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-04-03`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=zrml_prediction_markets
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/prediction-markets/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_prediction_markets (automatically generated)
pub trait WeightInfoZeitgeist {
    fn admin_move_market_to_closed(c: u32) -> Weight;
    fn admin_move_market_to_resolved_scalar_reported(r: u32) -> Weight;
    fn admin_move_market_to_resolved_categorical_reported(r: u32) -> Weight;
    fn admin_move_market_to_resolved_scalar_disputed(r: u32) -> Weight;
    fn admin_move_market_to_resolved_categorical_disputed(r: u32) -> Weight;
    fn approve_market() -> Weight;
    fn request_edit(r: u32) -> Weight;
    fn buy_complete_set(a: u32) -> Weight;
    fn create_market(m: u32) -> Weight;
    fn edit_market(m: u32) -> Weight;
    fn start_global_dispute(m: u32, n: u32) -> Weight;
    fn dispute_authorized() -> Weight;
    fn handle_expired_advised_market() -> Weight;
    fn internal_resolve_categorical_reported() -> Weight;
    fn internal_resolve_categorical_disputed() -> Weight;
    fn internal_resolve_scalar_reported() -> Weight;
    fn internal_resolve_scalar_disputed() -> Weight;
    fn on_initialize_resolve_overhead() -> Weight;
    fn redeem_shares_categorical() -> Weight;
    fn redeem_shares_scalar() -> Weight;
    fn reject_market(c: u32, r: u32) -> Weight;
    fn report_market_with_dispute_mechanism(m: u32) -> Weight;
    fn report_trusted_market() -> Weight;
    fn sell_complete_set(a: u32) -> Weight;
    fn market_status_manager(b: u32, f: u32) -> Weight;
    fn market_resolution_manager(r: u32, d: u32) -> Weight;
    fn schedule_early_close_as_authority(o: u32, n: u32) -> Weight;
    fn schedule_early_close_after_dispute(o: u32, n: u32) -> Weight;
    fn schedule_early_close_as_market_creator(o: u32, n: u32) -> Weight;
    fn dispute_early_close(o: u32, n: u32) -> Weight;
    fn reject_early_close_after_authority(o: u32, n: u32) -> Weight;
    fn reject_early_close_after_dispute() -> Weight;
    fn close_trusted_market(c: u32) -> Weight;
    fn create_market_and_deploy_pool(m: u32, n: u32) -> Weight;
    fn manually_close_market(o: u32) -> Weight;
}

/// Weight functions for zrml_prediction_markets (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// The range of component `c` is `[0, 63]`.
    fn admin_move_market_to_closed(c: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `710 + c * (16 ±0)`
        //  Estimated: `7179`
        // Minimum execution time: 47_250 nanoseconds.
        Weight::from_parts(63_849_475, 7179)
            // Standard Error: 9_012
            .saturating_add(Weight::from_parts(10_759, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_scalar_reported(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `756 + r * (16 ±0)`
        //  Estimated: `10392`
        // Minimum execution time: 83_631 nanoseconds.
        Weight::from_parts(111_750_174, 10392)
            // Standard Error: 16_010
            .saturating_add(Weight::from_parts(7_363, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:63 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:63 w:63)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_categorical_reported(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `17727 + r * (16 ±0)`
        //  Estimated: `419992`
        // Minimum execution time: 996_774 nanoseconds.
        Weight::from_parts(1_253_764_093, 419992)
            // Standard Error: 164_323
            .saturating_add(Weight::from_parts(604_611, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(131))
            .saturating_add(T::DbWeight::get().writes(67))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:2 w:2)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_scalar_disputed(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1315 + r * (16 ±0)`
        //  Estimated: `22118`
        // Minimum execution time: 139_421 nanoseconds.
        Weight::from_parts(190_036_224, 22118)
            // Standard Error: 19_184
            .saturating_add(Weight::from_parts(41_486, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(6))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:2 w:2)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:63 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:63 w:63)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_categorical_disputed(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `18271 + r * (16 ±0)`
        //  Estimated: `431718`
        // Minimum execution time: 1_052_053 nanoseconds.
        Weight::from_parts(1_313_394_041, 431718)
            // Standard Error: 188_704
            .saturating_add(Weight::from_parts(948_538, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(135))
            .saturating_add(T::DbWeight::get().writes(70))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:1 w:0)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:64)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn approve_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `656`
        //  Estimated: `183200`
        // Minimum execution time: 679_353 nanoseconds.
        Weight::from_parts(823_633_000, 183200)
            .saturating_add(T::DbWeight::get().reads(67))
            .saturating_add(T::DbWeight::get().writes(66))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 1024]`.
    fn request_edit(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `519`
        //  Estimated: `6676`
        // Minimum execution time: 27_010 nanoseconds.
        Weight::from_parts(36_741_877, 6676)
            // Standard Error: 165
            .saturating_add(Weight::from_parts(2_868, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:64)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: MarketAssets Account (r:64 w:64)
    /// Proof: MarketAssets Account (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 64]`.
    fn buy_complete_set(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `579 + a * (265 ±0)`
        //  Estimated: `5758 + a * (5292 ±0)`
        // Minimum execution time: 118_580 nanoseconds.
        Weight::from_parts(100_857_699, 5758)
            // Standard Error: 149_885
            .saturating_add(Weight::from_parts(26_242_412, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 5292).saturating_mul(a.into()))
    }
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketCounter (r:1 w:1)
    /// Proof: MarketCommons MarketCounter (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:64)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:0 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 63]`.
    fn create_market(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `316 + m * (16 ±0)`
        //  Estimated: `181063`
        // Minimum execution time: 576_702 nanoseconds.
        Weight::from_parts(777_228_969, 181063)
            .saturating_add(T::DbWeight::get().reads(68))
            .saturating_add(T::DbWeight::get().writes(68))
    }
    /// Storage: PredictionMarkets MarketIdsForEdit (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 63]`.
    fn edit_market(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `735 + m * (16 ±0)`
        //  Estimated: `10704`
        // Minimum execution time: 52_190 nanoseconds.
        Weight::from_parts(72_438_596, 10704)
            // Standard Error: 6_888
            .saturating_add(Weight::from_parts(33_164, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:1)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:0)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(96002), added: 96497, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:31 w:31)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes Outcomes (r:1 w:1)
    /// Proof: GlobalDisputes Outcomes (max_values: None, max_size: Some(395), added: 2870, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// The range of component `m` is `[1, 64]`.
    /// The range of component `n` is `[1, 64]`.
    fn start_global_dispute(m: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `9968 + m * (16 ±0)`
        //  Estimated: `353715`
        // Minimum execution time: 327_541 nanoseconds.
        Weight::from_parts(404_778_118, 353715)
            // Standard Error: 47_222
            .saturating_add(Weight::from_parts(110_944, 0).saturating_mul(m.into()))
            // Standard Error: 47_222
            .saturating_add(Weight::from_parts(219_329, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(40))
            .saturating_add(T::DbWeight::get().writes(36))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn dispute_authorized() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `626`
        //  Estimated: `6875`
        // Minimum execution time: 59_450 nanoseconds.
        Weight::from_parts(60_560_000, 6875)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:0 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    fn handle_expired_advised_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `539`
        //  Estimated: `6875`
        // Minimum execution time: 77_200 nanoseconds.
        Weight::from_parts(78_441_000, 6875)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:63 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:63 w:63)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    fn internal_resolve_categorical_reported() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `17597`
        //  Estimated: `416475`
        // Minimum execution time: 1_134_744 nanoseconds.
        Weight::from_parts(1_181_404_000, 416475)
            .saturating_add(T::DbWeight::get().reads(130))
            .saturating_add(T::DbWeight::get().writes(66))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:63 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:63 w:63)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    fn internal_resolve_categorical_disputed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `17885`
        //  Estimated: `421870`
        // Minimum execution time: 1_201_865 nanoseconds.
        Weight::from_parts(1_235_994_000, 421870)
            .saturating_add(T::DbWeight::get().reads(132))
            .saturating_add(T::DbWeight::get().writes(67))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn internal_resolve_scalar_reported() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `626`
        //  Estimated: `6875`
        // Minimum execution time: 72_421 nanoseconds.
        Weight::from_parts(82_500_000, 6875)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    fn internal_resolve_scalar_disputed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `929`
        //  Estimated: `12270`
        // Minimum execution time: 142_191 nanoseconds.
        Weight::from_parts(144_871_000, 12270)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets LastTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets LastTimeFrame (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseBlock (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    fn on_initialize_resolve_overhead() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79`
        //  Estimated: `15090`
        // Minimum execution time: 33_970 nanoseconds.
        Weight::from_parts(34_581_000, 15090)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:1 w:1)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: MarketAssets Account (r:1 w:1)
    /// Proof: MarketAssets Account (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    fn redeem_shares_categorical() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3894`
        //  Estimated: `94434`
        // Minimum execution time: 185_791 nanoseconds.
        Weight::from_parts(214_441_000, 94434)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:2 w:2)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: MarketAssets Account (r:2 w:2)
    /// Proof: MarketAssets Account (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:2 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    fn redeem_shares_scalar() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1734`
        //  Estimated: `102244`
        // Minimum execution time: 245_571 nanoseconds.
        Weight::from_parts(250_341_000, 102244)
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(6))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:0 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `c` is `[0, 63]`.
    /// The range of component `r` is `[0, 1024]`.
    fn reject_market(_c: u32, r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `643 + c * (16 ±0)`
        //  Estimated: `10400`
        // Minimum execution time: 88_151 nanoseconds.
        Weight::from_parts(118_972_881, 10400)
            // Standard Error: 602
            .saturating_add(Weight::from_parts(1_996, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 63]`.
    fn report_market_with_dispute_mechanism(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `716`
        //  Estimated: `7171`
        // Minimum execution time: 44_540 nanoseconds.
        Weight::from_parts(60_937_854, 7171)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: AssetRouter DestroyAssets (r:1 w:1)
    /// Proof: AssetRouter DestroyAssets (max_values: Some(1), max_size: Some(40962), added: 41457, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:2 w:0)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:2 w:2)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: AssetRouter IndestructibleAssets (r:1 w:0)
    /// Proof: AssetRouter IndestructibleAssets (max_values: Some(1), max_size: Some(38914), added: 39409, mode: MaxEncodedLen)
    fn report_trusted_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1353`
        //  Estimated: `98177`
        // Minimum execution time: 146_371 nanoseconds.
        Weight::from_parts(181_000_000, 98177)
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:64)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: MarketAssets Account (r:64 w:64)
    /// Proof: MarketAssets Account (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 64]`.
    fn sell_complete_set(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `740 + a * (373 ±0)`
        //  Estimated: `5758 + a * (5292 ±0)`
        // Minimum execution time: 133_330 nanoseconds.
        Weight::from_parts(100_646_347, 5758)
            // Standard Error: 167_067
            .saturating_add(Weight::from_parts(43_468_521, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 5292).saturating_mul(a.into()))
    }
    /// Storage: PredictionMarkets MarketIdsPerCloseBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseBlock (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:62 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `b` is `[1, 31]`.
    /// The range of component `f` is `[1, 31]`.
    fn market_status_manager(b: u32, f: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2539 + b * (329 ±0) + f * (331 ±0)`
        //  Estimated: `7050 + b * (3151 ±0) + f * (3151 ±0)`
        // Minimum execution time: 210_711 nanoseconds.
        Weight::from_parts(102_221_855, 7050)
            // Standard Error: 79_794
            .saturating_add(Weight::from_parts(5_103_531, 0).saturating_mul(b.into()))
            // Standard Error: 79_794
            .saturating_add(Weight::from_parts(5_234_515, 0).saturating_mul(f.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(f.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 3151).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 3151).saturating_mul(f.into()))
    }
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:62 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 31]`.
    /// The range of component `d` is `[1, 31]`.
    fn market_resolution_manager(r: u32, d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2483 + r * (329 ±0) + d * (331 ±0)`
        //  Estimated: `7034 + r * (3151 ±0) + d * (3151 ±0)`
        // Minimum execution time: 209_690 nanoseconds.
        Weight::from_parts(102_910_714, 7034)
            // Standard Error: 72_408
            .saturating_add(Weight::from_parts(4_899_994, 0).saturating_mul(r.into()))
            // Standard Error: 72_408
            .saturating_add(Weight::from_parts(5_244_218, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 3151).saturating_mul(r.into()))
            .saturating_add(Weight::from_parts(0, 3151).saturating_mul(d.into()))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_as_authority(_o: u32, _n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `747 + o * (16 ±0)`
        //  Estimated: `10704`
        // Minimum execution time: 55_601 nanoseconds.
        Weight::from_parts(76_590_619, 10704)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_after_dispute(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `970 + o * (16 ±0)`
        //  Estimated: `14428`
        // Minimum execution time: 98_981 nanoseconds.
        Weight::from_parts(126_721_146, 14428)
            // Standard Error: 13_607
            .saturating_add(Weight::from_parts(30_521, 0).saturating_mul(o.into()))
            // Standard Error: 13_607
            .saturating_add(Weight::from_parts(28_877, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_as_market_creator(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `808 + o * (16 ±0)`
        //  Estimated: `14428`
        // Minimum execution time: 77_570 nanoseconds.
        Weight::from_parts(100_832_075, 14428)
            // Standard Error: 12_194
            .saturating_add(Weight::from_parts(44_636, 0).saturating_mul(o.into()))
            // Standard Error: 12_194
            .saturating_add(Weight::from_parts(33_153, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn dispute_early_close(_o: u32, _n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `924 + o * (16 ±0) + n * (16 ±0)`
        //  Estimated: `14428`
        // Minimum execution time: 73_970 nanoseconds.
        Weight::from_parts(98_470_964, 14428)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn reject_early_close_after_authority(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `814 + o * (16 ±0) + n * (16 ±0)`
        //  Estimated: `10704`
        // Minimum execution time: 57_970 nanoseconds.
        Weight::from_parts(74_720_000, 10704)
            // Standard Error: 8_681
            .saturating_add(Weight::from_parts(14_141, 0).saturating_mul(o.into()))
            // Standard Error: 8_681
            .saturating_add(Weight::from_parts(36_011, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn reject_early_close_after_dispute() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `672`
        //  Estimated: `6875`
        // Minimum execution time: 78_830 nanoseconds.
        Weight::from_parts(98_340_000, 6875)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// The range of component `c` is `[0, 63]`.
    fn close_trusted_market(c: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `709 + c * (16 ±0)`
        //  Estimated: `7179`
        // Minimum execution time: 47_820 nanoseconds.
        Weight::from_parts(64_357_268, 7179)
            // Standard Error: 9_534
            .saturating_add(Weight::from_parts(26_319, 0).saturating_mul(c.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketCounter (r:1 w:1)
    /// Proof: MarketCommons MarketCounter (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:64)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: MarketAssets Account (r:128 w:128)
    /// Proof: MarketAssets Account (max_values: None, max_size: Some(117), added: 2592, mode: MaxEncodedLen)
    /// Storage: NeoSwaps Pools (r:1 w:1)
    /// Proof: NeoSwaps Pools (max_values: None, max_size: Some(144745), added: 147220, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:0 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 63]`.
    /// The range of component `n` is `[2, 64]`.
    fn create_market_and_deploy_pool(m: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `371 + m * (16 ±0)`
        //  Estimated: `160697 + n * (7884 ±0)`
        // Minimum execution time: 338_041 nanoseconds.
        Weight::from_parts(197_998_117, 160697)
            // Standard Error: 318_827
            .saturating_add(Weight::from_parts(276_212, 0).saturating_mul(m.into()))
            // Standard Error: 323_603
            .saturating_add(Weight::from_parts(78_585_831, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 7884).saturating_mul(n.into()))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(676), added: 3151, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[1, 63]`.
    fn manually_close_market(o: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `694 + o * (16 ±0)`
        //  Estimated: `7179`
        // Minimum execution time: 45_920 nanoseconds.
        Weight::from_parts(59_505_796, 7179)
            // Standard Error: 8_380
            .saturating_add(Weight::from_parts(91_386, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
