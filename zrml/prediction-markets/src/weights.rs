// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_prediction_markets
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-02-15`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zafoi`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: `Some(Native)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=0
// --pallet=zrml_prediction_markets
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/prediction-markets/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_prediction_markets (automatically generated)
pub trait WeightInfoZeitgeist {
    fn admin_move_market_to_closed(c: u32) -> Weight;
    fn admin_move_market_to_resolved_scalar_reported(r: u32) -> Weight;
    fn admin_move_market_to_resolved_categorical_reported(r: u32) -> Weight;
    fn admin_move_market_to_resolved_scalar_disputed(r: u32) -> Weight;
    fn admin_move_market_to_resolved_categorical_disputed(r: u32) -> Weight;
    fn approve_market() -> Weight;
    fn request_edit(r: u32) -> Weight;
    fn buy_complete_set(a: u32) -> Weight;
    fn create_market(m: u32) -> Weight;
    fn edit_market(m: u32) -> Weight;
    fn start_global_dispute(m: u32, n: u32) -> Weight;
    fn dispute_authorized() -> Weight;
    fn handle_expired_advised_market() -> Weight;
    fn internal_resolve_categorical_reported() -> Weight;
    fn internal_resolve_categorical_disputed() -> Weight;
    fn internal_resolve_scalar_reported() -> Weight;
    fn internal_resolve_scalar_disputed() -> Weight;
    fn on_initialize_resolve_overhead() -> Weight;
    fn redeem_shares_categorical() -> Weight;
    fn redeem_shares_scalar() -> Weight;
    fn reject_market(c: u32, r: u32) -> Weight;
    fn report_market_with_dispute_mechanism(m: u32) -> Weight;
    fn report_trusted_market() -> Weight;
    fn sell_complete_set(a: u32) -> Weight;
    fn market_status_manager(b: u32, f: u32) -> Weight;
    fn market_resolution_manager(r: u32, d: u32) -> Weight;
    fn schedule_early_close_as_authority(o: u32, n: u32) -> Weight;
    fn schedule_early_close_after_dispute(o: u32, n: u32) -> Weight;
    fn schedule_early_close_as_market_creator(o: u32, n: u32) -> Weight;
    fn dispute_early_close(o: u32, n: u32) -> Weight;
    fn reject_early_close_after_authority(o: u32, n: u32) -> Weight;
    fn reject_early_close_after_dispute() -> Weight;
    fn close_trusted_market(c: u32) -> Weight;
    fn create_market_and_deploy_pool(m: u32, n: u32) -> Weight;
    fn manually_close_market(o: u32) -> Weight;
}

/// Weight functions for zrml_prediction_markets (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// The range of component `c` is `[0, 63]`.
    fn admin_move_market_to_closed(_c: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `675 + c * (16 ±0)`
        //  Estimated: `7181`
        // Minimum execution time: 20_831 nanoseconds.
        Weight::from_parts(21_250_000, 7181)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_scalar_reported(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `721 + r * (16 ±0)`
        //  Estimated: `10394`
        // Minimum execution time: 32_171 nanoseconds.
        Weight::from_parts(32_361_000, 10394)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_categorical_reported(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `677 + r * (16 ±0)`
        //  Estimated: `10394`
        // Minimum execution time: 31_781 nanoseconds.
        Weight::from_parts(32_291_000, 10394)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:2 w:2)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_scalar_disputed(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1280 + r * (16 ±0)`
        //  Estimated: `22120`
        // Minimum execution time: 52_502 nanoseconds.
        Weight::from_parts(53_751_000, 22120)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(6))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:2 w:2)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 63]`.
    fn admin_move_market_to_resolved_categorical_disputed(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1221 + r * (16 ±0)`
        //  Estimated: `22120`
        // Minimum execution time: 52_571 nanoseconds.
        Weight::from_parts(52_712_000, 22120)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(6))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:1 w:0)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn approve_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `580`
        //  Estimated: `10402`
        // Minimum execution time: 21_791 nanoseconds.
        Weight::from_parts(21_791_000, 10402)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 1024]`.
    fn request_edit(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `519`
        //  Estimated: `6678`
        // Minimum execution time: 12_401 nanoseconds.
        Weight::from_parts(12_451_000, 6678)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:0)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:64 w:64)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 64]`.
    fn buy_complete_set(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `663`
        //  Estimated: `505984`
        // Minimum execution time: 39_091 nanoseconds.
        Weight::from_parts(438_991_000, 505984)
            .saturating_add(T::DbWeight::get().reads(194))
            .saturating_add(T::DbWeight::get().writes(129))
    }
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketCounter (r:1 w:1)
    /// Proof: MarketCommons MarketCounter (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:0 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 63]`.
    fn create_market(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `155 + m * (17 ±0)`
        //  Estimated: `8263`
        // Minimum execution time: 23_641 nanoseconds.
        Weight::from_parts(24_920_000, 8263)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: PredictionMarkets MarketIdsForEdit (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 63]`.
    fn edit_market(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `700 + m * (16 ±0)`
        //  Estimated: `10706`
        // Minimum execution time: 23_060 nanoseconds.
        Weight::from_parts(23_201_000, 10706)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:1)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:0)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:31 w:31)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes Outcomes (r:1 w:1)
    /// Proof: GlobalDisputes Outcomes (max_values: None, max_size: Some(395), added: 2870, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// The range of component `m` is `[1, 64]`.
    /// The range of component `n` is `[1, 64]`.
    fn start_global_dispute(m: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `9188 + m * (16 ±0)`
        //  Estimated: `329717`
        // Minimum execution time: 139_494 nanoseconds.
        Weight::from_parts(138_828_007, 329717)
            // Standard Error: 24_729
            .saturating_add(Weight::from_parts(26_500, 0).saturating_mul(m.into()))
            // Standard Error: 24_729
            .saturating_add(Weight::from_parts(9_992, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(40))
            .saturating_add(T::DbWeight::get().writes(36))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn dispute_authorized() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `626`
        //  Estimated: `6877`
        // Minimum execution time: 26_070 nanoseconds.
        Weight::from_parts(26_070_000, 6877)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:0 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    fn handle_expired_advised_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `539`
        //  Estimated: `6877`
        // Minimum execution time: 21_700 nanoseconds.
        Weight::from_parts(21_700_000, 6877)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn internal_resolve_categorical_reported() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `582`
        //  Estimated: `6877`
        // Minimum execution time: 22_630 nanoseconds.
        Weight::from_parts(22_630_000, 6877)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    fn internal_resolve_categorical_disputed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `870`
        //  Estimated: `12272`
        // Minimum execution time: 36_260 nanoseconds.
        Weight::from_parts(36_260_000, 12272)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn internal_resolve_scalar_reported() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `626`
        //  Estimated: `6877`
        // Minimum execution time: 21_470 nanoseconds.
        Weight::from_parts(21_470_000, 6877)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: GlobalDisputes GlobalDisputesInfo (r:1 w:0)
    /// Proof: GlobalDisputes GlobalDisputesInfo (max_values: None, max_size: Some(396), added: 2871, mode: MaxEncodedLen)
    /// Storage: Authorized AuthorizedOutcomeReports (r:1 w:1)
    /// Proof: Authorized AuthorizedOutcomeReports (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
    fn internal_resolve_scalar_disputed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `929`
        //  Estimated: `12272`
        // Minimum execution time: 37_031 nanoseconds.
        Weight::from_parts(37_031_000, 12272)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets LastTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets LastTimeFrame (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseBlock (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    fn on_initialize_resolve_overhead() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `79`
        //  Estimated: `15090`
        // Minimum execution time: 11_000 nanoseconds.
        Weight::from_parts(11_000_000, 15090)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:1 w:0)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:1 w:1)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn redeem_shares_categorical() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2171`
        //  Estimated: `13576`
        // Minimum execution time: 41_521 nanoseconds.
        Weight::from_parts(41_521_000, 13576)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:2 w:0)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:2 w:2)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:2 w:2)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn redeem_shares_scalar() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1318`
        //  Estimated: `21392`
        // Minimum execution time: 48_761 nanoseconds.
        Weight::from_parts(48_761_000, 21392)
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsForEdit (r:0 w:1)
    /// Proof: PredictionMarkets MarketIdsForEdit (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `c` is `[0, 63]`.
    /// The range of component `r` is `[0, 1024]`.
    fn reject_market(_c: u32, r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `608 + c * (16 ±0)`
        //  Estimated: `10402`
        // Minimum execution time: 33_841 nanoseconds.
        Weight::from_parts(34_426_000, 10402)
            // Standard Error: 109
            .saturating_add(Weight::from_parts(688, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 63]`.
    fn report_market_with_dispute_mechanism(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `647 + m * (1 ±0)`
        //  Estimated: `7173`
        // Minimum execution time: 19_451 nanoseconds.
        Weight::from_parts(19_650_000, 7173)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn report_trusted_market() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `538`
        //  Estimated: `6877`
        // Minimum execution time: 29_751 nanoseconds.
        Weight::from_parts(29_751_000, 6877)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:0)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:64 w:64)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 64]`.
    fn sell_complete_set(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `895 + a * (161 ±0)`
        //  Estimated: `505984`
        // Minimum execution time: 47_271 nanoseconds.
        Weight::from_parts(674_006_000, 505984)
            .saturating_add(T::DbWeight::get().reads(194))
            .saturating_add(T::DbWeight::get().writes(129))
    }
    /// Storage: PredictionMarkets MarketIdsPerCloseBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseBlock (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:62 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `b` is `[1, 31]`.
    /// The range of component `f` is `[1, 31]`.
    fn market_status_manager(b: u32, f: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2416 + b * (330 ±0) + f * (334 ±0)`
        //  Estimated: `7050 + b * (3153 ±0) + f * (3153 ±0)`
        // Minimum execution time: 78_562 nanoseconds.
        Weight::from_parts(26_970_933, 7050)
            // Standard Error: 41_857
            .saturating_add(Weight::from_parts(1_623_200, 0).saturating_mul(b.into()))
            // Standard Error: 41_857
            .saturating_add(Weight::from_parts(1_611_866, 0).saturating_mul(f.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(b.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(f.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 3153).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 3153).saturating_mul(f.into()))
    }
    /// Storage: PredictionMarkets MarketIdsPerReportBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerReportBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:62 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 31]`.
    /// The range of component `d` is `[1, 31]`.
    fn market_resolution_manager(r: u32, d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2360 + r * (330 ±0) + d * (334 ±0)`
        //  Estimated: `7034 + r * (3153 ±0) + d * (3153 ±0)`
        // Minimum execution time: 76_262 nanoseconds.
        Weight::from_parts(26_386_933, 7034)
            // Standard Error: 22_805
            .saturating_add(Weight::from_parts(1_558_200, 0).saturating_mul(r.into()))
            // Standard Error: 22_805
            .saturating_add(Weight::from_parts(1_570_866, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 3153).saturating_mul(r.into()))
            .saturating_add(Weight::from_parts(0, 3153).saturating_mul(d.into()))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_as_authority(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `675 + o * (16 ±0)`
        //  Estimated: `10706`
        // Minimum execution time: 21_971 nanoseconds.
        Weight::from_parts(21_711_000, 10706)
            // Standard Error: 3_024
            .saturating_add(Weight::from_parts(4_126, 0).saturating_mul(o.into()))
            // Standard Error: 3_024
            .saturating_add(Weight::from_parts(16_984, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_after_dispute(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `901 + o * (16 ±0)`
        //  Estimated: `14430`
        // Minimum execution time: 38_301 nanoseconds.
        Weight::from_parts(30_845_500, 14430)
            // Standard Error: 139_265
            .saturating_add(Weight::from_parts(130_404, 0).saturating_mul(o.into()))
            // Standard Error: 139_265
            .saturating_add(Weight::from_parts(118_341, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn schedule_early_close_as_market_creator(o: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `736 + o * (16 ±0)`
        //  Estimated: `14430`
        // Minimum execution time: 30_801 nanoseconds.
        Weight::from_parts(30_206_500, 14430)
            // Standard Error: 1_800
            .saturating_add(Weight::from_parts(9_436, 0).saturating_mul(o.into()))
            // Standard Error: 1_800
            .saturating_add(Weight::from_parts(11_658, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn dispute_early_close(o: u32, _n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `852 + o * (16 ±0) + n * (16 ±0)`
        //  Estimated: `14430`
        // Minimum execution time: 29_971 nanoseconds.
        Weight::from_parts(31_721_000, 14430)
            // Standard Error: 2_474
            .saturating_add(Weight::from_parts(14_126, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[0, 63]`.
    /// The range of component `n` is `[0, 63]`.
    fn reject_early_close_after_authority(o: u32, _n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `742 + o * (16 ±0) + n * (16 ±0)`
        //  Estimated: `10706`
        // Minimum execution time: 24_391 nanoseconds.
        Weight::from_parts(24_525_500, 10706)
            // Standard Error: 948
            .saturating_add(Weight::from_parts(8_642, 0).saturating_mul(o.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    fn reject_early_close_after_dispute() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `672`
        //  Estimated: `6877`
        // Minimum execution time: 26_471 nanoseconds.
        Weight::from_parts(26_471_000, 6877)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// The range of component `c` is `[0, 63]`.
    fn close_trusted_market(_c: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `674 + c * (16 ±0)`
        //  Estimated: `7181`
        // Minimum execution time: 21_180 nanoseconds.
        Weight::from_parts(21_531_000, 7181)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketCounter (r:1 w:1)
    /// Proof: MarketCommons MarketCounter (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: MarketAssets Asset (r:64 w:0)
    /// Proof: MarketAssets Asset (max_values: None, max_size: Some(225), added: 2700, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:128 w:128)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: NeoSwaps Pools (r:1 w:1)
    /// Proof: NeoSwaps Pools (max_values: None, max_size: Some(144745), added: 147220, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:0 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// The range of component `m` is `[0, 63]`.
    /// The range of component `n` is `[2, 64]`.
    fn create_market_and_deploy_pool(_m: u32, n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `395 + m * (17 ±0)`
        //  Estimated: `160697 + n * (10414 ±0)`
        // Minimum execution time: 91_033 nanoseconds.
        Weight::from_parts(78_894_548, 160697)
            // Standard Error: 71_935
            .saturating_add(Weight::from_parts(14_756_725, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 10414).saturating_mul(n.into()))
    }
    /// Storage: MarketCommons Markets (r:1 w:1)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerCloseTimeFrame (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerCloseTimeFrame (max_values: None, max_size: Some(1050), added: 3525, mode: MaxEncodedLen)
    /// The range of component `o` is `[1, 63]`.
    fn manually_close_market(_o: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `658 + o * (16 ±0)`
        //  Estimated: `7181`
        // Minimum execution time: 20_381 nanoseconds.
        Weight::from_parts(20_441_000, 7181)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
