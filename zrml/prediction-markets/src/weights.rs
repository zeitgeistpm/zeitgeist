//! Autogenerated weights for zrml_prediction_markets
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-08-20, STEPS: `[10, ]`, REPEAT: 2000, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/zeitgeist
// benchmark
// --chain
// dev
// --execution
// wasm
// --extrinsic
// *
// --output
// ./zrml/prediction-markets/src/weights.rs
// --pallet
// zrml-prediction-markets
// --repeat
// 2000
// --steps
// 10
// --template
// ./misc/weight_template.hbs
// --wasm-execution
// compiled

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_prediction_markets (automatically generated)
pub trait WeightInfoZeitgeist {
    fn admin_destroy_disputed_market(a: u32, b: u32, c: u32) -> Weight;
    fn admin_destroy_reported_market(a: u32, b: u32, c: u32) -> Weight;
    fn admin_move_market_to_closed() -> Weight;
    fn admin_move_market_to_resolved_overhead() -> Weight;
    fn approve_market() -> Weight;
    fn buy_complete_set(a: u32) -> Weight;
    fn cancel_pending_market() -> Weight;
    fn create_categorical_market() -> Weight;
    fn create_scalar_market() -> Weight;
    fn deploy_swap_pool_for_market(a: u32) -> Weight;
    fn dispute(a: u32) -> Weight;
    fn internal_resolve_categorical_reported(a: u32, b: u32, c: u32) -> Weight;
    fn internal_resolve_categorical_disputed(a: u32, _b: u32, c: u32, d: u32) -> Weight;
    fn internal_resolve_scalar_reported() -> Weight;
    fn internal_resolve_scalar_disputed(d: u32) -> Weight;
    fn on_initialize_resolve_overhead() -> Weight;
    fn redeem_shares_categorical() -> Weight;
    fn redeem_shares_scalar() -> Weight;
    fn reject_market() -> Weight;
    fn report() -> Weight;
    fn sell_complete_set(a: u32) -> Weight;
}

/// Weight functions for zrml_prediction_markets (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    fn admin_destroy_disputed_market(a: u32, b: u32, c: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 13_000
            .saturating_add((70_975_000 as Weight).saturating_mul(a as Weight))
            // Standard Error: 13_000
            .saturating_add((5_017_000 as Weight).saturating_mul(b as Weight))
            // Standard Error: 17_000
            .saturating_add((69_232_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
    }
    fn admin_destroy_reported_market(a: u32, b: u32, c: u32) -> Weight {
        (0 as Weight)
            // Standard Error: 16_000
            .saturating_add((71_179_000 as Weight).saturating_mul(a as Weight))
            // Standard Error: 16_000
            .saturating_add((5_277_000 as Weight).saturating_mul(b as Weight))
            // Standard Error: 22_000
            .saturating_add((71_087_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
    }
    fn admin_move_market_to_closed() -> Weight {
        (16_451_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn admin_move_market_to_resolved_overhead() -> Weight {
        (106_002_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(6 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn approve_market() -> Weight {
        (51_037_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn buy_complete_set(a: u32) -> Weight {
        (88_866_000 as Weight)
            // Standard Error: 11_000
            .saturating_add((30_578_000 as Weight).saturating_mul(a as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
            .saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
    }
    fn cancel_pending_market() -> Weight {
        (50_566_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn create_categorical_market() -> Weight {
        (54_032_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn create_scalar_market() -> Weight {
        (53_983_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn deploy_swap_pool_for_market(a: u32) -> Weight {
        (156_886_000 as Weight)
            // Standard Error: 11_000
            .saturating_add((64_102_000 as Weight).saturating_mul(a as Weight))
            .saturating_add(T::DbWeight::get().reads(6 as Weight))
            .saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes(6 as Weight))
            .saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
    }
    fn dispute(a: u32) -> Weight {
        (5_205_000 as Weight)
            // Standard Error: 0
            .saturating_add((4_000 as Weight).saturating_mul(a as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
    }
    fn internal_resolve_categorical_reported(a: u32, b: u32, c: u32) -> Weight {
        (61_186_000 as Weight)
            // Standard Error: 0
            .saturating_add((316_000 as Weight).saturating_mul(a as Weight))
            // Standard Error: 0
            .saturating_add((14_000 as Weight).saturating_mul(b as Weight))
            // Standard Error: 1_000
            .saturating_add((20_000 as Weight).saturating_mul(c as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn internal_resolve_categorical_disputed(a: u32, _b: u32, c: u32, d: u32) -> Weight {
        (64_758_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((88_000 as Weight).saturating_mul(a as Weight))
            // Standard Error: 2_000
            .saturating_add((25_000 as Weight).saturating_mul(c as Weight))
            // Standard Error: 3_000
            .saturating_add((27_000 as Weight).saturating_mul(d as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn internal_resolve_scalar_reported() -> Weight {
        (63_200_000 as Weight).saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn internal_resolve_scalar_disputed(d: u32) -> Weight {
        (63_342_000 as Weight)
            // Standard Error: 1_000
            .saturating_add((23_000 as Weight).saturating_mul(d as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn on_initialize_resolve_overhead() -> Weight {
        (8_546_000 as Weight).saturating_add(T::DbWeight::get().reads(2 as Weight))
    }
    fn redeem_shares_categorical() -> Weight {
        (98_067_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    fn redeem_shares_scalar() -> Weight {
        (129_776_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(6 as Weight))
            .saturating_add(T::DbWeight::get().writes(5 as Weight))
    }
    fn reject_market() -> Weight {
        (45_997_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    fn report() -> Weight {
        (32_512_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    fn sell_complete_set(a: u32) -> Weight {
        (71_213_000 as Weight)
            // Standard Error: 6_000
            .saturating_add((30_185_000 as Weight).saturating_mul(a as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
            .saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
    }
}
