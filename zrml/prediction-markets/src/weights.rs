
//! Autogenerated weights for zrml_prediction_markets
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-06-17, STEPS: `[10, ]`, REPEAT: 1000, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("local"), DB CACHE: 128

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// --chain
// local
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// zrml-prediction-markets
// --extrinsic
// *
// --steps
// 10
// --repeat
// 1000
// --template
// ./misc/weight_template.hbs
// --output
// ./zrml/prediction-markets/src/weights.rs


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

///  Trait containing the required functions for weight retrival within
/// zrml_prediction_markets (automatically generated)
pub trait WeightInfoZeitgeist {
	fn admin_destroy_disputed_market(a: u32, b: u32, c: u32, ) -> Weight;
	fn admin_destroy_reported_market(a: u32, b: u32, c: u32, ) -> Weight;
	fn admin_move_market_to_closed() -> Weight;
	fn admin_move_market_to_resolved_overhead() -> Weight;
	fn approve_market() -> Weight;
	fn buy_complete_set(a: u32, ) -> Weight;
	fn cancel_pending_market() -> Weight;
	fn create_categorical_market() -> Weight;
	fn create_scalar_market() -> Weight;
	fn deploy_swap_pool_for_market(a: u32, ) -> Weight;
	fn dispute(a: u32, ) -> Weight;
	fn internal_resolve_categorical_reported(a: u32, b: u32, c: u32, ) -> Weight;
	fn internal_resolve_categorical_disputed(a: u32, b: u32, c: u32, d: u32, ) -> Weight;
	fn internal_resolve_scalar_reported() -> Weight;
	fn internal_resolve_scalar_disputed(d: u32, ) -> Weight;
	fn on_initialize_resolve_overhead() -> Weight;
	fn redeem_shares_categorical() -> Weight;
	fn redeem_shares_scalar() -> Weight;
	fn reject_market() -> Weight;
	fn report() -> Weight;
	fn sell_complete_set(a: u32, ) -> Weight;
}

/// Weight functions for zrml_prediction_markets (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
	fn admin_destroy_disputed_market(a: u32, b: u32, c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 83_000
			.saturating_add((98_994_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 83_000
			.saturating_add((8_432_000 as Weight).saturating_mul(b as Weight))
			// Standard Error: 109_000
			.saturating_add((100_626_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
	}
	fn admin_destroy_reported_market(a: u32, b: u32, c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 76_000
			.saturating_add((99_787_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 76_000
			.saturating_add((6_452_000 as Weight).saturating_mul(b as Weight))
			// Standard Error: 100_000
			.saturating_add((99_298_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
	}
	fn admin_move_market_to_closed() -> Weight {
		(26_001_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn admin_move_market_to_resolved_overhead() -> Weight {
		(133_201_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn approve_market() -> Weight {
		(75_800_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn buy_complete_set(a: u32, ) -> Weight {
		(138_779_000 as Weight)
			// Standard Error: 73_000
			.saturating_add((29_725_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
	}
	fn cancel_pending_market() -> Weight {
		(66_301_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn create_categorical_market() -> Weight {
		(72_800_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn create_scalar_market() -> Weight {
		(68_101_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn deploy_swap_pool_for_market(a: u32, ) -> Weight {
		(220_187_000 as Weight)
			// Standard Error: 154_000
			.saturating_add((83_843_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
	}
	fn dispute(a: u32, ) -> Weight {
		(98_412_000 as Weight)
			// Standard Error: 35_000
			.saturating_add((2_646_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn internal_resolve_categorical_reported(a: u32, b: u32, c: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 77_000
			.saturating_add((82_938_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 77_000
			.saturating_add((656_000 as Weight).saturating_mul(b as Weight))
			// Standard Error: 101_000
			.saturating_add((98_782_000 as Weight).saturating_mul(c as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
	}
	fn internal_resolve_categorical_disputed(a: u32, b: u32, c: u32, d: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 89_000
			.saturating_add((91_670_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 89_000
			.saturating_add((6_871_000 as Weight).saturating_mul(b as Weight))
			// Standard Error: 118_000
			.saturating_add((114_560_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 169_000
			.saturating_add((28_977_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes((3 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(d as Weight)))
	}
	fn internal_resolve_scalar_reported() -> Weight {
		(107_700_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn internal_resolve_scalar_disputed(d: u32, ) -> Weight {
		(125_017_000 as Weight)
			// Standard Error: 87_000
			.saturating_add((20_822_000 as Weight).saturating_mul(d as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn on_initialize_resolve_overhead() -> Weight {
		(12_001_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	fn redeem_shares_categorical() -> Weight {
		(148_901_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn redeem_shares_scalar() -> Weight {
		(193_701_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn reject_market() -> Weight {
		(60_500_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn report() -> Weight {
		(49_400_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn sell_complete_set(a: u32, ) -> Weight {
		(102_539_000 as Weight)
			// Standard Error: 69_000
			.saturating_add((42_222_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
	}
}
