// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_swaps
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-10-26`, STEPS: `10`, REPEAT: `1000`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=1000
// --pallet=zrml_swaps
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/swaps/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_swaps (automatically generated)
pub trait WeightInfoZeitgeist {
    fn admin_clean_up_pool_cpmm_categorical(a: u32) -> Weight;
    fn admin_clean_up_pool_cpmm_scalar() -> Weight;
    fn apply_to_cached_pools_execute_arbitrage(a: u32) -> Weight;
    fn apply_to_cached_pools_noop(a: u32) -> Weight;
    fn destroy_pool_in_subsidy_phase(a: u32) -> Weight;
    fn distribute_pool_share_rewards(a: u32, b: u32) -> Weight;
    fn end_subsidy_phase(a: u32, b: u32) -> Weight;
    fn execute_arbitrage_buy_burn(a: u32) -> Weight;
    fn execute_arbitrage_mint_sell(a: u32) -> Weight;
    fn execute_arbitrage_skipped(a: u32) -> Weight;
    fn pool_exit(a: u32) -> Weight;
    fn pool_exit_subsidy() -> Weight;
    fn pool_exit_with_exact_asset_amount() -> Weight;
    fn pool_exit_with_exact_pool_amount() -> Weight;
    fn pool_join(a: u32) -> Weight;
    fn pool_join_subsidy() -> Weight;
    fn pool_join_with_exact_asset_amount() -> Weight;
    fn pool_join_with_exact_pool_amount() -> Weight;
    fn clean_up_pool_categorical_without_reward_distribution(a: u32) -> Weight;
    fn swap_exact_amount_in_cpmm() -> Weight;
    fn swap_exact_amount_in_rikiddo(a: u32) -> Weight;
    fn swap_exact_amount_out_cpmm() -> Weight;
    fn swap_exact_amount_out_rikiddo(a: u32) -> Weight;
    fn open_pool(a: u32) -> Weight;
    fn close_pool(a: u32) -> Weight;
    fn destroy_pool(a: u32) -> Weight;
}

/// Weight functions for zrml_swaps (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// The range of component `a` is `[3, 65]`.
    fn admin_clean_up_pool_cpmm_categorical(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `697 + a * (54 ±0)`
        //  Estimated: `11802`
        // Minimum execution time: 42_711 nanoseconds.
        Weight::from_parts(48_961_657, 11802)
            // Standard Error: 3_690
            .saturating_add(Weight::from_parts(405_599, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn admin_clean_up_pool_cpmm_scalar() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `889`
        //  Estimated: `11802`
        // Minimum execution time: 38_860 nanoseconds.
        Weight::from_parts(44_610_000, 11802)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Swaps PoolsCachedForArbitrage (r:64 w:63)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:63 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4158 w:4158)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:63 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 63]`.
    fn apply_to_cached_pools_execute_arbitrage(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3289 + a * (11514 ±0)`
        //  Estimated: `163651 + a * (182700 ±0)`
        // Minimum execution time: 980 nanoseconds.
        Weight::from_parts(1_120_000, 163651)
            // Standard Error: 702_682
            .saturating_add(Weight::from_parts(2_532_422_802, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(43))
            .saturating_add(T::DbWeight::get().reads((70_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(42))
            .saturating_add(T::DbWeight::get().writes((67_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 182700).saturating_mul(a.into()))
    }
    /// Storage: Swaps PoolsCachedForArbitrage (r:64 w:63)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 63]`.
    fn apply_to_cached_pools_noop(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27 + a * (27 ±0)`
        //  Estimated: `2499 + a * (2499 ±0)`
        // Minimum execution time: 930 nanoseconds.
        Weight::from_parts(1_080_000, 2499)
            // Standard Error: 9_607
            .saturating_add(Weight::from_parts(9_241_406, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 2499).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Swaps SubsidyProviders (r:11 w:10)
    /// Proof: Swaps SubsidyProviders (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:10 w:10)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:1)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 10]`.
    fn destroy_pool_in_subsidy_phase(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `839 + a * (297 ±0)`
        //  Estimated: `11476 + a * (5153 ±0)`
        // Minimum execution time: 30_680 nanoseconds.
        Weight::from_parts(43_174_694, 11476)
            // Standard Error: 60_923
            .saturating_add(Weight::from_parts(21_498_479, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 5153).saturating_mul(a.into()))
    }
    /// Storage: Tokens TotalIssuance (r:2 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:76 w:21)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:11 w:10)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `a` is `[10, 20]`.
    /// The range of component `b` is `[0, 10]`.
    fn distribute_pool_share_rewards(a: u32, b: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `696 + a * (414 ±0) + b * (161 ±0)`
        //  Estimated: `19084 + a * (7887 ±5) + b * (5500 ±5)`
        // Minimum execution time: 494_361 nanoseconds.
        Weight::from_parts(128_925_631, 19084)
            // Standard Error: 194_399
            .saturating_add(Weight::from_parts(25_535_158, 0).saturating_mul(a.into()))
            // Standard Error: 194_399
            .saturating_add(Weight::from_parts(41_414_460, 0).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(b.into())))
            .saturating_add(Weight::from_parts(0, 7887).saturating_mul(a.into()))
            .saturating_add(Weight::from_parts(0, 5500).saturating_mul(b.into()))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Swaps SubsidyProviders (r:11 w:10)
    /// Proof: Swaps SubsidyProviders (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:85 w:85)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:11 w:11)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:65 w:65)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:0)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 65]`.
    /// The range of component `b` is `[0, 10]`.
    fn end_subsidy_phase(a: u32, b: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + a * (169 ±0) + b * (1159 ±0)`
        //  Estimated: `14083 + b * (10358 ±0) + a * (5116 ±0)`
        // Minimum execution time: 14_140 nanoseconds.
        Weight::from_parts(16_380_000, 14083)
            // Standard Error: 88_786
            .saturating_add(Weight::from_parts(20_000_763, 0).saturating_mul(a.into()))
            // Standard Error: 589_656
            .saturating_add(Weight::from_parts(89_504_168, 0).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(b.into())))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes((6_u64).saturating_mul(b.into())))
            .saturating_add(Weight::from_parts(0, 10358).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 5116).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:66 w:66)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 65]`.
    fn execute_arbitrage_buy_burn(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `799 + a * (215 ±0)`
        //  Estimated: `13849 + a * (5005 ±0)`
        // Minimum execution time: 104_740 nanoseconds.
        Weight::from_parts(48_573_155, 13849)
            // Standard Error: 57_601
            .saturating_add(Weight::from_parts(41_534_603, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 5005).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:66 w:66)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 65]`.
    fn execute_arbitrage_mint_sell(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `597 + a * (215 ±0)`
        //  Estimated: `16456 + a * (5005 ±0)`
        // Minimum execution time: 110_061 nanoseconds.
        Weight::from_parts(79_326_730, 16456)
            // Standard Error: 53_179
            .saturating_add(Weight::from_parts(37_383_766, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 5005).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:65 w:0)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 65]`.
    fn execute_arbitrage_skipped(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `440 + a * (167 ±0)`
        //  Estimated: `6126 + a * (2598 ±0)`
        // Minimum execution time: 30_291 nanoseconds.
        Weight::from_parts(27_039_143, 6126)
            // Standard Error: 12_934
            .saturating_add(Weight::from_parts(5_092_297, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 2598).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:131 w:131)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 65]`.
    fn pool_exit(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1049 + a * (286 ±0)`
        //  Estimated: `13849 + a * (5196 ±0)`
        // Minimum execution time: 112_690 nanoseconds.
        Weight::from_parts(64_232_862, 13849)
            // Standard Error: 43_303
            .saturating_add(Weight::from_parts(27_803_335, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 5196).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Swaps SubsidyProviders (r:1 w:1)
    /// Proof: Swaps SubsidyProviders (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:1 w:1)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    fn pool_exit_subsidy() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2493`
        //  Estimated: `11279`
        // Minimum execution time: 53_010 nanoseconds.
        Weight::from_parts(62_221_000, 11279)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn pool_exit_with_exact_asset_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5426`
        //  Estimated: `19045`
        // Minimum execution time: 115_681 nanoseconds.
        Weight::from_parts(135_621_000, 19045)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn pool_exit_with_exact_pool_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5426`
        //  Estimated: `19045`
        // Minimum execution time: 115_811 nanoseconds.
        Weight::from_parts(135_051_000, 19045)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:131 w:131)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 65]`.
    fn pool_join(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `910 + a * (286 ±0)`
        //  Estimated: `11242 + a * (5196 ±0)`
        // Minimum execution time: 101_520 nanoseconds.
        Weight::from_parts(58_997_986, 11242)
            // Standard Error: 42_155
            .saturating_add(Weight::from_parts(27_298_629, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 5196).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:1 w:1)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Swaps SubsidyProviders (r:1 w:1)
    /// Proof: Swaps SubsidyProviders (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    fn pool_join_subsidy() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2391`
        //  Estimated: `11279`
        // Minimum execution time: 53_740 nanoseconds.
        Weight::from_parts(59_311_000, 11279)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn pool_join_with_exact_asset_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5981`
        //  Estimated: `16438`
        // Minimum execution time: 97_960 nanoseconds.
        Weight::from_parts(114_620_000, 16438)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn pool_join_with_exact_pool_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5981`
        //  Estimated: `16438`
        // Minimum execution time: 98_781 nanoseconds.
        Weight::from_parts(108_660_000, 16438)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// The range of component `a` is `[3, 65]`.
    fn clean_up_pool_categorical_without_reward_distribution(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `209 + a * (54 ±0)`
        //  Estimated: `6126`
        // Minimum execution time: 10_910 nanoseconds.
        Weight::from_parts(12_518_659, 6126)
            // Standard Error: 1_147
            .saturating_add(Weight::from_parts(210_863, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4 w:4)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn swap_exact_amount_in_cpmm() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5526`
        //  Estimated: `22278`
        // Minimum execution time: 176_270 nanoseconds.
        Weight::from_parts(201_411_000, 22278)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:1)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// The range of component `a` is `[3, 65]`.
    fn swap_exact_amount_in_rikiddo(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2160 + a * (83 ±0)`
        //  Estimated: `28014 + a * (2352 ±1)`
        // Minimum execution time: 206_661 nanoseconds.
        Weight::from_parts(170_386_948, 28014)
            // Standard Error: 41_047
            .saturating_add(Weight::from_parts(20_812_338, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(Weight::from_parts(0, 2352).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4 w:4)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn swap_exact_amount_out_cpmm() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5526`
        //  Estimated: `22278`
        // Minimum execution time: 172_410 nanoseconds.
        Weight::from_parts(179_920_000, 22278)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:1)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// The range of component `a` is `[3, 65]`.
    fn swap_exact_amount_out_rikiddo(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2074 + a * (85 ±0)`
        //  Estimated: `28005 + a * (2352 ±1)`
        // Minimum execution time: 187_630 nanoseconds.
        Weight::from_parts(116_665_688, 28005)
            // Standard Error: 55_493
            .saturating_add(Weight::from_parts(35_177_058, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(Weight::from_parts(0, 2352).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 65]`.
    fn open_pool(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `209 + a * (54 ±0)`
        //  Estimated: `6126`
        // Minimum execution time: 17_780 nanoseconds.
        Weight::from_parts(21_764_096, 6126)
            // Standard Error: 1_984
            .saturating_add(Weight::from_parts(341_951, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 65]`.
    fn close_pool(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `209 + a * (54 ±0)`
        //  Estimated: `6126`
        // Minimum execution time: 15_590 nanoseconds.
        Weight::from_parts(18_163_492, 6126)
            // Standard Error: 1_494
            .saturating_add(Weight::from_parts(219_903, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:65 w:65)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:65 w:65)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// The range of component `a` is `[2, 65]`.
    fn destroy_pool(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `610 + a * (215 ±0)`
        //  Estimated: `8733 + a * (5116 ±0)`
        // Minimum execution time: 80_150 nanoseconds.
        Weight::from_parts(34_885_456, 8733)
            // Standard Error: 42_393
            .saturating_add(Weight::from_parts(26_784_533, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 5116).saturating_mul(a.into()))
    }
}
