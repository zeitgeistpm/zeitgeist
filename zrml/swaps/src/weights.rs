// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_swaps
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-09-11`, STEPS: `10`, REPEAT: `1000`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=1000
// --pallet=zrml_swaps
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/swaps/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_swaps (automatically generated)
pub trait WeightInfoZeitgeist {
    fn admin_clean_up_pool_cpmm_categorical(a: u32) -> Weight;
    fn admin_clean_up_pool_cpmm_scalar() -> Weight;
    fn apply_to_cached_pools_execute_arbitrage(a: u32) -> Weight;
    fn apply_to_cached_pools_noop(a: u32) -> Weight;
    fn destroy_pool_in_subsidy_phase(a: u32) -> Weight;
    fn distribute_pool_share_rewards(a: u32, b: u32) -> Weight;
    fn end_subsidy_phase(a: u32, b: u32) -> Weight;
    fn execute_arbitrage_buy_burn(a: u32) -> Weight;
    fn execute_arbitrage_mint_sell(a: u32) -> Weight;
    fn execute_arbitrage_skipped(a: u32) -> Weight;
    fn pool_exit(a: u32) -> Weight;
    fn pool_exit_subsidy() -> Weight;
    fn pool_exit_with_exact_asset_amount() -> Weight;
    fn pool_exit_with_exact_pool_amount() -> Weight;
    fn pool_join(a: u32) -> Weight;
    fn pool_join_subsidy() -> Weight;
    fn pool_join_with_exact_asset_amount() -> Weight;
    fn pool_join_with_exact_pool_amount() -> Weight;
    fn clean_up_pool_categorical_without_reward_distribution(a: u32) -> Weight;
    fn swap_exact_amount_in_cpmm() -> Weight;
    fn swap_exact_amount_in_rikiddo(a: u32) -> Weight;
    fn swap_exact_amount_out_cpmm() -> Weight;
    fn swap_exact_amount_out_rikiddo(a: u32) -> Weight;
    fn open_pool(a: u32) -> Weight;
    fn close_pool(a: u32) -> Weight;
    fn destroy_pool(a: u32) -> Weight;
}

/// Weight functions for zrml_swaps (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn admin_clean_up_pool_cpmm_categorical(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `693 + a * (54 ±0)`
        //  Estimated: `11665`
        // Minimum execution time: 42_190 nanoseconds.
        Weight::from_parts(49_034_219, 11665)
            // Standard Error: 3_278
            .saturating_add(Weight::from_ref_time(404_093).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn admin_clean_up_pool_cpmm_scalar() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `885`
        //  Estimated: `11665`
        // Minimum execution time: 38_530 nanoseconds.
        Weight::from_parts(44_220_000, 11665)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Swaps PoolsCachedForArbitrage (r:64 w:63)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:63 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4158 w:4158)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:63 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn apply_to_cached_pools_execute_arbitrage(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3255 + a * (11514 ±0)`
        //  Estimated: `163651 + a * (182700 ±0)`
        // Minimum execution time: 970 nanoseconds.
        Weight::from_parts(1_060_000, 163651)
            // Standard Error: 448_754
            .saturating_add(Weight::from_ref_time(2_433_200_516).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(43_u64))
            .saturating_add(T::DbWeight::get().reads((70_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(42_u64))
            .saturating_add(Weight::from_proof_size(182700).saturating_mul(a.into()))
    }
    /// Storage: Swaps PoolsCachedForArbitrage (r:64 w:63)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn apply_to_cached_pools_noop(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27 + a * (27 ±0)`
        //  Estimated: `2499 + a * (2499 ±0)`
        // Minimum execution time: 970 nanoseconds.
        Weight::from_parts(1_080_000, 2499)
            // Standard Error: 9_554
            .saturating_add(Weight::from_ref_time(9_462_323).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_proof_size(2499).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Swaps SubsidyProviders (r:11 w:10)
    /// Proof: Swaps SubsidyProviders (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:10 w:10)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:1)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    fn destroy_pool_in_subsidy_phase(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `805 + a * (297 ±0)`
        //  Estimated: `11476 + a * (5153 ±0)`
        // Minimum execution time: 29_910 nanoseconds.
        Weight::from_parts(46_082_527, 11476)
            // Standard Error: 47_423
            .saturating_add(Weight::from_ref_time(21_789_421).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(5153).saturating_mul(a.into()))
    }
    /// Storage: Tokens TotalIssuance (r:2 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:76 w:21)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:11 w:10)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn distribute_pool_share_rewards(a: u32, b: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `662 + a * (414 ±0) + b * (161 ±0)`
        //  Estimated: `19084 + a * (7887 ±5) + b * (5500 ±5)`
        // Minimum execution time: 493_162 nanoseconds.
        Weight::from_parts(145_177_140, 19084)
            // Standard Error: 200_970
            .saturating_add(Weight::from_ref_time(23_438_185).saturating_mul(a.into()))
            // Standard Error: 200_970
            .saturating_add(Weight::from_ref_time(44_120_651).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_proof_size(7887).saturating_mul(a.into()))
            .saturating_add(Weight::from_proof_size(5500).saturating_mul(b.into()))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Swaps SubsidyProviders (r:11 w:10)
    /// Proof: Swaps SubsidyProviders (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:85 w:85)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:11 w:11)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:65 w:65)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:0)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    fn end_subsidy_phase(a: u32, b: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + a * (169 ±0) + b * (1159 ±0)`
        //  Estimated: `14083 + b * (10358 ±0) + a * (5116 ±0)`
        // Minimum execution time: 14_110 nanoseconds.
        Weight::from_parts(15_660_000, 14083)
            // Standard Error: 89_745
            .saturating_add(Weight::from_ref_time(20_130_883).saturating_mul(a.into()))
            // Standard Error: 596_026
            .saturating_add(Weight::from_ref_time(89_490_626).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().reads((6_u64).saturating_mul(b.into())))
            .saturating_add(Weight::from_proof_size(10358).saturating_mul(b.into()))
            .saturating_add(Weight::from_proof_size(5116).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:66 w:66)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn execute_arbitrage_buy_burn(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `765 + a * (215 ±0)`
        //  Estimated: `13849 + a * (5005 ±0)`
        // Minimum execution time: 103_541 nanoseconds.
        Weight::from_parts(52_863_318, 13849)
            // Standard Error: 47_150
            .saturating_add(Weight::from_ref_time(39_365_062).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_proof_size(5005).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:66 w:66)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn execute_arbitrage_mint_sell(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `563 + a * (215 ±0)`
        //  Estimated: `16456 + a * (5005 ±0)`
        // Minimum execution time: 107_611 nanoseconds.
        Weight::from_parts(83_500_323, 16456)
            // Standard Error: 49_026
            .saturating_add(Weight::from_ref_time(36_153_186).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_proof_size(5005).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:65 w:0)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    fn execute_arbitrage_skipped(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `406 + a * (167 ±0)`
        //  Estimated: `6126 + a * (2598 ±0)`
        // Minimum execution time: 30_331 nanoseconds.
        Weight::from_parts(29_843_449, 6126)
            // Standard Error: 12_253
            .saturating_add(Weight::from_ref_time(5_139_008).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_proof_size(2598).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:131 w:131)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn pool_exit(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1015 + a * (286 ±0)`
        //  Estimated: `13849 + a * (5196 ±0)`
        // Minimum execution time: 112_471 nanoseconds.
        Weight::from_parts(73_778_924, 13849)
            // Standard Error: 41_828
            .saturating_add(Weight::from_ref_time(28_096_818).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(5196).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Swaps SubsidyProviders (r:1 w:1)
    /// Proof: Swaps SubsidyProviders (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:1 w:1)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    fn pool_exit_subsidy() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2459`
        //  Estimated: `11279`
        // Minimum execution time: 52_031 nanoseconds.
        Weight::from_parts(59_821_000, 11279)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn pool_exit_with_exact_asset_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5392`
        //  Estimated: `19045`
        // Minimum execution time: 114_590 nanoseconds.
        Weight::from_parts(132_750_000, 19045)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn pool_exit_with_exact_pool_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5392`
        //  Estimated: `19045`
        // Minimum execution time: 115_461 nanoseconds.
        Weight::from_parts(133_171_000, 19045)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:131 w:131)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    fn pool_join(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `876 + a * (286 ±0)`
        //  Estimated: `11242 + a * (5196 ±0)`
        // Minimum execution time: 100_770 nanoseconds.
        Weight::from_parts(47_250_242, 11242)
            // Standard Error: 42_708
            .saturating_add(Weight::from_ref_time(27_891_426).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(5196).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:1 w:1)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Swaps SubsidyProviders (r:1 w:1)
    /// Proof: Swaps SubsidyProviders (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    fn pool_join_subsidy() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2357`
        //  Estimated: `11279`
        // Minimum execution time: 52_430 nanoseconds.
        Weight::from_parts(60_521_000, 11279)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn pool_join_with_exact_asset_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5947`
        //  Estimated: `16438`
        // Minimum execution time: 97_150 nanoseconds.
        Weight::from_parts(109_180_000, 16438)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn pool_join_with_exact_pool_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5947`
        //  Estimated: `16438`
        // Minimum execution time: 97_761 nanoseconds.
        Weight::from_parts(113_821_000, 16438)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn clean_up_pool_categorical_without_reward_distribution(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `209 + a * (54 ±0)`
        //  Estimated: `6126`
        // Minimum execution time: 10_810 nanoseconds.
        Weight::from_parts(12_884_720, 6126)
            // Standard Error: 1_043
            .saturating_add(Weight::from_ref_time(188_908).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4 w:4)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn swap_exact_amount_in_cpmm() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5488`
        //  Estimated: `22141`
        // Minimum execution time: 179_210 nanoseconds.
        Weight::from_parts(189_331_000, 22141)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:1)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn swap_exact_amount_in_rikiddo(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2122 + a * (83 ±0)`
        //  Estimated: `27877 + a * (2352 ±1)`
        // Minimum execution time: 205_951 nanoseconds.
        Weight::from_parts(163_473_267, 27877)
            // Standard Error: 41_876
            .saturating_add(Weight::from_ref_time(22_002_102).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(5_u64))
            .saturating_add(Weight::from_proof_size(2352).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4 w:4)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn swap_exact_amount_out_cpmm() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5488`
        //  Estimated: `22141`
        // Minimum execution time: 175_140 nanoseconds.
        Weight::from_parts(191_881_000, 22141)
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(541), added: 3016, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:1)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn swap_exact_amount_out_rikiddo(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2036 + a * (85 ±0)`
        //  Estimated: `27868 + a * (2352 ±1)`
        // Minimum execution time: 187_250 nanoseconds.
        Weight::from_parts(119_405_377, 27868)
            // Standard Error: 48_361
            .saturating_add(Weight::from_ref_time(35_257_528).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(5_u64))
            .saturating_add(Weight::from_proof_size(2352).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn open_pool(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `209 + a * (54 ±0)`
        //  Estimated: `6126`
        // Minimum execution time: 17_570 nanoseconds.
        Weight::from_parts(20_921_108, 6126)
            // Standard Error: 1_866
            .saturating_add(Weight::from_ref_time(328_679).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn close_pool(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `209 + a * (54 ±0)`
        //  Estimated: `6126`
        // Minimum execution time: 15_490 nanoseconds.
        Weight::from_parts(18_628_239, 6126)
            // Standard Error: 1_306
            .saturating_add(Weight::from_ref_time(202_899).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:65 w:65)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:65 w:65)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn destroy_pool(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `576 + a * (215 ±0)`
        //  Estimated: `8733 + a * (5116 ±0)`
        // Minimum execution time: 80_160 nanoseconds.
        Weight::from_parts(32_370_808, 8733)
            // Standard Error: 37_869
            .saturating_add(Weight::from_ref_time(27_464_883).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(Weight::from_proof_size(5116).saturating_mul(a.into()))
    }
}
