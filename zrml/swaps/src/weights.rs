
//! Autogenerated weights for zrml_swaps
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-11-26, STEPS: `2`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// --chain=dev
// --steps=2
// --repeat=2
// --pallet=zrml_swaps
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --output=./zrml//swaps/src/weights.rs


#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_swaps (automatically generated)
pub trait WeightInfoZeitgeist {
	fn admin_set_pool_as_stale() -> Weight;
	fn end_subsidy_phase(a: u32, b: u32, ) -> Weight;
	fn destroy_pool_in_subsidy_phase(a: u32, ) -> Weight;
	fn distribute_pool_share_rewards(a: u32, b: u32, ) -> Weight;
	fn pool_exit(a: u32, ) -> Weight;
	fn pool_exit_subsidy() -> Weight;
	fn pool_exit_with_exact_asset_amount() -> Weight;
	fn pool_exit_with_exact_pool_amount() -> Weight;
	fn pool_join(a: u32, ) -> Weight;
	fn pool_join_subsidy() -> Weight;
	fn pool_join_with_exact_asset_amount() -> Weight;
	fn pool_join_with_exact_pool_amount() -> Weight;
	fn set_pool_as_stale_without_reward_distribution(a: u32, ) -> Weight;
	fn swap_exact_amount_in_cpmm() -> Weight;
	fn swap_exact_amount_in_rikiddo(a: u32, ) -> Weight;
	fn swap_exact_amount_out_cpmm() -> Weight;
	fn swap_exact_amount_out_rikiddo(a: u32, ) -> Weight;
}

/// Weight functions for zrml_swaps (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
	fn admin_set_pool_as_stale() -> Weight {
		(44_390_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn end_subsidy_phase(a: u32, b: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 26_923_000
			.saturating_add((58_218_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 23_995_000
			.saturating_add((218_763_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().reads((6 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes((6 as Weight).saturating_mul(b as Weight)))
	}
	fn destroy_pool_in_subsidy_phase(a: u32, ) -> Weight {
		(72_055_000 as Weight)
			// Standard Error: 6_527_000
			.saturating_add((78_604_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
	}
	fn distribute_pool_share_rewards(a: u32, b: u32, ) -> Weight {
		(0 as Weight)
			// Standard Error: 8_174_000
			.saturating_add((66_754_000 as Weight).saturating_mul(a as Weight))
			// Standard Error: 8_174_000
			.saturating_add((151_243_000 as Weight).saturating_mul(b as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((3 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(b as Weight)))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(b as Weight)))
	}
	fn pool_exit(a: u32, ) -> Weight {
		(134_077_000 as Weight)
			// Standard Error: 6_617_000
			.saturating_add((111_882_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
	}
	fn pool_exit_subsidy() -> Weight {
		(151_961_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn pool_exit_with_exact_asset_amount() -> Weight {
		(249_641_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn pool_exit_with_exact_pool_amount() -> Weight {
		(244_471_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn pool_join(a: u32, ) -> Weight {
		(271_286_000 as Weight)
			// Standard Error: 9_972_000
			.saturating_add((80_682_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((2 as Weight).saturating_mul(a as Weight)))
	}
	fn pool_join_subsidy() -> Weight {
		(167_670_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn pool_join_with_exact_asset_amount() -> Weight {
		(278_271_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn pool_join_with_exact_pool_amount() -> Weight {
		(238_830_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn set_pool_as_stale_without_reward_distribution(a: u32, ) -> Weight {
		(27_058_000 as Weight)
			// Standard Error: 510_000
			.saturating_add((913_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn swap_exact_amount_in_cpmm() -> Weight {
		(394_411_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn swap_exact_amount_in_rikiddo(a: u32, ) -> Weight {
		(416_623_000 as Weight)
			// Standard Error: 3_330_000
			.saturating_add((44_207_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	fn swap_exact_amount_out_cpmm() -> Weight {
		(385_621_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn swap_exact_amount_out_rikiddo(a: u32, ) -> Weight {
		(253_328_000 as Weight)
			// Standard Error: 1_291_000
			.saturating_add((81_478_000 as Weight).saturating_mul(a as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(a as Weight)))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
}
