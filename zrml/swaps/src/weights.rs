// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_swaps
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-09-15`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `mkl-mac`, CPU: `<UNKNOWN>`
//! EXECUTION: `Some(Native)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=0
// --pallet=zrml_swaps
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/swaps/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_swaps (automatically generated)
pub trait WeightInfoZeitgeist {
    fn admin_clean_up_pool_cpmm_categorical(a: u32) -> Weight;
    fn admin_clean_up_pool_cpmm_scalar() -> Weight;
    fn apply_to_cached_pools_execute_arbitrage(a: u32) -> Weight;
    fn apply_to_cached_pools_noop(a: u32) -> Weight;
    fn destroy_pool_in_subsidy_phase(a: u32) -> Weight;
    fn distribute_pool_share_rewards(a: u32, b: u32) -> Weight;
    fn end_subsidy_phase(a: u32, b: u32) -> Weight;
    fn execute_arbitrage_buy_burn(a: u32) -> Weight;
    fn execute_arbitrage_mint_sell(a: u32) -> Weight;
    fn execute_arbitrage_skipped(a: u32) -> Weight;
    fn pool_exit(a: u32) -> Weight;
    fn pool_exit_subsidy() -> Weight;
    fn pool_exit_with_exact_asset_amount() -> Weight;
    fn pool_exit_with_exact_pool_amount() -> Weight;
    fn pool_join(a: u32) -> Weight;
    fn pool_join_subsidy() -> Weight;
    fn pool_join_with_exact_asset_amount() -> Weight;
    fn pool_join_with_exact_pool_amount() -> Weight;
    fn clean_up_pool_categorical_without_reward_distribution(a: u32) -> Weight;
    fn swap_exact_amount_in_cpmm() -> Weight;
    fn swap_exact_amount_in_rikiddo(a: u32) -> Weight;
    fn swap_exact_amount_out_cpmm() -> Weight;
    fn swap_exact_amount_out_rikiddo(a: u32) -> Weight;
    fn open_pool(a: u32) -> Weight;
    fn close_pool(a: u32) -> Weight;
    fn destroy_pool(a: u32) -> Weight;
}

/// Weight functions for zrml_swaps (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(538), added: 3013, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn admin_clean_up_pool_cpmm_categorical(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `651 + a * (54 ±0)`
        //  Estimated: `11662`
        // Minimum execution time: 44_000 nanoseconds.
        Weight::from_parts(155_000_000, 11662)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(538), added: 3013, mode: MaxEncodedLen)
    /// Storage: MarketCommons MarketPool (r:1 w:0)
    /// Proof: MarketCommons MarketPool (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn admin_clean_up_pool_cpmm_scalar() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `844`
        //  Estimated: `11662`
        // Minimum execution time: 63_000 nanoseconds.
        Weight::from_parts(63_000_000, 11662)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Swaps PoolsCachedForArbitrage (r:64 w:63)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    /// Storage: Swaps Pools (r:63 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4158 w:4158)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:63 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn apply_to_cached_pools_execute_arbitrage(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + a * (11565 ±0)`
        //  Estimated: `11673751`
        // Minimum execution time: 1_000 nanoseconds.
        Weight::from_parts(85_199_000_000, 11673751)
            .saturating_add(T::DbWeight::get().reads(4412_u64))
            .saturating_add(T::DbWeight::get().writes(4285_u64))
    }
    /// Storage: Swaps PoolsCachedForArbitrage (r:64 w:63)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn apply_to_cached_pools_noop(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + a * (28 ±0)`
        //  Estimated: `159936`
        // Minimum execution time: 1_000 nanoseconds.
        Weight::from_parts(815_000_000, 159936)
            .saturating_add(T::DbWeight::get().reads(64_u64))
            .saturating_add(T::DbWeight::get().writes(63_u64))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Swaps SubsidyProviders (r:11 w:10)
    /// Proof: Swaps SubsidyProviders (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:10 w:10)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:1)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    fn destroy_pool_in_subsidy_phase(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `631 + a * (314 ±0)`
        //  Estimated: `63006`
        // Minimum execution time: 39_000 nanoseconds.
        Weight::from_parts(219_000_000, 63006)
            .saturating_add(T::DbWeight::get().reads(23_u64))
            .saturating_add(T::DbWeight::get().writes(22_u64))
    }
    /// Storage: Tokens TotalIssuance (r:2 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:76 w:21)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:11 w:10)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn distribute_pool_share_rewards(a: u32, b: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + a * (412 ±0) + b * (248 ±0)`
        //  Estimated: `13114 + b * (6216 ±0) + a * (7794 ±0)`
        // Minimum execution time: 549_000 nanoseconds.
        Weight::from_parts(26_999_999, 13114)
            // Standard Error: 1_039_230
            .saturating_add(Weight::from_ref_time(26_100_000).saturating_mul(a.into()))
            // Standard Error: 1_039_230
            .saturating_add(Weight::from_ref_time(31_600_000).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
            .saturating_add(Weight::from_proof_size(6216).saturating_mul(b.into()))
            .saturating_add(Weight::from_proof_size(7794).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Swaps SubsidyProviders (r:11 w:10)
    /// Proof: Swaps SubsidyProviders (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:85 w:85)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:11 w:11)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:65 w:65)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:0)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    fn end_subsidy_phase(a: u32, b: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + a * (182 ±0) + b * (1508 ±0)`
        //  Estimated: `7230 + b * (11044 ±0) + a * (5116 ±0)`
        // Minimum execution time: 26_000 nanoseconds.
        Weight::from_parts(26_000_000, 7230)
            // Standard Error: 5_032_352
            .saturating_add(Weight::from_ref_time(5_593_072).saturating_mul(a.into()))
            // Standard Error: 32_715_450
            .saturating_add(Weight::from_ref_time(83_090_481).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().reads((10_u64).saturating_mul(b.into())))
            .saturating_add(Weight::from_proof_size(11044).saturating_mul(b.into()))
            .saturating_add(Weight::from_proof_size(5116).saturating_mul(a.into()))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:66 w:66)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn execute_arbitrage_buy_burn(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `742 + a * (215 ±0)`
        //  Estimated: `341353`
        // Minimum execution time: 78_000 nanoseconds.
        Weight::from_parts(1_430_000_000, 341353)
            .saturating_add(T::DbWeight::get().reads(132_u64))
            .saturating_add(T::DbWeight::get().writes(130_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:66 w:66)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:64)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn execute_arbitrage_mint_sell(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `540 + a * (215 ±0)`
        //  Estimated: `343960`
        // Minimum execution time: 82_000 nanoseconds.
        Weight::from_parts(1_533_000_000, 343960)
            .saturating_add(T::DbWeight::get().reads(133_u64))
            .saturating_add(T::DbWeight::get().writes(131_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:65 w:0)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    fn execute_arbitrage_skipped(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `395 + a * (167 ±0)`
        //  Estimated: `174996`
        // Minimum execution time: 40_000 nanoseconds.
        Weight::from_parts(263_000_000, 174996).saturating_add(T::DbWeight::get().reads(66_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:131 w:131)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn pool_exit(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `748 + a * (289 ±0)`
        //  Estimated: `351589`
        // Minimum execution time: 92_000 nanoseconds.
        Weight::from_parts(1_218_000_000, 351589)
            .saturating_add(T::DbWeight::get().reads(134_u64))
            .saturating_add(T::DbWeight::get().writes(132_u64))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Swaps SubsidyProviders (r:1 w:1)
    /// Proof: Swaps SubsidyProviders (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:1 w:1)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    fn pool_exit_subsidy() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2459`
        //  Estimated: `11279`
        // Minimum execution time: 46_000 nanoseconds.
        Weight::from_parts(46_000_000, 11279)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn pool_exit_with_exact_asset_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5392`
        //  Estimated: `19045`
        // Minimum execution time: 98_000 nanoseconds.
        Weight::from_parts(98_000_000, 19045)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn pool_exit_with_exact_pool_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5392`
        //  Estimated: `19045`
        // Minimum execution time: 103_000 nanoseconds.
        Weight::from_parts(103_000_000, 19045)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:131 w:131)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    fn pool_join(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `609 + a * (289 ±0)`
        //  Estimated: `348982`
        // Minimum execution time: 84_000 nanoseconds.
        Weight::from_parts(1_182_000_000, 348982)
            .saturating_add(T::DbWeight::get().reads(133_u64))
            .saturating_add(T::DbWeight::get().writes(132_u64))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:1 w:1)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Swaps SubsidyProviders (r:1 w:1)
    /// Proof: Swaps SubsidyProviders (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    fn pool_join_subsidy() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2357`
        //  Estimated: `11279`
        // Minimum execution time: 53_000 nanoseconds.
        Weight::from_parts(53_000_000, 11279)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn pool_join_with_exact_asset_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5947`
        //  Estimated: `16438`
        // Minimum execution time: 102_000 nanoseconds.
        Weight::from_parts(102_000_000, 16438)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:1 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn pool_join_with_exact_pool_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5947`
        //  Estimated: `16438`
        // Minimum execution time: 99_000 nanoseconds.
        Weight::from_parts(99_000_000, 16438)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn clean_up_pool_categorical_without_reward_distribution(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `208 + a * (54 ±0)`
        //  Estimated: `6126`
        // Minimum execution time: 20_000 nanoseconds.
        Weight::from_parts(22_000_000, 6126)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4 w:4)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn swap_exact_amount_in_cpmm() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5112`
        //  Estimated: `19125`
        // Minimum execution time: 126_000 nanoseconds.
        Weight::from_parts(126_000_000, 19125)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:3 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:1)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn swap_exact_amount_in_rikiddo(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1414 + a * (86 ±0)`
        //  Estimated: `180977`
        // Minimum execution time: 123_000 nanoseconds.
        Weight::from_parts(639_000_000, 180977)
            .saturating_add(T::DbWeight::get().reads(71_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4 w:4)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:0)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Swaps PoolsCachedForArbitrage (r:0 w:1)
    /// Proof: Swaps PoolsCachedForArbitrage (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
    fn swap_exact_amount_out_cpmm() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5112`
        //  Estimated: `19125`
        // Minimum execution time: 125_000 nanoseconds.
        Weight::from_parts(125_000_000, 19125)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:0)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:4 w:3)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:64 w:1)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    /// Storage: RikiddoSigmoidFeeMarketEma RikiddoPerPool (r:1 w:1)
    /// Proof: RikiddoSigmoidFeeMarketEma RikiddoPerPool (max_values: None, max_size: Some(320), added: 2795, mode: MaxEncodedLen)
    /// Storage: Timestamp Now (r:1 w:0)
    /// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn swap_exact_amount_out_rikiddo(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1354 + a * (86 ±0)`
        //  Estimated: `180968`
        // Minimum execution time: 115_000 nanoseconds.
        Weight::from_parts(928_000_000, 180968)
            .saturating_add(T::DbWeight::get().reads(71_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn open_pool(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `208 + a * (54 ±0)`
        //  Estimated: `6126`
        // Minimum execution time: 18_000 nanoseconds.
        Weight::from_parts(54_000_000, 6126)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    fn close_pool(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `208 + a * (54 ±0)`
        //  Estimated: `6126`
        // Minimum execution time: 19_000 nanoseconds.
        Weight::from_parts(39_000_000, 6126)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Swaps Pools (r:1 w:1)
    /// Proof: Swaps Pools (max_values: None, max_size: Some(3651), added: 6126, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:65 w:65)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(123), added: 2598, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Tokens TotalIssuance (r:65 w:65)
    /// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
    fn destroy_pool(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `553 + a * (215 ±0)`
        //  Estimated: `341273`
        // Minimum execution time: 76_000 nanoseconds.
        Weight::from_parts(1_112_000_000, 341273)
            .saturating_add(T::DbWeight::get().reads(132_u64))
            .saturating_add(T::DbWeight::get().writes(132_u64))
    }
}
