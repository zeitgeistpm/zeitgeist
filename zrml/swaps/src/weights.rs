// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_swaps
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-08-12`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=zrml_swaps
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/swaps/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_swaps (automatically generated)
pub trait WeightInfoZeitgeist {
    fn pool_exit(a: u32) -> Weight;
    fn pool_exit_with_exact_asset_amount() -> Weight;
    fn pool_exit_with_exact_pool_amount() -> Weight;
    fn pool_join(a: u32) -> Weight;
    fn pool_join_with_exact_asset_amount() -> Weight;
    fn pool_join_with_exact_pool_amount() -> Weight;
    fn swap_exact_amount_in() -> Weight;
    fn swap_exact_amount_out() -> Weight;
    fn open_pool(a: u32) -> Weight;
    fn close_pool(a: u32) -> Weight;
    fn destroy_pool(a: u32) -> Weight;
}

/// Weight functions for zrml_swaps (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: `Swaps::Pools` (r:1 w:0)
    /// Proof: `Swaps::Pools` (`max_values`: None, `max_size`: Some(3579), added: 6054, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:1 w:1)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(43), added: 2518, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:131 w:131)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[2, 65]`.
    fn pool_exit(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `753 + a * (144 ±0)`
        //  Estimated: `7044 + a * (5196 ±0)`
        // Minimum execution time: 118_353 nanoseconds.
        Weight::from_parts(60_890_720, 7044)
            // Standard Error: 45_895
            .saturating_add(Weight::from_parts(31_772_853, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 5196).saturating_mul(a.into()))
    }
    /// Storage: `Swaps::Pools` (r:1 w:0)
    /// Proof: `Swaps::Pools` (`max_values`: None, `max_size`: Some(3579), added: 6054, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:3 w:3)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:1 w:1)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(43), added: 2518, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn pool_exit_with_exact_asset_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5419`
        //  Estimated: `8784`
        // Minimum execution time: 98_462 nanoseconds.
        Weight::from_parts(102_052_000, 8784)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `Swaps::Pools` (r:1 w:0)
    /// Proof: `Swaps::Pools` (`max_values`: None, `max_size`: Some(3579), added: 6054, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:1 w:1)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(43), added: 2518, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:3 w:3)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn pool_exit_with_exact_pool_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5419`
        //  Estimated: `8784`
        // Minimum execution time: 98_962 nanoseconds.
        Weight::from_parts(104_812_000, 8784)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `Swaps::Pools` (r:1 w:0)
    /// Proof: `Swaps::Pools` (`max_values`: None, `max_size`: Some(3579), added: 6054, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:1 w:1)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(43), added: 2518, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:131 w:131)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[2, 65]`.
    fn pool_join(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `662 + a * (225 ±0)`
        //  Estimated: `7044 + a * (5196 ±0)`
        // Minimum execution time: 88_242 nanoseconds.
        Weight::from_parts(44_161_526, 7044)
            // Standard Error: 29_426
            .saturating_add(Weight::from_parts(23_854_394, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 5196).saturating_mul(a.into()))
    }
    /// Storage: `Swaps::Pools` (r:1 w:0)
    /// Proof: `Swaps::Pools` (`max_values`: None, `max_size`: Some(3579), added: 6054, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:1 w:1)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(43), added: 2518, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:3 w:3)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    fn pool_join_with_exact_asset_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `6101`
        //  Estimated: `8784`
        // Minimum execution time: 88_502 nanoseconds.
        Weight::from_parts(91_692_000, 8784)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `Swaps::Pools` (r:1 w:0)
    /// Proof: `Swaps::Pools` (`max_values`: None, `max_size`: Some(3579), added: 6054, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:1 w:1)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(43), added: 2518, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:3 w:3)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    fn pool_join_with_exact_pool_amount() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `6101`
        //  Estimated: `8784`
        // Minimum execution time: 83_481 nanoseconds.
        Weight::from_parts(86_632_000, 8784)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `Swaps::Pools` (r:1 w:0)
    /// Proof: `Swaps::Pools` (`max_values`: None, `max_size`: Some(3579), added: 6054, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:4 w:4)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn swap_exact_amount_in() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4984`
        //  Estimated: `11382`
        // Minimum execution time: 142_643 nanoseconds.
        Weight::from_parts(144_773_000, 11382)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `Swaps::Pools` (r:1 w:0)
    /// Proof: `Swaps::Pools` (`max_values`: None, `max_size`: Some(3579), added: 6054, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:4 w:4)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn swap_exact_amount_out() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4984`
        //  Estimated: `11382`
        // Minimum execution time: 141_863 nanoseconds.
        Weight::from_parts(147_894_000, 11382)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `Swaps::Pools` (r:1 w:1)
    /// Proof: `Swaps::Pools` (`max_values`: None, `max_size`: Some(3579), added: 6054, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[2, 65]`.
    fn open_pool(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `136 + a * (54 ±0)`
        //  Estimated: `7044`
        // Minimum execution time: 14_581 nanoseconds.
        Weight::from_parts(16_093_848, 7044)
            // Standard Error: 2_407
            .saturating_add(Weight::from_parts(257_253, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Swaps::Pools` (r:1 w:1)
    /// Proof: `Swaps::Pools` (`max_values`: None, `max_size`: Some(3579), added: 6054, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[2, 65]`.
    fn close_pool(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `136 + a * (54 ±0)`
        //  Estimated: `7044`
        // Minimum execution time: 12_620 nanoseconds.
        Weight::from_parts(13_732_152, 7044)
            // Standard Error: 1_512
            .saturating_add(Weight::from_parts(164_975, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Swaps::Pools` (r:1 w:1)
    /// Proof: `Swaps::Pools` (`max_values`: None, `max_size`: Some(3579), added: 6054, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:65 w:65)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(123), added: 2598, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:65 w:65)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(43), added: 2518, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[2, 65]`.
    fn destroy_pool(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `505 + a * (182 ±0)`
        //  Estimated: `7044 + a * (2598 ±0)`
        // Minimum execution time: 66_331 nanoseconds.
        Weight::from_parts(26_817_240, 7044)
            // Standard Error: 114_270
            .saturating_add(Weight::from_parts(21_167_266, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 2598).saturating_mul(a.into()))
    }
}
