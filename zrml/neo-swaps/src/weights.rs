// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_neo_swaps
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-24`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=zrml_neo_swaps
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/neo-swaps/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_neo_swaps (automatically generated)
pub trait WeightInfoZeitgeist {
    fn buy(n: u32) -> Weight;
    fn sell(n: u32) -> Weight;
    fn join_in_place(n: u32) -> Weight;
    fn join_reassigned(n: u32) -> Weight;
    fn join_leaf(n: u32) -> Weight;
    fn exit(n: u32) -> Weight;
    fn withdraw_fees() -> Weight;
    fn deploy_pool(n: u32) -> Weight;
    fn combo_buy(n: u32) -> Weight;
    fn combo_sell(n: u32) -> Weight;
    fn deploy_combinatorial_pool(n: u32, m: u32) -> Weight;
    fn decision_market_oracle_evaluate() -> Weight;
    fn decision_market_oracle_update() -> Weight;
}

/// Weight functions for zrml_neo_swaps (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:3 w:3)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:5 w:5)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:4 w:4)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 4]`.
    fn buy(_n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1337 + n * (182 ±0)`
        //  Estimated: `156294`
        // Minimum execution time: 386_780 nanoseconds.
        Weight::from_parts(501_460_000, 156294)
            .saturating_add(T::DbWeight::get().reads(14))
            .saturating_add(T::DbWeight::get().writes(13))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:129 w:129)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:3 w:3)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:128 w:128)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 128]`.
    fn sell(_n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1466 + n * (183 ±0)`
        //  Estimated: `337938`
        // Minimum execution time: 294_730 nanoseconds.
        Weight::from_parts(8_256_886_000, 337938)
            .saturating_add(T::DbWeight::get().reads(262))
            .saturating_add(T::DbWeight::get().writes(261))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:256 w:256)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 128]`.
    fn join_in_place(_n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `139361 + n * (217 ±0)`
        //  Estimated: `669662`
        // Minimum execution time: 372_950 nanoseconds.
        Weight::from_parts(2_406_479_000, 669662)
            .saturating_add(T::DbWeight::get().reads(259))
            .saturating_add(T::DbWeight::get().writes(257))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:256 w:256)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 128]`.
    fn join_reassigned(_n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `139157 + n * (217 ±0)`
        //  Estimated: `669662`
        // Minimum execution time: 366_680 nanoseconds.
        Weight::from_parts(2_490_499_000, 669662)
            .saturating_add(T::DbWeight::get().reads(259))
            .saturating_add(T::DbWeight::get().writes(257))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:256 w:256)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 128]`.
    fn join_leaf(_n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `138661 + n * (217 ±0)`
        //  Estimated: `669662`
        // Minimum execution time: 343_550 nanoseconds.
        Weight::from_parts(2_491_739_000, 669662)
            .saturating_add(T::DbWeight::get().reads(259))
            .saturating_add(T::DbWeight::get().writes(257))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:256 w:256)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 128]`.
    fn exit(_n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `139258 + n * (217 ±0)`
        //  Estimated: `669662`
        // Minimum execution time: 412_539 nanoseconds.
        Weight::from_parts(2_449_118_000, 669662)
            .saturating_add(T::DbWeight::get().reads(259))
            .saturating_add(T::DbWeight::get().writes(257))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn withdraw_fees() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `137883`
        //  Estimated: `156294`
        // Minimum execution time: 303_800 nanoseconds.
        Weight::from_parts(303_800_000, 156294)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::MarketIdToPoolId` (r:1 w:1)
    /// Proof: `NeoSwaps::MarketIdToPoolId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:256 w:256)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::PoolCount` (r:1 w:1)
    /// Proof: `NeoSwaps::PoolCount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::Pools` (r:0 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 128]`.
    fn deploy_pool(_n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `593 + n * (81 ±0)`
        //  Estimated: `669662`
        // Minimum execution time: 113_530 nanoseconds.
        Weight::from_parts(2_830_649_000, 669662)
            .saturating_add(T::DbWeight::get().reads(260))
            .saturating_add(T::DbWeight::get().writes(260))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:7 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:3 w:3)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:256 w:256)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:128 w:128)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 7]`.
    fn combo_buy(_n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + n * (5912 ±0)`
        //  Estimated: `669662`
        // Minimum execution time: 402_459 nanoseconds.
        Weight::from_parts(15_766_323_000, 669662)
            .saturating_add(T::DbWeight::get().reads(395))
            .saturating_add(T::DbWeight::get().writes(388))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:7 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:255 w:255)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:3 w:3)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:128 w:128)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 7]`.
    fn combo_sell(_n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + n * (7938 ±0)`
        //  Estimated: `667050`
        // Minimum execution time: 378_460 nanoseconds.
        Weight::from_parts(22_170_849_000, 667050)
            .saturating_add(T::DbWeight::get().reads(394))
            .saturating_add(T::DbWeight::get().writes(387))
    }
    /// Storage: `MarketCommons::Markets` (r:7 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:382 w:382)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:254 w:254)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::PoolCount` (r:1 w:1)
    /// Proof: `NeoSwaps::PoolCount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::Pools` (r:0 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 7]`.
    /// The range of component `m` is `[32, 64]`.
    fn deploy_combinatorial_pool(n: u32, m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `351 + n * (185 ±0)`
        //  Estimated: `11438 + n * (156551 ±4_145)`
        // Minimum execution time: 3_709_188 nanoseconds.
        Weight::from_parts(3_709_188_000, 11438)
            // Standard Error: 21_298_206_423
            .saturating_add(Weight::from_parts(52_652_599_286, 0).saturating_mul(n.into()))
            // Standard Error: 2_245_702_565
            .saturating_add(Weight::from_parts(468_990_931, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().reads((101_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(10))
            .saturating_add(T::DbWeight::get().writes((100_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 156551).saturating_mul(n.into()))
    }
    fn decision_market_oracle_evaluate() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 220 nanoseconds.
        Weight::from_parts(220_000, 0)
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:0)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    fn decision_market_oracle_update() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `492`
        //  Estimated: `156294`
        // Minimum execution time: 114_670 nanoseconds.
        Weight::from_parts(114_670_000, 156294).saturating_add(T::DbWeight::get().reads(1))
    }
}
