// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_neo_swaps
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 48.0.0
//! DATE: `2025-07-11`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ztg-benchmark`, CPU: `AMD EPYC 7713 64-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/production/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=50
// --repeat=20
// --pallet=zrml_neo_swaps
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/neo-swaps/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_neo_swaps (automatically generated)
pub trait WeightInfoZeitgeist {
    fn buy(n: u32) -> Weight;
    fn sell(n: u32) -> Weight;
    fn join_in_place(n: u32) -> Weight;
    fn join_reassigned(n: u32) -> Weight;
    fn join_leaf(n: u32) -> Weight;
    fn exit(n: u32) -> Weight;
    fn withdraw_fees() -> Weight;
    fn deploy_pool(n: u32) -> Weight;
    fn combo_buy(n: u32) -> Weight;
    fn combo_sell(n: u32) -> Weight;
    fn deploy_combinatorial_pool(n: u32, m: u32) -> Weight;
    fn decision_market_oracle_evaluate() -> Weight;
    fn decision_market_oracle_update() -> Weight;
}

/// Weight functions for zrml_neo_swaps (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:3 w:3)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:5 w:5)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:4 w:4)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 4]`.
    fn buy(n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1337 + n * (182 ±0)`
        //  Estimated: `156294 + n * (2612 ±0)`
        // Minimum execution time: 515_531 nanoseconds.
        Weight::from_parts(386_416_839, 156294)
            // Standard Error: 780_164
            .saturating_add(Weight::from_parts(70_438_944, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 2612).saturating_mul(n.into()))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:129 w:129)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:3 w:3)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:128 w:128)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 128]`.
    fn sell(n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1503 + n * (182 ±0)`
        //  Estimated: `156294 + n * (2612 ±0)`
        // Minimum execution time: 416_380 nanoseconds.
        Weight::from_parts(269_089_215, 156294)
            // Standard Error: 55_377
            .saturating_add(Weight::from_parts(79_227_824, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 2612).saturating_mul(n.into()))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:256 w:256)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 128]`.
    fn join_in_place(n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `139400 + n * (216 ±0)`
        //  Estimated: `156294 + n * (5224 ±0)`
        // Minimum execution time: 908_640 nanoseconds.
        Weight::from_parts(990_550_591, 156294)
            // Standard Error: 173_803
            .saturating_add(Weight::from_parts(33_934_769, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 5224).saturating_mul(n.into()))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:256 w:256)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 128]`.
    fn join_reassigned(n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `139196 + n * (216 ±0)`
        //  Estimated: `156294 + n * (5224 ±0)`
        // Minimum execution time: 934_690 nanoseconds.
        Weight::from_parts(1_047_973_190, 156294)
            // Standard Error: 172_793
            .saturating_add(Weight::from_parts(33_506_700, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 5224).saturating_mul(n.into()))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:256 w:256)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 128]`.
    fn join_leaf(n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `138700 + n * (216 ±0)`
        //  Estimated: `156294 + n * (5224 ±0)`
        // Minimum execution time: 890_439 nanoseconds.
        Weight::from_parts(925_188_288, 156294)
            // Standard Error: 173_028
            .saturating_add(Weight::from_parts(34_480_585, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 5224).saturating_mul(n.into()))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:256 w:256)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 128]`.
    fn exit(n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `139297 + n * (216 ±0)`
        //  Estimated: `156294 + n * (5224 ±0)`
        // Minimum execution time: 921_930 nanoseconds.
        Weight::from_parts(967_163_893, 156294)
            // Standard Error: 165_864
            .saturating_add(Weight::from_parts(35_622_639, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 5224).saturating_mul(n.into()))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn withdraw_fees() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `137883`
        //  Estimated: `156294`
        // Minimum execution time: 608_272 nanoseconds.
        Weight::from_parts(766_916_000, 156294)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::MarketIdToPoolId` (r:1 w:1)
    /// Proof: `NeoSwaps::MarketIdToPoolId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::PoolCount` (r:1 w:1)
    /// Proof: `NeoSwaps::PoolCount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:256 w:256)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::Pools` (r:0 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[2, 128]`.
    fn deploy_pool(n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `611 + n * (81 ±0)`
        //  Estimated: `4173 + n * (5224 ±0)`
        // Minimum execution time: 178_014 nanoseconds.
        Weight::from_parts(112_124_514, 4173)
            // Standard Error: 38_257
            .saturating_add(Weight::from_parts(36_873_312, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 5224).saturating_mul(n.into()))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:7 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:3 w:3)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:256 w:256)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:128 w:128)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 7]`.
    fn combo_buy(n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + n * (2782 ±0)`
        //  Estimated: `156294 + n * (38153 ±999)`
        // Minimum execution time: 546_381 nanoseconds.
        Weight::from_parts(551_321_000, 156294)
            // Standard Error: 31_727_274
            .saturating_add(Weight::from_parts(1_195_885_157, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(11))
            .saturating_add(T::DbWeight::get().reads((23_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(10))
            .saturating_add(T::DbWeight::get().writes((22_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 38153).saturating_mul(n.into()))
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:7 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:255 w:255)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:3 w:3)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:128 w:128)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 7]`.
    fn combo_sell(n: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + n * (3687 ±0)`
        //  Estimated: `156294 + n * (38153 ±0)`
        // Minimum execution time: 528_053 nanoseconds.
        Weight::from_parts(533_551_000, 156294)
            // Standard Error: 41_695_900
            .saturating_add(Weight::from_parts(1_646_761_255, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().reads((23_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(9))
            .saturating_add(T::DbWeight::get().writes((22_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 38153).saturating_mul(n.into()))
    }
    /// Storage: `MarketCommons::Markets` (r:7 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::Accounts` (r:382 w:382)
    /// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(137), added: 2612, mode: `MaxEncodedLen`)
    /// Storage: `Tokens::TotalIssuance` (r:254 w:254)
    /// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::PoolCount` (r:1 w:1)
    /// Proof: `NeoSwaps::PoolCount` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `NeoSwaps::Pools` (r:0 w:1)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    /// The range of component `n` is `[1, 7]`.
    /// The range of component `m` is `[32, 64]`.
    fn deploy_combinatorial_pool(n: u32, _m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `357 + n * (185 ±0)`
        //  Estimated: `300085 + n * (159268 ±2_531)`
        // Minimum execution time: 6_389_772 nanoseconds.
        Weight::from_parts(6_544_194_000, 300085)
            // Standard Error: 1_599_109_332
            .saturating_add(Weight::from_parts(116_016_531_777, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(193))
            .saturating_add(T::DbWeight::get().reads((103_u64).saturating_mul(n.into())))
            .saturating_add(T::DbWeight::get().writes(194))
            .saturating_add(T::DbWeight::get().writes((102_u64).saturating_mul(n.into())))
            .saturating_add(Weight::from_parts(0, 159268).saturating_mul(n.into()))
    }
    fn decision_market_oracle_evaluate() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 360 nanoseconds.
        Weight::from_parts(410_000, 0)
    }
    /// Storage: `NeoSwaps::Pools` (r:1 w:0)
    /// Proof: `NeoSwaps::Pools` (`max_values`: None, `max_size`: Some(152829), added: 155304, mode: `MaxEncodedLen`)
    fn decision_market_oracle_update() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `492`
        //  Estimated: `156294`
        // Minimum execution time: 124_673 nanoseconds.
        Weight::from_parts(126_953_000, 156294).saturating_add(T::DbWeight::get().reads(1))
    }
}
