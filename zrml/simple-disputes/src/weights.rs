// Copyright 2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_simple_disputes
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-19, STEPS: `10`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/debug/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=10
// --pallet=zrml_simple_disputes
// --extrinsic=*
// --execution=Native
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./zrml/simple-disputes/src/weights2.rs
// --template=./misc/weight_template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_simple_disputes (automatically generated)
pub trait WeightInfoZeitgeist {
    fn suggest_outcome(d: u32, r: u32, e: u32) -> Weight;
    fn on_dispute_weight() -> Weight;
    fn on_resolution_weight(d: u32) -> Weight;
    fn exchange_weight(d: u32) -> Weight;
    fn get_auto_resolve_weight(d: u32) -> Weight;
    fn has_failed_weight(d: u32) -> Weight;
    fn on_global_dispute_weight(d: u32) -> Weight;
    fn clear_weight(d: u32) -> Weight;
}

/// Weight functions for zrml_simple_disputes (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    // Storage: MarketCommons Markets (r:1 w:0)
    // Storage: SimpleDisputes Disputes (r:1 w:1)
    // Storage: Balances Reserves (r:1 w:1)
    // Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:2 w:2)
    fn suggest_outcome(d: u32, r: u32, e: u32) -> Weight {
        Weight::from_ref_time(400_160_000)
            // Standard Error: 1_302_000
            .saturating_add(Weight::from_ref_time(3_511_000).saturating_mul(d.into()))
            // Standard Error: 69_000
            .saturating_add(Weight::from_ref_time(324_000).saturating_mul(r.into()))
            // Standard Error: 69_000
            .saturating_add(Weight::from_ref_time(311_000).saturating_mul(e.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }

    fn on_dispute_weight() -> Weight {
        Weight::from_ref_time(0)
    }
    // Storage: SimpleDisputes Disputes (r:1 w:0)
    fn on_resolution_weight(d: u32) -> Weight {
        Weight::from_ref_time(5_464_000)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(210_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    // Storage: SimpleDisputes Disputes (r:1 w:1)
    // Storage: Balances Reserves (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn exchange_weight(d: u32) -> Weight {
        Weight::from_ref_time(18_573_000)
            // Standard Error: 14_000
            .saturating_add(Weight::from_ref_time(19_710_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(d.into())))
    }
    // Storage: SimpleDisputes Disputes (r:1 w:0)
    fn get_auto_resolve_weight(d: u32) -> Weight {
        Weight::from_ref_time(5_535_000)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(145_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    // Storage: SimpleDisputes Disputes (r:1 w:0)
    fn has_failed_weight(d: u32) -> Weight {
        Weight::from_ref_time(5_685_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(117_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    // Storage: SimpleDisputes Disputes (r:1 w:0)
    fn on_global_dispute_weight(d: u32) -> Weight {
        Weight::from_ref_time(5_815_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(66_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    // Storage: SimpleDisputes Disputes (r:1 w:1)
    // Storage: Balances Reserves (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn clear_weight(d: u32) -> Weight {
        Weight::from_ref_time(15_958_000)
            // Standard Error: 17_000
            .saturating_add(Weight::from_ref_time(13_085_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(d.into())))
    }
}
