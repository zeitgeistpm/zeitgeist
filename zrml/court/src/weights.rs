// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_court
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-24`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=zrml_court
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/court/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_court (automatically generated)
pub trait WeightInfoZeitgeist {
    fn join_court(j: u32) -> Weight;
    fn delegate(j: u32, d: u32) -> Weight;
    fn prepare_exit_court(j: u32) -> Weight;
    fn exit_court_remove() -> Weight;
    fn exit_court_set() -> Weight;
    fn vote(d: u32) -> Weight;
    fn denounce_vote(d: u32) -> Weight;
    fn reveal_vote(d: u32) -> Weight;
    fn appeal(j: u32, a: u32, r: u32, f: u32) -> Weight;
    fn reassign_court_stakes(d: u32) -> Weight;
    fn set_inflation() -> Weight;
    fn handle_inflation(j: u32) -> Weight;
    fn select_participants(a: u32) -> Weight;
    fn on_dispute(j: u32, r: u32) -> Weight;
    fn on_resolution(d: u32) -> Weight;
    fn exchange(a: u32) -> Weight;
    fn get_auto_resolve() -> Weight;
    fn has_failed() -> Weight;
    fn on_global_dispute(a: u32, d: u32) -> Weight;
    fn clear(d: u32) -> Weight;
}

/// Weight functions for zrml_court (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: `Court::CourtPool` (r:1 w:1)
    /// Proof: `Court::CourtPool` (`max_values`: Some(1), `max_size`: Some(96002), added: 96497, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:1 w:1)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// The range of component `j` is `[0, 999]`.
    fn join_court(_j: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `368 + j * (97 ±0)`
        //  Estimated: `97487`
        // Minimum execution time: 30_500 nanoseconds.
        Weight::from_parts(128_960_000, 97487)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Court::CourtPool` (r:1 w:1)
    /// Proof: `Court::CourtPool` (`max_values`: Some(1), `max_size`: Some(96002), added: 96497, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:6 w:1)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// The range of component `j` is `[5, 999]`.
    /// The range of component `d` is `[1, 5]`.
    fn delegate(j: u32, d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + d * (653 ±0) + j * (99 ±0)`
        //  Estimated: `97487 + d * (2726 ±0)`
        // Minimum execution time: 48_320 nanoseconds.
        Weight::from_parts(18_573_629, 97487)
            // Standard Error: 8_189
            .saturating_add(Weight::from_parts(179_024, 0).saturating_mul(j.into()))
            // Standard Error: 2_035_159
            .saturating_add(Weight::from_parts(5_770_250, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 2726).saturating_mul(d.into()))
    }
    /// Storage: `Court::Participants` (r:1 w:1)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtPool` (r:1 w:1)
    /// Proof: `Court::CourtPool` (`max_values`: Some(1), `max_size`: Some(96002), added: 96497, mode: `MaxEncodedLen`)
    /// The range of component `j` is `[0, 999]`.
    fn prepare_exit_court(_j: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306 + j * (97 ±0)`
        //  Estimated: `97487`
        // Minimum execution time: 14_620 nanoseconds.
        Weight::from_parts(107_460_000, 97487)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Court::Participants` (r:1 w:1)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    fn exit_court_remove() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `276`
        //  Estimated: `4764`
        // Minimum execution time: 26_740 nanoseconds.
        Weight::from_parts(26_740_000, 4764)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Court::Participants` (r:1 w:1)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    fn exit_court_set() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `276`
        //  Estimated: `4764`
        // Minimum execution time: 24_450 nanoseconds.
        Weight::from_parts(24_450_000, 4764)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Court::Courts` (r:1 w:0)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectedDraws` (r:1 w:1)
    /// Proof: `Court::SelectedDraws` (`max_values`: None, `max_size`: Some(149974), added: 152449, mode: `MaxEncodedLen`)
    /// The range of component `d` is `[1, 510]`.
    fn vote(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `385 + d * (53 ±0)`
        //  Estimated: `153439`
        // Minimum execution time: 22_720 nanoseconds.
        Weight::from_parts(68_940_000, 153439)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Court::CourtIdToMarketId` (r:1 w:0)
    /// Proof: `Court::CourtIdToMarketId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:1 w:0)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `Court::Courts` (r:1 w:0)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectedDraws` (r:1 w:1)
    /// Proof: `Court::SelectedDraws` (`max_values`: None, `max_size`: Some(149974), added: 152449, mode: `MaxEncodedLen`)
    /// The range of component `d` is `[1, 510]`.
    fn denounce_vote(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1457 + d * (53 ±0)`
        //  Estimated: `153439`
        // Minimum execution time: 31_900 nanoseconds.
        Weight::from_parts(85_440_000, 153439)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Court::CourtIdToMarketId` (r:1 w:0)
    /// Proof: `Court::CourtIdToMarketId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:1 w:0)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `Court::Courts` (r:1 w:0)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectedDraws` (r:1 w:1)
    /// Proof: `Court::SelectedDraws` (`max_values`: None, `max_size`: Some(149974), added: 152449, mode: `MaxEncodedLen`)
    /// The range of component `d` is `[1, 510]`.
    fn reveal_vote(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2033 + d * (53 ±0)`
        //  Estimated: `153439`
        // Minimum execution time: 50_410 nanoseconds.
        Weight::from_parts(87_620_000, 153439)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Court::Courts` (r:1 w:1)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtIdToMarketId` (r:1 w:0)
    /// Proof: `Court::CourtIdToMarketId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectedDraws` (r:1 w:1)
    /// Proof: `Court::SelectedDraws` (`max_values`: None, `max_size`: Some(149974), added: 152449, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtPool` (r:1 w:1)
    /// Proof: `Court::CourtPool` (`max_values`: Some(1), `max_size`: Some(96002), added: 96497, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectionNonce` (r:1 w:1)
    /// Proof: `Court::SelectionNonce` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `RandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
    /// Proof: `RandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:347 w:343)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `Court::RequestBlock` (r:1 w:0)
    /// Proof: `Court::RequestBlock` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:2 w:2)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:1 w:1)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// The range of component `j` is `[255, 1000]`.
    /// The range of component `a` is `[0, 2]`.
    /// The range of component `r` is `[0, 62]`.
    /// The range of component `f` is `[0, 62]`.
    fn appeal(j: u32, a: u32, _r: u32, _f: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + a * (31502 ±0) + f * (16 ±0) + j * (160 ±0) + r * (16 ±0)`
        //  Estimated: `268138 + a * (281048 ±44_881) + j * (277 ±105)`
        // Minimum execution time: 3_337_828 nanoseconds.
        Weight::from_parts(3_337_828_000, 268138)
            // Standard Error: 2_474_908
            .saturating_add(Weight::from_parts(5_957_611, 0).saturating_mul(j.into()))
            // Standard Error: 1_050_865_567
            .saturating_add(Weight::from_parts(2_504_768_133, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(109))
            .saturating_add(T::DbWeight::get().reads((103_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(100))
            .saturating_add(T::DbWeight::get().writes((104_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 281048).saturating_mul(a.into()))
            .saturating_add(Weight::from_parts(0, 277).saturating_mul(j.into()))
    }
    /// Storage: `Court::Courts` (r:1 w:1)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectedDraws` (r:1 w:1)
    /// Proof: `Court::SelectedDraws` (`max_values`: None, `max_size`: Some(149974), added: 152449, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:510 w:510)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:511 w:510)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `d` is `[5, 510]`.
    fn reassign_court_stakes(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `423 + d * (524 ±0)`
        //  Estimated: `1391250`
        // Minimum execution time: 98_890 nanoseconds.
        Weight::from_parts(24_249_678_000, 1391250)
            .saturating_add(T::DbWeight::get().reads(1023))
            .saturating_add(T::DbWeight::get().writes(1022))
    }
    /// Storage: `Court::YearlyInflation` (r:0 w:1)
    /// Proof: `Court::YearlyInflation` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    fn set_inflation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_040 nanoseconds.
        Weight::from_parts(9_040_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Court::YearlyInflation` (r:1 w:0)
    /// Proof: `Court::YearlyInflation` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtPool` (r:1 w:0)
    /// Proof: `Court::CourtPool` (`max_values`: Some(1), `max_size`: Some(96002), added: 96497, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1000 w:1000)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `j` is `[1, 1000]`.
    fn handle_inflation(_j: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `199 + j * (235 ±0)`
        //  Estimated: `2607990`
        // Minimum execution time: 19_710 nanoseconds.
        Weight::from_parts(10_487_705_000, 2607990)
            .saturating_add(T::DbWeight::get().reads(1002))
            .saturating_add(T::DbWeight::get().writes(1000))
    }
    /// Storage: `Court::CourtPool` (r:1 w:1)
    /// Proof: `Court::CourtPool` (`max_values`: Some(1), `max_size`: Some(96002), added: 96497, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectionNonce` (r:1 w:1)
    /// Proof: `Court::SelectionNonce` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `RandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
    /// Proof: `RandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:240 w:236)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 3]`.
    fn select_participants(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113583 + a * (20188 ±0)`
        //  Estimated: `655230`
        // Minimum execution time: 1_485_289 nanoseconds.
        Weight::from_parts(11_278_715_000, 655230)
            .saturating_add(T::DbWeight::get().reads(243))
            .saturating_add(T::DbWeight::get().writes(238))
    }
    /// Storage: `Court::NextCourtId` (r:1 w:1)
    /// Proof: `Court::NextCourtId` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtPool` (r:1 w:1)
    /// Proof: `Court::CourtPool` (`max_values`: Some(1), `max_size`: Some(96002), added: 96497, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectionNonce` (r:1 w:1)
    /// Proof: `Court::SelectionNonce` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `RandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
    /// Proof: `RandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:31 w:31)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `Court::RequestBlock` (r:1 w:0)
    /// Proof: `Court::RequestBlock` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    /// Storage: `PredictionMarkets::MarketIdsPerDisputeBlock` (r:1 w:1)
    /// Proof: `PredictionMarkets::MarketIdsPerDisputeBlock` (`max_values`: None, `max_size`: Some(1042), added: 3517, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectedDraws` (r:0 w:1)
    /// Proof: `Court::SelectedDraws` (`max_values`: None, `max_size`: Some(149974), added: 152449, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtIdToMarketId` (r:0 w:1)
    /// Proof: `Court::CourtIdToMarketId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Court::MarketIdToCourtId` (r:0 w:1)
    /// Proof: `Court::MarketIdToCourtId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Court::Courts` (r:0 w:1)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// The range of component `j` is `[31, 1000]`.
    /// The range of component `r` is `[0, 62]`.
    fn on_dispute(j: u32, r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2301 + j * (105 ±0) + r * (16 ±0)`
        //  Estimated: `97487 + j * (23 ±0)`
        // Minimum execution time: 191_850 nanoseconds.
        Weight::from_parts(181_549_877, 97487)
            // Standard Error: 5_827
            .saturating_add(Weight::from_parts(199_649, 0).saturating_mul(j.into()))
            // Standard Error: 91_072
            .saturating_add(Weight::from_parts(66_306, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(29))
            .saturating_add(T::DbWeight::get().writes(31))
            .saturating_add(Weight::from_parts(0, 23).saturating_mul(j.into()))
    }
    /// Storage: `Court::MarketIdToCourtId` (r:1 w:0)
    /// Proof: `Court::MarketIdToCourtId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Court::Courts` (r:1 w:1)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectedDraws` (r:1 w:0)
    /// Proof: `Court::SelectedDraws` (`max_values`: None, `max_size`: Some(149974), added: 152449, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtIdToMarketId` (r:1 w:0)
    /// Proof: `Court::CourtIdToMarketId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:510 w:510)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// The range of component `d` is `[1, 510]`.
    fn on_resolution(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1369 + d * (223 ±0)`
        //  Estimated: `1391250`
        // Minimum execution time: 27_740 nanoseconds.
        Weight::from_parts(2_136_969_000, 1391250)
            .saturating_add(T::DbWeight::get().reads(515))
            .saturating_add(T::DbWeight::get().writes(511))
    }
    /// Storage: `Court::MarketIdToCourtId` (r:1 w:0)
    /// Proof: `Court::MarketIdToCourtId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Court::Courts` (r:1 w:0)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Reserves` (r:4 w:4)
    /// Proof: `Balances::Reserves` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:4 w:4)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 4]`.
    fn exchange(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `391 + a * (320 ±0)`
        //  Estimated: `15886`
        // Minimum execution time: 7_930 nanoseconds.
        Weight::from_parts(72_440_000, 15886)
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(8))
    }
    /// Storage: `Court::MarketIdToCourtId` (r:1 w:0)
    /// Proof: `Court::MarketIdToCourtId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Court::Courts` (r:1 w:0)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    fn get_auto_resolve() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `391`
        //  Estimated: `3814`
        // Minimum execution time: 7_950 nanoseconds.
        Weight::from_parts(7_950_000, 3814).saturating_add(T::DbWeight::get().reads(2))
    }
    /// Storage: `Court::MarketIdToCourtId` (r:1 w:0)
    /// Proof: `Court::MarketIdToCourtId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtPool` (r:1 w:0)
    /// Proof: `Court::CourtPool` (`max_values`: Some(1), `max_size`: Some(96002), added: 96497, mode: `MaxEncodedLen`)
    /// Storage: `Court::Courts` (r:1 w:0)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// Storage: `Court::CourtIdToMarketId` (r:1 w:0)
    /// Proof: `Court::CourtIdToMarketId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `MarketCommons::Markets` (r:1 w:0)
    /// Proof: `MarketCommons::Markets` (`max_values`: None, `max_size`: Some(708), added: 3183, mode: `MaxEncodedLen`)
    fn has_failed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3854`
        //  Estimated: `97487`
        // Minimum execution time: 22_920 nanoseconds.
        Weight::from_parts(22_920_000, 97487).saturating_add(T::DbWeight::get().reads(5))
    }
    /// Storage: `Court::MarketIdToCourtId` (r:1 w:0)
    /// Proof: `Court::MarketIdToCourtId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Court::Courts` (r:1 w:1)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectedDraws` (r:1 w:1)
    /// Proof: `Court::SelectedDraws` (`max_values`: None, `max_size`: Some(149974), added: 152449, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:510 w:510)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 4]`.
    /// The range of component `d` is `[1, 510]`.
    fn on_global_dispute(_a: u32, d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `903 + a * (66 ±0) + d * (223 ±0)`
        //  Estimated: `153439 + d * (2726 ±0)`
        // Minimum execution time: 19_870 nanoseconds.
        Weight::from_parts(20_273_833, 153439)
            // Standard Error: 18_273
            .saturating_add(Weight::from_parts(4_136_166, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2726).saturating_mul(d.into()))
    }
    /// Storage: `Court::MarketIdToCourtId` (r:1 w:0)
    /// Proof: `Court::MarketIdToCourtId` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
    /// Storage: `Court::SelectedDraws` (r:1 w:1)
    /// Proof: `Court::SelectedDraws` (`max_values`: None, `max_size`: Some(149974), added: 152449, mode: `MaxEncodedLen`)
    /// Storage: `Court::Participants` (r:510 w:510)
    /// Proof: `Court::Participants` (`max_values`: None, `max_size`: Some(251), added: 2726, mode: `MaxEncodedLen`)
    /// Storage: `Court::Courts` (r:0 w:1)
    /// Proof: `Court::Courts` (`max_values`: None, `max_size`: Some(349), added: 2824, mode: `MaxEncodedLen`)
    /// The range of component `d` is `[1, 510]`.
    fn clear(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `846 + d * (223 ±0)`
        //  Estimated: `1391250`
        // Minimum execution time: 16_030 nanoseconds.
        Weight::from_parts(2_132_899_000, 1391250)
            .saturating_add(T::DbWeight::get().reads(512))
            .saturating_add(T::DbWeight::get().writes(512))
    }
}
