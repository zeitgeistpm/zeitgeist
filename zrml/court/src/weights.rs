// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_court
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-02-15`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zafoi`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: `Some(Native)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=0
// --pallet=zrml_court
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/court/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_court (automatically generated)
pub trait WeightInfoZeitgeist {
    fn join_court(j: u32) -> Weight;
    fn delegate(j: u32, d: u32) -> Weight;
    fn prepare_exit_court(j: u32) -> Weight;
    fn exit_court_remove() -> Weight;
    fn exit_court_set() -> Weight;
    fn vote(d: u32) -> Weight;
    fn denounce_vote(d: u32) -> Weight;
    fn reveal_vote(d: u32) -> Weight;
    fn appeal(j: u32, a: u32, r: u32, f: u32) -> Weight;
    fn reassign_court_stakes(d: u32) -> Weight;
    fn set_inflation() -> Weight;
    fn handle_inflation(j: u32) -> Weight;
    fn select_participants(a: u32) -> Weight;
    fn on_dispute(j: u32, r: u32) -> Weight;
    fn on_resolution(d: u32) -> Weight;
    fn exchange(a: u32) -> Weight;
    fn get_auto_resolve() -> Weight;
    fn has_failed() -> Weight;
    fn on_global_dispute(a: u32, d: u32) -> Weight;
    fn clear(d: u32) -> Weight;
}

/// Weight functions for zrml_court (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: Court CourtPool (r:1 w:1)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:1 w:1)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// The range of component `j` is `[0, 999]`.
    fn join_court(_j: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `440 + j * (73 ±0)`
        //  Estimated: `78997`
        // Minimum execution time: 18_071 nanoseconds.
        Weight::from_parts(63_321_000, 78997)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Court CourtPool (r:1 w:1)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:6 w:1)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// The range of component `j` is `[5, 999]`.
    /// The range of component `d` is `[1, 5]`.
    fn delegate(j: u32, d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + j * (75 ±0) + d * (685 ±0)`
        //  Estimated: `78997 + d * (2726 ±0)`
        // Minimum execution time: 31_951 nanoseconds.
        Weight::from_parts(11_783_401, 78997)
            // Standard Error: 2_169
            .saturating_add(Weight::from_parts(72_269, 0).saturating_mul(j.into()))
            // Standard Error: 539_100
            .saturating_add(Weight::from_parts(3_961_250, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 2726).saturating_mul(d.into()))
    }
    /// Storage: Court Participants (r:1 w:1)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:1)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// The range of component `j` is `[0, 999]`.
    fn prepare_exit_court(_j: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `378 + j * (73 ±0)`
        //  Estimated: `75223`
        // Minimum execution time: 12_601 nanoseconds.
        Weight::from_parts(52_961_000, 75223)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Court Participants (r:1 w:1)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn exit_court_remove() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `340`
        //  Estimated: `6500`
        // Minimum execution time: 16_850 nanoseconds.
        Weight::from_parts(16_850_000, 6500)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Court Participants (r:1 w:1)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn exit_court_set() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `340`
        //  Estimated: `6500`
        // Minimum execution time: 15_560 nanoseconds.
        Weight::from_parts(15_560_000, 6500)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Court Courts (r:1 w:0)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// The range of component `d` is `[1, 510]`.
    fn vote(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `482 + d * (53 ±0)`
        //  Estimated: `155273`
        // Minimum execution time: 17_341 nanoseconds.
        Weight::from_parts(47_941_000, 155273)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:1 w:0)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:0)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// The range of component `d` is `[1, 510]`.
    fn denounce_vote(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1570 + d * (53 ±0)`
        //  Estimated: `163667`
        // Minimum execution time: 26_670 nanoseconds.
        Weight::from_parts(59_282_000, 163667)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:1 w:0)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:0)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// The range of component `d` is `[1, 510]`.
    fn reveal_vote(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2178 + d * (53 ±0)`
        //  Estimated: `163667`
        // Minimum execution time: 30_621 nanoseconds.
        Weight::from_parts(60_112_000, 163667)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Court Courts (r:1 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:1)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court SelectionNonce (r:1 w:1)
    /// Proof: Court SelectionNonce (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    /// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:347 w:343)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Court RequestBlock (r:1 w:0)
    /// Proof: Court RequestBlock (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// The range of component `j` is `[255, 1000]`.
    /// The range of component `a` is `[0, 2]`.
    /// The range of component `r` is `[0, 62]`.
    /// The range of component `f` is `[0, 62]`.
    fn appeal(j: u32, a: u32, _r: u32, _f: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + j * (141 ±0) + a * (35486 ±0) + r * (16 ±0) + f * (16 ±0)`
        //  Estimated: `515439 + j * (277 ±105) + a * (281048 ±44_881)`
        // Minimum execution time: 2_175_665 nanoseconds.
        Weight::from_parts(2_175_665_000, 515439)
            // Standard Error: 1_730_902
            .saturating_add(Weight::from_parts(4_467_386, 0).saturating_mul(j.into()))
            // Standard Error: 734_954_679
            .saturating_add(Weight::from_parts(1_828_359_258, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(109))
            .saturating_add(T::DbWeight::get().reads((103_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(100))
            .saturating_add(T::DbWeight::get().writes((104_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 277).saturating_mul(j.into()))
            .saturating_add(Weight::from_parts(0, 281048).saturating_mul(a.into()))
    }
    /// Storage: Court Courts (r:1 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:510 w:510)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: System Account (r:511 w:510)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `d` is `[5, 510]`.
    fn reassign_court_stakes(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `520 + d * (588 ±0)`
        //  Estimated: `2877710`
        // Minimum execution time: 61_732 nanoseconds.
        Weight::from_parts(9_913_050_000, 2877710)
            .saturating_add(T::DbWeight::get().reads(1023))
            .saturating_add(T::DbWeight::get().writes(1022))
    }
    /// Storage: Court YearlyInflation (r:0 w:1)
    /// Proof: Court YearlyInflation (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn set_inflation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_440 nanoseconds.
        Weight::from_parts(7_440_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Court YearlyInflation (r:1 w:0)
    /// Proof: Court YearlyInflation (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:0)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: System Account (r:1000 w:1000)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `j` is `[1, 1000]`.
    fn handle_inflation(_j: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `264 + j * (243 ±0)`
        //  Estimated: `2679996`
        // Minimum execution time: 15_180 nanoseconds.
        Weight::from_parts(6_159_567_000, 2679996)
            .saturating_add(T::DbWeight::get().reads(1002))
            .saturating_add(T::DbWeight::get().writes(1000))
    }
    /// Storage: Court CourtPool (r:1 w:1)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court SelectionNonce (r:1 w:1)
    /// Proof: Court SelectionNonce (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    /// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:240 w:236)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 3]`.
    fn select_participants(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `90768 + a * (22375 ±0)`
        //  Estimated: `730329`
        // Minimum execution time: 1_012_616 nanoseconds.
        Weight::from_parts(7_988_843_000, 730329)
            .saturating_add(T::DbWeight::get().reads(243))
            .saturating_add(T::DbWeight::get().writes(238))
    }
    /// Storage: Court NextCourtId (r:1 w:1)
    /// Proof: Court NextCourtId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:1)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court SelectionNonce (r:1 w:1)
    /// Proof: Court SelectionNonce (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    /// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:31 w:31)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Court RequestBlock (r:1 w:0)
    /// Proof: Court RequestBlock (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:0 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court CourtIdToMarketId (r:0 w:1)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court MarketIdToCourtId (r:0 w:1)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:0 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// The range of component `j` is `[31, 1000]`.
    /// The range of component `r` is `[0, 62]`.
    fn on_dispute(j: u32, r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3094 + j * (81 ±0) + r * (17 ±0)`
        //  Estimated: `142620 + j * (23 ±0)`
        // Minimum execution time: 115_813 nanoseconds.
        Weight::from_parts(111_223_534, 142620)
            // Standard Error: 2_001
            .saturating_add(Weight::from_parts(94_821, 0).saturating_mul(j.into()))
            // Standard Error: 31_288
            .saturating_add(Weight::from_parts(26_612, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(29))
            .saturating_add(T::DbWeight::get().writes(31))
            .saturating_add(Weight::from_parts(0, 23).saturating_mul(j.into()))
    }
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:0)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:510 w:510)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// The range of component `d` is `[1, 510]`.
    fn on_resolution(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1482 + d * (255 ±0)`
        //  Estimated: `1553716`
        // Minimum execution time: 22_631 nanoseconds.
        Weight::from_parts(1_442_556_000, 1553716)
            .saturating_add(T::DbWeight::get().reads(515))
            .saturating_add(T::DbWeight::get().writes(511))
    }
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:0)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:4 w:4)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: System Account (r:4 w:4)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 4]`.
    fn exchange(_a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `456 + a * (352 ±0)`
        //  Estimated: `30663`
        // Minimum execution time: 7_140 nanoseconds.
        Weight::from_parts(44_891_000, 30663)
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(8))
    }
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:0)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    fn get_auto_resolve() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `456`
        //  Estimated: `5339`
        // Minimum execution time: 5_951 nanoseconds.
        Weight::from_parts(5_951_000, 5339).saturating_add(T::DbWeight::get().reads(2))
    }
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:0)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:0)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    fn has_failed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3222`
        //  Estimated: `83504`
        // Minimum execution time: 19_051 nanoseconds.
        Weight::from_parts(19_051_000, 83504).saturating_add(T::DbWeight::get().reads(5))
    }
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:510 w:510)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 4]`.
    /// The range of component `d` is `[1, 510]`.
    fn on_global_dispute(a: u32, d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1000 + a * (66 ±0) + d * (255 ±0)`
        //  Estimated: `157788 + d * (2726 ±0)`
        // Minimum execution time: 14_930 nanoseconds.
        Weight::from_parts(14_930_000, 157788)
            // Standard Error: 1_850_182
            .saturating_add(Weight::from_parts(1_407_745, 0).saturating_mul(a.into()))
            // Standard Error: 14_511
            .saturating_add(Weight::from_parts(2_752_653, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2726).saturating_mul(d.into()))
    }
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:510 w:510)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:0 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// The range of component `d` is `[1, 510]`.
    fn clear(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `911 + d * (255 ±0)`
        //  Estimated: `1545224`
        // Minimum execution time: 11_950 nanoseconds.
        Weight::from_parts(1_428_246_000, 1545224)
            .saturating_add(T::DbWeight::get().reads(512))
            .saturating_add(T::DbWeight::get().writes(512))
    }
}
