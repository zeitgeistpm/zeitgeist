// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_court
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-30, STEPS: `10`, REPEAT: 1000, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=1000
// --pallet=zrml_court
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./zrml/court/src/weights.rs
// --template=./misc/weight_template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_court (automatically generated)
pub trait WeightInfoZeitgeist {
    fn join_court(j: u32) -> Weight;
    fn prepare_exit_court(j: u32) -> Weight;
    fn exit_court_remove(j: u32) -> Weight;
    fn exit_court_set(j: u32) -> Weight;
    fn vote(d: u32) -> Weight;
    fn denounce_vote(d: u32) -> Weight;
    fn reveal_vote(d: u32) -> Weight;
    fn appeal(d: u32, a: u32, r: u32) -> Weight;
    fn reassign_juror_stakes(d: u32) -> Weight;
    fn set_inflation() -> Weight;
    fn handle_inflation(j: u32) -> Weight;
}

/// Weight functions for zrml_court (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    // Storage: Court JurorPool (r:1 w:1)
    // Storage: Court Jurors (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn join_court(j: u32) -> Weight {
        Weight::from_ref_time(46_917_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(56_000).saturating_mul(j.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: Court Jurors (r:1 w:0)
    // Storage: Court JurorPool (r:1 w:1)
    fn prepare_exit_court(j: u32) -> Weight {
        Weight::from_ref_time(23_787_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(49_000).saturating_mul(j.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Court Jurors (r:1 w:1)
    // Storage: Court JurorPool (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    fn exit_court_remove(j: u32) -> Weight {
        Weight::from_ref_time(38_554_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(28_000).saturating_mul(j.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Court Jurors (r:1 w:1)
    // Storage: Court JurorPool (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    fn exit_court_set(j: u32) -> Weight {
        Weight::from_ref_time(37_829_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(28_000).saturating_mul(j.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Court Courts (r:1 w:0)
    // Storage: Court Draws (r:1 w:1)
    fn vote(d: u32) -> Weight {
        Weight::from_ref_time(32_226_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(118_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Court Jurors (r:1 w:0)
    // Storage: Court Courts (r:1 w:0)
    // Storage: Court Draws (r:1 w:1)
    // Storage: System Account (r:2 w:2)
    fn denounce_vote(d: u32) -> Weight {
        Weight::from_ref_time(62_581_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(140_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: Court Jurors (r:1 w:0)
    // Storage: Court Courts (r:1 w:0)
    // Storage: Court Draws (r:1 w:1)
    fn reveal_vote(d: u32) -> Weight {
        Weight::from_ref_time(44_544_000)
            // Standard Error: 13_000
            .saturating_add(Weight::from_ref_time(794_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Court Courts (r:1 w:1)
    // Storage: MarketCommons Markets (r:1 w:0)
    // Storage: Court Draws (r:1 w:1)
    // Storage: Court JurorPool (r:1 w:1)
    // Storage: Court JurorsSelectionNonce (r:1 w:1)
    // Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    // Storage: Court Jurors (r:41 w:41)
    // Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:2 w:2)
    // Storage: Court RequestBlock (r:1 w:0)
    // Storage: Balances Reserves (r:1 w:1)
    fn appeal(j: u32, a: u32, _r: u32) -> Weight {
        Weight::from_ref_time(0)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(459_000).saturating_mul(j.into()))
            // Standard Error: 374_000
            .saturating_add(Weight::from_ref_time(258_163_000).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(11))
            .saturating_add(T::DbWeight::get().reads((28_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(8))
            .saturating_add(T::DbWeight::get().writes((28_u64).saturating_mul(a.into())))
    }
    // Storage: Court Courts (r:1 w:1)
    // Storage: Court Draws (r:1 w:1)
    // Storage: Court Jurors (r:1 w:1)
    // Storage: System Account (r:1 w:0)
    fn reassign_juror_stakes(d: u32) -> Weight {
        Weight::from_ref_time(37_281_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(4_316_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
    }
    // Storage: Court YearlyInflation (r:0 w:1)
    fn set_inflation() -> Weight {
        Weight::from_ref_time(6_000_000).saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Court YearlyInflation (r:1 w:0)
    // Storage: Court JurorPool (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    fn handle_inflation(j: u32) -> Weight {
        Weight::from_ref_time(0)
            // Standard Error: 4_000
            .saturating_add(Weight::from_ref_time(13_075_000).saturating_mul(j.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(j.into())))
    }
}
