// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_court
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-10-26`, STEPS: `10`, REPEAT: `1000`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=1000
// --pallet=zrml_court
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/weight_template.hbs
// --header=./HEADER_GPL3
// --output=./zrml/court/src/weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_court (automatically generated)
pub trait WeightInfoZeitgeist {
    fn join_court(j: u32) -> Weight;
    fn delegate(j: u32, d: u32) -> Weight;
    fn prepare_exit_court(j: u32) -> Weight;
    fn exit_court_remove() -> Weight;
    fn exit_court_set() -> Weight;
    fn vote(d: u32) -> Weight;
    fn denounce_vote(d: u32) -> Weight;
    fn reveal_vote(d: u32) -> Weight;
    fn appeal(j: u32, a: u32, r: u32, f: u32) -> Weight;
    fn reassign_court_stakes(d: u32) -> Weight;
    fn set_inflation() -> Weight;
    fn handle_inflation(j: u32) -> Weight;
    fn select_participants(a: u32) -> Weight;
    fn on_dispute(j: u32, r: u32) -> Weight;
    fn on_resolution(d: u32) -> Weight;
    fn exchange(a: u32) -> Weight;
    fn get_auto_resolve() -> Weight;
    fn has_failed() -> Weight;
    fn on_global_dispute(a: u32, d: u32) -> Weight;
    fn clear(d: u32) -> Weight;
}

/// Weight functions for zrml_court (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    /// Storage: Court CourtPool (r:1 w:1)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:1 w:1)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// The range of component `j` is `[0, 999]`.
    fn join_court(j: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1130 + j * (72 ±0)`
        //  Estimated: `78997`
        // Minimum execution time: 42_390 nanoseconds.
        Weight::from_parts(50_893_889, 78997)
            // Standard Error: 356
            .saturating_add(Weight::from_parts(131_671, 0).saturating_mul(j.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Court CourtPool (r:1 w:1)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:6 w:1)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// The range of component `j` is `[5, 999]`.
    /// The range of component `d` is `[1, 5]`.
    fn delegate(j: u32, d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + j * (74 ±0) + d * (685 ±0)`
        //  Estimated: `78997 + d * (2726 ±0)`
        // Minimum execution time: 71_251 nanoseconds.
        Weight::from_parts(42_003_599, 78997)
            // Standard Error: 489
            .saturating_add(Weight::from_parts(169_094, 0).saturating_mul(j.into()))
            // Standard Error: 106_757
            .saturating_add(Weight::from_parts(9_146_226, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 2726).saturating_mul(d.into()))
    }
    /// Storage: Court Participants (r:1 w:1)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:1)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// The range of component `j` is `[0, 999]`.
    fn prepare_exit_court(j: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1068 + j * (72 ±0)`
        //  Estimated: `75223`
        // Minimum execution time: 27_380 nanoseconds.
        Weight::from_parts(35_546_685, 75223)
            // Standard Error: 287
            .saturating_add(Weight::from_parts(106_675, 0).saturating_mul(j.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Court Participants (r:1 w:1)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn exit_court_remove() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `307`
        //  Estimated: `6500`
        // Minimum execution time: 37_730 nanoseconds.
        Weight::from_parts(43_521_000, 6500)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Court Participants (r:1 w:1)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn exit_court_set() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `307`
        //  Estimated: `6500`
        // Minimum execution time: 36_050 nanoseconds.
        Weight::from_parts(43_831_000, 6500)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Court Courts (r:1 w:0)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// The range of component `d` is `[1, 510]`.
    fn vote(d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `450 + d * (53 ±0)`
        //  Estimated: `155273`
        // Minimum execution time: 52_671 nanoseconds.
        Weight::from_parts(62_979_576, 155273)
            // Standard Error: 465
            .saturating_add(Weight::from_parts(118_018, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:1 w:0)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:0)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// The range of component `d` is `[1, 510]`.
    fn denounce_vote(d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1563 + d * (53 ±0)`
        //  Estimated: `163667`
        // Minimum execution time: 56_160 nanoseconds.
        Weight::from_parts(66_113_555, 163667)
            // Standard Error: 640
            .saturating_add(Weight::from_parts(164_953, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:1 w:0)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:0)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// The range of component `d` is `[1, 510]`.
    fn reveal_vote(d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2145 + d * (53 ±0)`
        //  Estimated: `163667`
        // Minimum execution time: 89_220 nanoseconds.
        Weight::from_parts(105_277_297, 163667)
            // Standard Error: 689
            .saturating_add(Weight::from_parts(114_305, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Court Courts (r:1 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:1)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court SelectionNonce (r:1 w:1)
    /// Proof: Court SelectionNonce (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    /// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:347 w:343)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Court RequestBlock (r:1 w:0)
    /// Proof: Court RequestBlock (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:2 w:2)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:1 w:1)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// The range of component `j` is `[255, 1000]`.
    /// The range of component `a` is `[0, 2]`.
    /// The range of component `r` is `[0, 62]`.
    /// The range of component `f` is `[0, 62]`.
    fn appeal(j: u32, a: u32, _r: u32, _f: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + j * (132 ±0) + a * (35486 ±0) + r * (16 ±0) + f * (16 ±0)`
        //  Estimated: `515439 + j * (203 ±1) + a * (314898 ±368)`
        // Minimum execution time: 3_470_854 nanoseconds.
        Weight::from_parts(3_772_958_000, 515439)
            // Standard Error: 25_467
            .saturating_add(Weight::from_parts(6_401_836, 0).saturating_mul(j.into()))
            // Standard Error: 9_089_079
            .saturating_add(Weight::from_parts(4_296_122_826, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(109))
            .saturating_add(T::DbWeight::get().reads((116_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(100))
            .saturating_add(T::DbWeight::get().writes((116_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 203).saturating_mul(j.into()))
            .saturating_add(Weight::from_parts(0, 314898).saturating_mul(a.into()))
    }
    /// Storage: Court Courts (r:1 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:510 w:510)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: System Account (r:511 w:510)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `d` is `[5, 510]`.
    fn reassign_court_stakes(d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `945 + d * (587 ±0)`
        //  Estimated: `157880 + d * (5333 ±0)`
        // Minimum execution time: 148_160 nanoseconds.
        Weight::from_parts(151_951_000, 157880)
            // Standard Error: 38_869
            .saturating_add(Weight::from_parts(66_881_062, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 5333).saturating_mul(d.into()))
    }
    /// Storage: Court YearlyInflation (r:0 w:1)
    /// Proof: Court YearlyInflation (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    fn set_inflation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_650 nanoseconds.
        Weight::from_parts(14_450_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Court YearlyInflation (r:1 w:0)
    /// Proof: Court YearlyInflation (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:0)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: System Account (r:1000 w:1000)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `j` is `[1, 1000]`.
    fn handle_inflation(j: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + j * (243 ±0)`
        //  Estimated: `72996 + j * (2607 ±0)`
        // Minimum execution time: 33_280 nanoseconds.
        Weight::from_parts(34_480_000, 72996)
            // Standard Error: 9_174
            .saturating_add(Weight::from_parts(19_968_654, 0).saturating_mul(j.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(j.into())))
            .saturating_add(Weight::from_parts(0, 2607).saturating_mul(j.into()))
    }
    /// Storage: Court CourtPool (r:1 w:1)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court SelectionNonce (r:1 w:1)
    /// Proof: Court SelectionNonce (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    /// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:240 w:236)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 3]`.
    fn select_participants(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `84052 + a * (19595 ±0)`
        //  Estimated: `133335 + a * (162878 ±713)`
        // Minimum execution time: 1_523_714 nanoseconds.
        Weight::from_parts(864_759_111, 133335)
            // Standard Error: 18_632_603
            .saturating_add(Weight::from_parts(3_449_129_449, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(24))
            .saturating_add(T::DbWeight::get().reads((60_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(19))
            .saturating_add(T::DbWeight::get().writes((60_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 162878).saturating_mul(a.into()))
    }
    /// Storage: Court NextCourtId (r:1 w:1)
    /// Proof: Court NextCourtId (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:1)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court SelectionNonce (r:1 w:1)
    /// Proof: Court SelectionNonce (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    /// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:31 w:31)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Court RequestBlock (r:1 w:0)
    /// Proof: Court RequestBlock (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    /// Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    /// Proof: PredictionMarkets MarketIdsPerDisputeBlock (max_values: None, max_size: Some(1042), added: 3517, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:0 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court CourtIdToMarketId (r:0 w:1)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court MarketIdToCourtId (r:0 w:1)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:0 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// The range of component `j` is `[31, 1000]`.
    /// The range of component `r` is `[0, 62]`.
    fn on_dispute(j: u32, r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `6073 + j * (80 ±0) + r * (16 ±0)`
        //  Estimated: `153295 + j * (11 ±0) + r * (29 ±1)`
        // Minimum execution time: 298_061 nanoseconds.
        Weight::from_parts(348_386_954, 153295)
            // Standard Error: 1_339
            .saturating_add(Weight::from_parts(259_856, 0).saturating_mul(j.into()))
            // Standard Error: 20_722
            .saturating_add(Weight::from_parts(277_477, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(33))
            .saturating_add(T::DbWeight::get().writes(35))
            .saturating_add(Weight::from_parts(0, 11).saturating_mul(j.into()))
            .saturating_add(Weight::from_parts(0, 29).saturating_mul(r.into()))
    }
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:0)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:510 w:510)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// The range of component `d` is `[1, 510]`.
    fn on_resolution(d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `968 + d * (256 ±0)`
        //  Estimated: `163456 + d * (2726 ±0)`
        // Minimum execution time: 45_351 nanoseconds.
        Weight::from_parts(46_740_000, 163456)
            // Standard Error: 5_341
            .saturating_add(Weight::from_parts(7_102_104, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2726).saturating_mul(d.into()))
    }
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:0)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Balances Reserves (r:4 w:4)
    /// Proof: Balances Reserves (max_values: None, max_size: Some(1249), added: 3724, mode: MaxEncodedLen)
    /// Storage: System Account (r:4 w:4)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 4]`.
    fn exchange(a: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `420 + a * (352 ±0)`
        //  Estimated: `5339 + a * (6331 ±0)`
        // Minimum execution time: 14_230 nanoseconds.
        Weight::from_parts(17_978_307, 5339)
            // Standard Error: 68_789
            .saturating_add(Weight::from_parts(31_714_281, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
            .saturating_add(Weight::from_parts(0, 6331).saturating_mul(a.into()))
    }
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:0)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    fn get_auto_resolve() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `423`
        //  Estimated: `5339`
        // Minimum execution time: 11_790 nanoseconds.
        Weight::from_parts(12_930_000, 5339).saturating_add(T::DbWeight::get().reads(2))
    }
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court CourtPool (r:1 w:0)
    /// Proof: Court CourtPool (max_values: Some(1), max_size: Some(72002), added: 72497, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:0)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court CourtIdToMarketId (r:1 w:0)
    /// Proof: Court CourtIdToMarketId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: MarketCommons Markets (r:1 w:0)
    /// Proof: MarketCommons Markets (max_values: None, max_size: Some(678), added: 3153, mode: MaxEncodedLen)
    fn has_failed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3189`
        //  Estimated: `83504`
        // Minimum execution time: 36_060 nanoseconds.
        Weight::from_parts(43_690_000, 83504).saturating_add(T::DbWeight::get().reads(5))
    }
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:1 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:510 w:510)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 4]`.
    /// The range of component `d` is `[1, 510]`.
    fn on_global_dispute(_a: u32, d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `482 + a * (66 ±0) + d * (256 ±0)`
        //  Estimated: `157788 + d * (2726 ±0)`
        // Minimum execution time: 30_490 nanoseconds.
        Weight::from_parts(12_392_980, 157788)
            // Standard Error: 8_466
            .saturating_add(Weight::from_parts(7_354_052, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2726).saturating_mul(d.into()))
    }
    /// Storage: Court MarketIdToCourtId (r:1 w:0)
    /// Proof: Court MarketIdToCourtId (max_values: None, max_size: Some(40), added: 2515, mode: MaxEncodedLen)
    /// Storage: Court SelectedDraws (r:1 w:1)
    /// Proof: Court SelectedDraws (max_values: None, max_size: Some(149974), added: 152449, mode: MaxEncodedLen)
    /// Storage: Court Participants (r:510 w:510)
    /// Proof: Court Participants (max_values: None, max_size: Some(251), added: 2726, mode: MaxEncodedLen)
    /// Storage: Court Courts (r:0 w:1)
    /// Proof: Court Courts (max_values: None, max_size: Some(349), added: 2824, mode: MaxEncodedLen)
    /// The range of component `d` is `[1, 510]`.
    fn clear(d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `397 + d * (256 ±0)`
        //  Estimated: `154964 + d * (2726 ±0)`
        // Minimum execution time: 24_940 nanoseconds.
        Weight::from_parts(25_650_000, 154964)
            // Standard Error: 5_781
            .saturating_add(Weight::from_parts(6_956_726, 0).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
            .saturating_add(Weight::from_parts(0, 2726).saturating_mul(d.into()))
    }
}
