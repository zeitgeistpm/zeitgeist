// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for zrml_court
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-26, STEPS: `10`, REPEAT: 1000, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=10
// --repeat=1000
// --pallet=zrml_court
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./zrml/court/src/weights.rs
// --template=./misc/weight_template.hbs

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{traits::Get, weights::Weight};

///  Trait containing the required functions for weight retrival within
/// zrml_court (automatically generated)
pub trait WeightInfoZeitgeist {
    fn join_court(j: u32) -> Weight;
    fn delegate(j: u32, d: u32) -> Weight;
    fn prepare_exit_court(j: u32) -> Weight;
    fn exit_court_remove() -> Weight;
    fn exit_court_set() -> Weight;
    fn vote(d: u32) -> Weight;
    fn denounce_vote(d: u32) -> Weight;
    fn reveal_vote(d: u32) -> Weight;
    fn appeal(j: u32, a: u32, r: u32, f: u32) -> Weight;
    fn reassign_juror_stakes(d: u32) -> Weight;
    fn set_inflation() -> Weight;
    fn handle_inflation(j: u32) -> Weight;
    fn select_jurors(a: u32) -> Weight;
    fn on_dispute(j: u32, r: u32) -> Weight;
    fn on_resolution(d: u32) -> Weight;
    fn exchange(a: u32) -> Weight;
    fn get_auto_resolve() -> Weight;
    fn has_failed() -> Weight;
    fn on_global_dispute(a: u32, d: u32) -> Weight;
    fn clear(d: u32) -> Weight;
}

/// Weight functions for zrml_court (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfoZeitgeist for WeightInfo<T> {
    // Storage: Court JurorPool (r:1 w:1)
    // Storage: Court Jurors (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn join_court(j: u32) -> Weight {
        Weight::from_ref_time(45_966_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(83_000).saturating_mul(j.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: Court JurorPool (r:1 w:1)
    // Storage: Court Jurors (r:6 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn delegate(j: u32, d: u32) -> Weight {
        Weight::from_ref_time(41_432_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(134_000).saturating_mul(j.into()))
            // Standard Error: 92_000
            .saturating_add(Weight::from_ref_time(1_358_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: Court Jurors (r:1 w:1)
    // Storage: Court JurorPool (r:1 w:1)
    fn prepare_exit_court(j: u32) -> Weight {
        Weight::from_ref_time(19_093_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(86_000).saturating_mul(j.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Court Jurors (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn exit_court_remove() -> Weight {
        Weight::from_ref_time(39_000_000)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Court Jurors (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn exit_court_set() -> Weight {
        Weight::from_ref_time(37_000_000)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Court Courts (r:1 w:0)
    // Storage: Court SelectedDraws (r:1 w:1)
    fn vote(d: u32) -> Weight {
        Weight::from_ref_time(50_448_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(99_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Court CourtIdToMarketId (r:1 w:0)
    // Storage: MarketCommons Markets (r:1 w:0)
    // Storage: Court Jurors (r:1 w:0)
    // Storage: Court Courts (r:1 w:0)
    // Storage: Court SelectedDraws (r:1 w:1)
    fn denounce_vote(d: u32) -> Weight {
        Weight::from_ref_time(42_693_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(131_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Court CourtIdToMarketId (r:1 w:0)
    // Storage: MarketCommons Markets (r:1 w:0)
    // Storage: Court Jurors (r:1 w:0)
    // Storage: Court Courts (r:1 w:0)
    // Storage: Court SelectedDraws (r:1 w:1)
    fn reveal_vote(_d: u32) -> Weight {
        Weight::from_ref_time(80_215_000)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Court Courts (r:1 w:1)
    // Storage: Court CourtIdToMarketId (r:1 w:0)
    // Storage: MarketCommons Markets (r:1 w:0)
    // Storage: Court SelectedDraws (r:1 w:1)
    // Storage: Court JurorPool (r:1 w:1)
    // Storage: Court JurorsSelectionNonce (r:1 w:1)
    // Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    // Storage: Court Jurors (r:42 w:41)
    // Storage: Court RequestBlock (r:1 w:0)
    // Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:2 w:2)
    // Storage: Balances Reserves (r:1 w:1)
    fn appeal(j: u32, a: u32, _r: u32, _f: u32) -> Weight {
        Weight::from_ref_time(0)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(1_377_000).saturating_mul(j.into()))
            // Standard Error: 689_000
            .saturating_add(Weight::from_ref_time(638_909_000).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(14))
            .saturating_add(T::DbWeight::get().reads((28_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(8))
            .saturating_add(T::DbWeight::get().writes((28_u64).saturating_mul(a.into())))
    }
    // Storage: Court Courts (r:1 w:1)
    // Storage: Court SelectedDraws (r:1 w:1)
    // Storage: Court Jurors (r:5 w:5)
    // Storage: System Account (r:6 w:5)
    fn reassign_juror_stakes(d: u32) -> Weight {
        Weight::from_ref_time(0)
            // Standard Error: 13_000
            .saturating_add(Weight::from_ref_time(40_759_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(d.into())))
    }
    // Storage: Court YearlyInflation (r:0 w:1)
    fn set_inflation() -> Weight {
        Weight::from_ref_time(6_000_000).saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Court YearlyInflation (r:1 w:0)
    // Storage: Court JurorPool (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    fn handle_inflation(j: u32) -> Weight {
        Weight::from_ref_time(0)
            // Standard Error: 4_000
            .saturating_add(Weight::from_ref_time(13_078_000).saturating_mul(j.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(j.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(j.into())))
    }
    // Storage: Court JurorPool (r:1 w:1)
    // Storage: Court JurorsSelectionNonce (r:1 w:1)
    // Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    // Storage: Court Jurors (r:125 w:120)
    fn select_jurors(a: u32) -> Weight {
        Weight::from_ref_time(2_518_341_000)
            // Standard Error: 34_748_000
            .saturating_add(Weight::from_ref_time(7_367_178_000).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(103))
            .saturating_add(T::DbWeight::get().reads((160_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes(97))
            .saturating_add(T::DbWeight::get().writes((161_u64).saturating_mul(a.into())))
    }
    // Storage: Court NextCourtId (r:1 w:1)
    // Storage: Court JurorPool (r:1 w:1)
    // Storage: Court JurorsSelectionNonce (r:1 w:1)
    // Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
    // Storage: Court Jurors (r:4 w:4)
    // Storage: Court RequestBlock (r:1 w:0)
    // Storage: PredictionMarkets MarketIdsPerDisputeBlock (r:1 w:1)
    // Storage: Court SelectedDraws (r:0 w:1)
    // Storage: Court CourtIdToMarketId (r:0 w:1)
    // Storage: Court MarketIdToCourtId (r:0 w:1)
    // Storage: Court Courts (r:0 w:1)
    fn on_dispute(j: u32, r: u32) -> Weight {
        Weight::from_ref_time(55_203_000)
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(148_000).saturating_mul(j.into()))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(18_000).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(11))
            .saturating_add(T::DbWeight::get().writes(13))
    }
    // Storage: Court MarketIdToCourtId (r:1 w:0)
    // Storage: Court Courts (r:1 w:1)
    // Storage: Court SelectedDraws (r:1 w:0)
    // Storage: Court CourtIdToMarketId (r:1 w:0)
    // Storage: MarketCommons Markets (r:1 w:0)
    // Storage: Court Jurors (r:1 w:1)
    fn on_resolution(d: u32) -> Weight {
        Weight::from_ref_time(19_040_000)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(4_329_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
    }
    // Storage: Court MarketIdToCourtId (r:1 w:0)
    // Storage: Court Courts (r:1 w:0)
    // Storage: Balances Reserves (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn exchange(a: u32) -> Weight {
        Weight::from_ref_time(18_796_000)
            // Standard Error: 50_000
            .saturating_add(Weight::from_ref_time(20_739_000).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(a.into())))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(a.into())))
    }
    // Storage: Court MarketIdToCourtId (r:1 w:0)
    // Storage: Court Courts (r:1 w:0)
    fn get_auto_resolve() -> Weight {
        Weight::from_ref_time(8_000_000).saturating_add(T::DbWeight::get().reads(2))
    }
    // Storage: Court MarketIdToCourtId (r:1 w:0)
    // Storage: Court JurorPool (r:1 w:0)
    // Storage: Court Courts (r:1 w:0)
    // Storage: Court CourtIdToMarketId (r:1 w:0)
    // Storage: MarketCommons Markets (r:1 w:0)
    fn has_failed() -> Weight {
        Weight::from_ref_time(23_000_000).saturating_add(T::DbWeight::get().reads(5))
    }
    // Storage: Court MarketIdToCourtId (r:1 w:0)
    // Storage: Court Courts (r:1 w:1)
    // Storage: Court SelectedDraws (r:1 w:1)
    // Storage: Court Jurors (r:94 w:94)
    fn on_global_dispute(a: u32, d: u32) -> Weight {
        Weight::from_ref_time(11_100_000)
            // Standard Error: 18_000
            .saturating_add(Weight::from_ref_time(766_000).saturating_mul(a.into()))
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(4_017_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
    }
    // Storage: Court MarketIdToCourtId (r:1 w:0)
    // Storage: Court SelectedDraws (r:1 w:1)
    // Storage: Court Jurors (r:1 w:1)
    // Storage: Court Courts (r:0 w:1)
    fn clear(d: u32) -> Weight {
        Weight::from_ref_time(12_162_000)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(3_963_000).saturating_mul(d.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(d.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(d.into())))
    }
}
