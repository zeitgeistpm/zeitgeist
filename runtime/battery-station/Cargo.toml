[build-dependencies]
substrate-wasm-builder = { workspace = true }

[dependencies]
frame-executive = { workspace = true }
frame-metadata-hash-extension = { workspace = true }
frame-support = { workspace = true }
frame-system = { workspace = true }
frame-system-rpc-runtime-api = { workspace = true }
orml-benchmarking = { workspace = true, optional = true }
orml-currencies = { workspace = true }
orml-tokens = { workspace = true }
orml-traits = { workspace = true }
pallet-asset-tx-payment = { workspace = true }
pallet-balances = { workspace = true }
pallet-bounties = { workspace = true }
pallet-collective = { workspace = true }
pallet-democracy = { workspace = true }
pallet-identity = { workspace = true }
pallet-insecure-randomness-collective-flip = { workspace = true }
pallet-membership = { workspace = true }
pallet-multisig = { workspace = true }
pallet-preimage = { workspace = true }
pallet-proxy = { workspace = true }
pallet-scheduler = { workspace = true }
pallet-sudo = { workspace = true }
pallet-timestamp = { workspace = true }
pallet-transaction-payment = { workspace = true }
pallet-transaction-payment-rpc-runtime-api = { workspace = true }
pallet-treasury = { workspace = true }
pallet-utility = { workspace = true }
pallet-vesting = { workspace = true }
parity-scale-codec = { workspace = true, features = ["derive", "max-encoded-len"] }
polkadot-primitives = { workspace = true }
scale-info = { workspace = true, features = ["derive"] }
sp-api = { workspace = true }
sp-block-builder = { workspace = true }
sp-consensus-slots = { workspace = true }
sp-core = { workspace = true }
sp-debug-derive = { workspace = true }
sp-genesis-builder = { workspace = true }
sp-inherents = { workspace = true }
sp-offchain = { workspace = true }
sp-runtime = { workspace = true }
sp-session = { workspace = true }
sp-std = { workspace = true }
sp-transaction-pool = { workspace = true }
sp-version = { workspace = true }

# Try-Runtime

frame-try-runtime = { workspace = true, optional = true }

# Benchmark

frame-benchmarking = { workspace = true, optional = true }
frame-system-benchmarking = { workspace = true, optional = true }

# Cumulus

cumulus-pallet-dmp-queue = { workspace = true, optional = true }
cumulus-pallet-parachain-system = { workspace = true, optional = true }
cumulus-pallet-xcm = { workspace = true, optional = true }
cumulus-pallet-xcmp-queue = { workspace = true, optional = true }
cumulus-primitives-core = { workspace = true, optional = true }
cumulus-primitives-storage-weight-reclaim = { workspace = true }
cumulus-primitives-timestamp = { workspace = true, optional = true }
cumulus-primitives-utility = { workspace = true, optional = true }
parachain-info = { workspace = true, optional = true }
parachains-common = { workspace = true, optional = true }

# Parachain
async-backing-primitives = { workspace = true, optional = true }
nimbus-primitives = { workspace = true, optional = true }
pallet-async-backing = { workspace = true, optional = true }
pallet-author-inherent = { workspace = true, optional = true }
pallet-author-mapping = { workspace = true, optional = true }
pallet-author-slot-filter = { workspace = true, optional = true }
pallet-parachain-staking = { workspace = true, optional = true }
session-keys-primitives = { workspace = true, optional = true }


# Polkadot

polkadot-parachain-primitives = { workspace = true, optional = true }
polkadot-runtime-common = { workspace = true, optional = true }

# Standalone

pallet-aura = { workspace = true }
pallet-grandpa = { workspace = true }
sp-consensus-aura = { workspace = true }
sp-consensus-grandpa = { workspace = true }

# Utility
cfg-if = { workspace = true }
hex-literal = { workspace = true, optional = true }
log = { workspace = true, optional = true }
serde_json = { workspace = true }

# XCM
orml-asset-registry = { workspace = true, optional = true }
orml-unknown-tokens = { workspace = true, optional = true }
orml-xcm-support = { workspace = true, optional = true }
orml-xtokens = { workspace = true, optional = true }
pallet-message-queue = { workspace = true, optional = true }
pallet-xcm = { workspace = true, optional = true }
polkadot-runtime-parachains = { workspace = true, optional = true }
xcm = { workspace = true, optional = true }
xcm-builder = { workspace = true, optional = true }
xcm-executor = { workspace = true, optional = true }

# Zeitgeist

common-runtime = { workspace = true }
zeitgeist-primitives = { workspace = true }
zrml-authorized = { workspace = true }
zrml-combinatorial-tokens = { workspace = true }
zrml-court = { workspace = true }
zrml-futarchy = { workspace = true }
zrml-global-disputes = { workspace = true, optional = true }
zrml-hybrid-router = { workspace = true }
zrml-market-commons = { workspace = true }
zrml-neo-swaps = { workspace = true }
zrml-orderbook = { workspace = true }
zrml-parimutuel = { workspace = true }
zrml-prediction-markets = { workspace = true }
zrml-styx = { workspace = true }
zrml-swaps = { workspace = true }
zrml-swaps-runtime-api = { workspace = true }

[dev-dependencies]
env_logger = { workspace = true }
pallet-im-online = { workspace = true, features = ["default"] }
rococo-emulated-chain = { workspace = true }
rococo-runtime = { workspace = true }
sp-authority-discovery = { workspace = true, features = ["default"] }
sp-consensus-babe = { workspace = true, features = ["default"] }
sp-consensus-beefy = { workspace = true, features = ["default"] }
sp-io = { workspace = true, features = ["default"] }
test-case = { workspace = true }
xcm-emulator = { workspace = true }

[features]
default = ["std"]
parachain = [
    "zrml-prediction-markets/parachain",
    # Cumulus

    "cumulus-pallet-dmp-queue",
    "cumulus-pallet-parachain-system",
    "cumulus-pallet-xcm",
    "cumulus-pallet-xcmp-queue",
    "cumulus-primitives-core",
    "cumulus-primitives-timestamp",
    "cumulus-primitives-utility",
    "parachain-info",
    "parachains-common",

    # Parachain

    "nimbus-primitives",
    "pallet-author-inherent",
    "pallet-author-mapping",
    "pallet-author-slot-filter",
    "pallet-parachain-staking",
    "polkadot-parachain-primitives",
    "polkadot-runtime-common",
    "session-keys-primitives",
    "pallet-async-backing",
    "async-backing-primitives",

    # XCM

    "orml-asset-registry",
    "orml-unknown-tokens",
    "orml-xcm-support",
    "orml-xtokens",
    "pallet-message-queue",
    "pallet-xcm",
    "polkadot-runtime-parachains",
    "xcm-builder",
    "xcm-executor",
    "xcm",

    # Misc

    "common-runtime/parachain",
    "log",
]
runtime-benchmarks = [
    "cumulus-pallet-parachain-system?/runtime-benchmarks",
    "cumulus-pallet-xcmp-queue?/runtime-benchmarks",
    "frame-benchmarking/runtime-benchmarks",
    "frame-support/runtime-benchmarks",
    "frame-system-benchmarking/runtime-benchmarks",
    "frame-system/runtime-benchmarks",
    "hex-literal",
    "orml-asset-registry?/runtime-benchmarks",
    "orml-benchmarking",
    "orml-tokens/runtime-benchmarks",
    "orml-xtokens?/runtime-benchmarks",
    "pallet-author-inherent?/runtime-benchmarks",
    "pallet-author-mapping?/runtime-benchmarks",
    "pallet-author-slot-filter?/runtime-benchmarks",
    "pallet-balances/runtime-benchmarks",
    "pallet-bounties/runtime-benchmarks",
    "pallet-collective/runtime-benchmarks",
    "pallet-democracy/runtime-benchmarks",
    "pallet-grandpa/runtime-benchmarks",
    "pallet-identity/runtime-benchmarks",
    "pallet-membership/runtime-benchmarks",
    "pallet-multisig/runtime-benchmarks",
    "pallet-preimage/runtime-benchmarks",
    "pallet-proxy/runtime-benchmarks",
    "pallet-scheduler/runtime-benchmarks",
    "pallet-timestamp/runtime-benchmarks",
    "pallet-treasury/runtime-benchmarks",
    "pallet-utility/runtime-benchmarks",
    "pallet-vesting/runtime-benchmarks",
    "pallet-xcm?/runtime-benchmarks",
    "pallet-parachain-staking?/runtime-benchmarks",
    "rococo-runtime/runtime-benchmarks",
    "nimbus-primitives?/runtime-benchmarks",
    "session-keys-primitives?/runtime-benchmarks",
    "sp-runtime/runtime-benchmarks",
    "xcm-builder?/runtime-benchmarks",
    "zrml-authorized/runtime-benchmarks",
    "zrml-combinatorial-tokens/runtime-benchmarks",
    "zrml-court/runtime-benchmarks",
    "zrml-futarchy/runtime-benchmarks",
    "zrml-hybrid-router/runtime-benchmarks",
    "zrml-neo-swaps/runtime-benchmarks",
    "zrml-parimutuel/runtime-benchmarks",
    "zrml-prediction-markets/runtime-benchmarks",
    "zrml-global-disputes/runtime-benchmarks",
    "zrml-styx/runtime-benchmarks",
    "zrml-swaps/runtime-benchmarks",
    "zrml-orderbook/runtime-benchmarks",
]
std = [
    "async-backing-primitives?/std",
    "frame-executive/std",
    "frame-metadata-hash-extension/std",
    "frame-support/std",
    "frame-system-rpc-runtime-api/std",
    "frame-system/std",
    "hex-literal",
    "log/std",
    "orml-benchmarking/std",
    "orml-currencies/std",
    "orml-tokens/std",
    "orml-traits/std",
    "pallet-asset-tx-payment/std",
    "pallet-async-backing?/std",
    "pallet-balances/std",
    "pallet-bounties/std",
    "pallet-collective/std",
    "pallet-democracy/std",
    "pallet-identity/std",
    "pallet-membership/std",
    "pallet-multisig/std",
    "pallet-preimage/std",
    "pallet-proxy/std",
    "pallet-insecure-randomness-collective-flip/std",
    "pallet-scheduler/std",
    "pallet-sudo/std",
    "pallet-timestamp/std",
    "pallet-transaction-payment-rpc-runtime-api/std",
    "pallet-transaction-payment/std",
    "pallet-treasury/std",
    "pallet-utility/std",
    "pallet-vesting/std",
    "parity-scale-codec/std",
    "polkadot-primitives/std",
    "scale-info/std",
    "serde_json/std",
    "sp-api/std",
    "sp-block-builder/std",
    "sp-consensus-slots/std",
    "sp-core/std",
    "sp-genesis-builder/std",
    "sp-inherents/std",
    "sp-offchain/std",
    "sp-runtime/std",
    "sp-session/std",
    "sp-transaction-pool/std",
    "sp-version/std",

    # Try-Runtime
    "frame-try-runtime/std",

    # Benchmark

    "frame-benchmarking?/std",
    "frame-system-benchmarking?/std",

    # Cumulus

    "cumulus-pallet-dmp-queue?/std",
    "cumulus-pallet-parachain-system?/std",
    "cumulus-pallet-xcm?/std",
    "cumulus-pallet-xcmp-queue?/std",
    "cumulus-primitives-core?/std",
    "cumulus-primitives-timestamp?/std",
    "cumulus-primitives-utility?/std",
    "parachain-info?/std",
    "parachains-common?/std",

    # Parachain

    "nimbus-primitives?/std",
    "pallet-author-inherent?/std",
    "pallet-author-mapping?/std",
    "pallet-author-slot-filter?/std",
    "pallet-parachain-staking?/std",
    "session-keys-primitives?/std",

    # Polkadot

    "pallet-xcm?/std",
    "polkadot-parachain-primitives?/std",
    "polkadot-runtime-common?/std",

    # Standalone

    "pallet-aura/std",
    "pallet-grandpa/std",
    "sp-consensus-aura/std",
    "sp-consensus-grandpa/std",

    # XCM

    "orml-asset-registry?/std",
    "orml-unknown-tokens?/std",
    "orml-xcm-support?/std",
    "orml-xtokens?/std",
    "pallet-message-queue?/std",
    "pallet-xcm?/std",
    "polkadot-runtime-parachains?/std",
    "xcm-builder?/std",
    "xcm-executor?/std",
    "xcm?/std",

    # Zeitgeist

    "zeitgeist-primitives/std",
    "zrml-authorized/std",
    "zrml-combinatorial-tokens/std",
    "zrml-court/std",
    "zrml-futarchy/std",
    "zrml-hybrid-router/std",
    "zrml-market-commons/std",
    "zrml-neo-swaps/std",
    "zrml-parimutuel/std",
    "zrml-prediction-markets/std",
    "zrml-global-disputes/std",
    "zrml-styx/std",
    "zrml-swaps-runtime-api/std",
    "zrml-swaps/std",
    "zrml-orderbook/std",
]
try-runtime = [
    "frame-executive/try-runtime",
    "frame-try-runtime/try-runtime",

    # For every pallet in the runtime include try-runtime

    # System runtime pallets
    "frame-system/try-runtime",
    "frame-support/try-runtime",
    "pallet-timestamp/try-runtime",
    "pallet-insecure-randomness-collective-flip/try-runtime",
    "pallet-scheduler/try-runtime",
    "pallet-preimage/try-runtime",

    # Money runtime pallets
    "pallet-asset-tx-payment/try-runtime",
    "pallet-balances/try-runtime",
    "pallet-bounties/try-runtime",
    "pallet-transaction-payment/try-runtime",
    "pallet-treasury/try-runtime",
    "pallet-vesting/try-runtime",
    "pallet-multisig/try-runtime",

    # Governance runtime pallets
    "pallet-democracy/try-runtime",
    "pallet-collective/try-runtime",
    "pallet-membership/try-runtime",

    # Other Parity runtime pallets
    "pallet-identity/try-runtime",
    "pallet-utility/try-runtime",

    # ORML runtime pallets
    "orml-asset-registry?/try-runtime",
    "orml-currencies/try-runtime",
    "orml-tokens/try-runtime",
    "orml-unknown-tokens?/try-runtime",
    "orml-xtokens?/try-runtime",

    # Zeitgeist runtime pallets
    "zrml-authorized/try-runtime",
    "zrml-combinatorial-tokens/try-runtime",
    "zrml-court/try-runtime",
    "zrml-futarchy/try-runtime",
    "zrml-hybrid-router/try-runtime",
    "zrml-market-commons/try-runtime",
    "zrml-neo-swaps/try-runtime",
    "zrml-parimutuel/try-runtime",
    "zrml-prediction-markets/try-runtime",
    "zrml-global-disputes/try-runtime",
    "zrml-styx/try-runtime",
    "zrml-swaps/try-runtime",
    "zrml-orderbook/try-runtime",

    # Parachain
    "pallet-async-backing?/try-runtime",
    "pallet-author-inherent?/try-runtime",
    "pallet-author-mapping?/try-runtime",
    "pallet-author-slot-filter?/try-runtime",
    "pallet-parachain-staking?/try-runtime",
    # Required by pallet-parachain-staking@v0.26.1
    "parity-scale-codec/full",
    "pallet-proxy/try-runtime",
    "pallet-grandpa/try-runtime",
    "pallet-aura/try-runtime",
    "pallet-sudo/try-runtime",
    "pallet-xcm?/try-runtime",

    # Cumulus
    "cumulus-pallet-parachain-system?/try-runtime",
    "cumulus-pallet-xcm?/try-runtime",
    "cumulus-pallet-dmp-queue?/try-runtime",
    "cumulus-pallet-xcmp-queue?/try-runtime",
    "parachain-info?/try-runtime",
]
# Enable the metadata hash generation in the wasm builder.
metadata-hash = ["substrate-wasm-builder/metadata-hash"]
# When enabled, the GenesisBuilder API will be supported, GenesisConfig shall be
# stripped from the final binary
disable-genesis-builder = []
# Allow to print logs details (no wasm:stripped)
force-debug = ["sp-debug-derive/force-debug"]
# This is necessary to benchmark the pallet message queue
use-noop-message-processor = []

[package]
authors = ["Zeitgeist PM <contact@zeitgeist.pm>"]
edition.workspace = true
name = "battery-station-runtime"
version = "0.6.0"

[package.metadata.docs.rs]
targets = ["x86_64-unknown-linux-gnu"]
