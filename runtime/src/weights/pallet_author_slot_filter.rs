//! Autogenerated weights for pallet_author_slot_filter
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-03-07, STEPS: `32`, REPEAT: 64, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/moonbeam
// benchmark
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_author_slot_filter
// --extrinsic
// *
// --steps
// 32
// --repeat
// 64
// --template=./benchmarking/frame-weight-template.hbs
// --output
// /tmp/
// --record-proof

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions for pallet_author_slot_filter (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_author_slot_filter::weights::WeightInfo for WeightInfo<T> {
	fn set_eligible() -> Weight {
		(13_250_000 as Weight).saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}