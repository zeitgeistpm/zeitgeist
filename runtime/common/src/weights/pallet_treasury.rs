// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_treasury
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-09-19`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_treasury
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_treasury (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_treasury::weights::WeightInfo for WeightInfo<T> {
    /// Storage: Treasury ProposalCount (r:1 w:1)
    /// Proof: Treasury ProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Treasury Approvals (r:1 w:1)
    /// Proof: Treasury Approvals (max_values: Some(1), max_size: Some(402), added: 897, mode: MaxEncodedLen)
    /// Storage: Treasury Proposals (r:0 w:1)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
    fn spend() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42`
        //  Estimated: `1396`
        // Minimum execution time: 23_110 nanoseconds.
        Weight::from_parts(28_271_000, 1396)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Treasury ProposalCount (r:1 w:1)
    /// Proof: Treasury ProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Treasury Proposals (r:0 w:1)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
    fn propose_spend() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `179`
        //  Estimated: `499`
        // Minimum execution time: 38_230 nanoseconds.
        Weight::from_parts(45_180_000, 499)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Treasury Proposals (r:1 w:1)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn reject_proposal() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `545`
        //  Estimated: `7797`
        // Minimum execution time: 56_670 nanoseconds.
        Weight::from_parts(58_110_000, 7797)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Treasury Proposals (r:1 w:0)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
    /// Storage: Treasury Approvals (r:1 w:1)
    /// Proof: Treasury Approvals (max_values: Some(1), max_size: Some(402), added: 897, mode: MaxEncodedLen)
    fn approve_proposal(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `500 + p * (8 ±0)`
        //  Estimated: `3480`
        // Minimum execution time: 16_440 nanoseconds.
        Weight::from_parts(24_466_536, 3480)
            // Standard Error: 5_719
            .saturating_add(Weight::from_ref_time(7_361).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Treasury Approvals (r:1 w:1)
    /// Proof: Treasury Approvals (max_values: Some(1), max_size: Some(402), added: 897, mode: MaxEncodedLen)
    fn remove_approval() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `127`
        //  Estimated: `897`
        // Minimum execution time: 13_300 nanoseconds.
        Weight::from_parts(13_990_000, 897)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: System Account (r:201 w:201)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Treasury Deactivated (r:1 w:1)
    /// Proof: Treasury Deactivated (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: Balances InactiveIssuance (r:1 w:1)
    /// Proof: Balances InactiveIssuance (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
    /// Storage: Treasury Approvals (r:1 w:1)
    /// Proof: Treasury Approvals (max_values: Some(1), max_size: Some(402), added: 897, mode: MaxEncodedLen)
    /// Storage: Treasury Proposals (r:100 w:100)
    /// Proof: Treasury Proposals (max_values: None, max_size: Some(108), added: 2583, mode: MaxEncodedLen)
    /// Storage: Bounties BountyApprovals (r:1 w:1)
    /// Proof: Bounties BountyApprovals (max_values: Some(1), max_size: Some(402), added: 897, mode: MaxEncodedLen)
    fn on_initialize_proposals(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `383 + p * (318 ±0)`
        //  Estimated: `5423 + p * (7797 ±0)`
        // Minimum execution time: 63_181 nanoseconds.
        Weight::from_parts(88_775_191, 5423)
            // Standard Error: 330_024
            .saturating_add(Weight::from_ref_time(46_475_971).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(p.into())))
            .saturating_add(T::DbWeight::get().writes(5_u64))
            .saturating_add(Weight::from_proof_size(7797).saturating_mul(p.into()))
    }
}
