// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_treasury
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-24`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=pallet_treasury
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_treasury (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_treasury::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `Treasury::ProposalCount` (r:1 w:1)
    /// Proof: `Treasury::ProposalCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Treasury::Approvals` (r:1 w:1)
    /// Proof: `Treasury::Approvals` (`max_values`: Some(1), `max_size`: Some(402), added: 897, mode: `MaxEncodedLen`)
    /// Storage: `Treasury::Proposals` (r:0 w:1)
    /// Proof: `Treasury::Proposals` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
    fn spend_local() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42`
        //  Estimated: `1887`
        // Minimum execution time: 14_870 nanoseconds.
        Weight::from_parts(14_870_000, 1887)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Treasury::Approvals` (r:1 w:1)
    /// Proof: `Treasury::Approvals` (`max_values`: Some(1), `max_size`: Some(402), added: 897, mode: `MaxEncodedLen`)
    fn remove_approval() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `127`
        //  Estimated: `1887`
        // Minimum execution time: 8_290 nanoseconds.
        Weight::from_parts(8_290_000, 1887)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `System::Account` (r:100 w:100)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Treasury::Deactivated` (r:1 w:1)
    /// Proof: `Treasury::Deactivated` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
    /// Storage: `Treasury::Approvals` (r:1 w:1)
    /// Proof: `Treasury::Approvals` (`max_values`: Some(1), `max_size`: Some(402), added: 897, mode: `MaxEncodedLen`)
    /// Storage: `Treasury::Proposals` (r:99 w:99)
    /// Proof: `Treasury::Proposals` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
    /// Storage: `Bounties::BountyApprovals` (r:1 w:1)
    /// Proof: `Bounties::BountyApprovals` (`max_values`: Some(1), `max_size`: Some(402), added: 897, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[0, 99]`.
    fn on_initialize_proposals(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `190 + p * (155 Â±0)`
        //  Estimated: `261690`
        // Minimum execution time: 32_980 nanoseconds.
        Weight::from_parts(1_652_709_000, 261690)
            .saturating_add(T::DbWeight::get().reads(202))
            .saturating_add(T::DbWeight::get().writes(202))
    }
    /// Storage: `Treasury::SpendCount` (r:1 w:1)
    /// Proof: `Treasury::SpendCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `Treasury::Spends` (r:0 w:1)
    /// Proof: `Treasury::Spends` (`max_values`: None, `max_size`: Some(77), added: 2552, mode: `MaxEncodedLen`)
    fn spend() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `42`
        //  Estimated: `1489`
        // Minimum execution time: 15_190 nanoseconds.
        Weight::from_parts(15_190_000, 1489)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Treasury::Spends` (r:1 w:1)
    /// Proof: `Treasury::Spends` (`max_values`: None, `max_size`: Some(77), added: 2552, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn payout() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `365`
        //  Estimated: `6204`
        // Minimum execution time: 46_870 nanoseconds.
        Weight::from_parts(46_870_000, 6204)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Treasury::Spends` (r:1 w:1)
    /// Proof: `Treasury::Spends` (`max_values`: None, `max_size`: Some(77), added: 2552, mode: `MaxEncodedLen`)
    fn check_status() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `169`
        //  Estimated: `3542`
        // Minimum execution time: 10_740 nanoseconds.
        Weight::from_parts(10_740_000, 3542)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Treasury::Spends` (r:1 w:1)
    /// Proof: `Treasury::Spends` (`max_values`: None, `max_size`: Some(77), added: 2552, mode: `MaxEncodedLen`)
    fn void_spend() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `169`
        //  Estimated: `3542`
        // Minimum execution time: 10_010 nanoseconds.
        Weight::from_parts(10_010_000, 3542)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
