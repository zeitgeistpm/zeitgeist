// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-07-20, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_multisig
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_multisig (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::weights::WeightInfo for WeightInfo<T> {
    fn as_multi_threshold_1(z: u32) -> Weight {
        Weight::from_ref_time(38_165_336)
            // Standard Error: 79
            .saturating_add(Weight::from_ref_time(1_009).saturating_mul(z.into()))
    }
    // Storage: Multisig Multisigs (r:1 w:1)
    // Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
    fn as_multi_create(s: u32, z: u32) -> Weight {
        Weight::from_ref_time(72_667_678)
            // Standard Error: 12_442
            .saturating_add(Weight::from_ref_time(184_019).saturating_mul(s.into()))
            // Standard Error: 121
            .saturating_add(Weight::from_ref_time(2_517).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Multisig Multisigs (r:1 w:1)
    fn as_multi_approve(s: u32, z: u32) -> Weight {
        Weight::from_ref_time(54_581_046)
            // Standard Error: 11_434
            .saturating_add(Weight::from_ref_time(146_604).saturating_mul(s.into()))
            // Standard Error: 111
            .saturating_add(Weight::from_ref_time(2_558).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Multisig Multisigs (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn as_multi_complete(s: u32, z: u32) -> Weight {
        Weight::from_ref_time(67_536_167)
            // Standard Error: 13_753
            .saturating_add(Weight::from_ref_time(283_522).saturating_mul(s.into()))
            // Standard Error: 134
            .saturating_add(Weight::from_ref_time(2_872).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Multisig Multisigs (r:1 w:1)
    // Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
    fn approve_as_multi_create(s: u32) -> Weight {
        Weight::from_ref_time(68_068_141)
            // Standard Error: 10_770
            .saturating_add(Weight::from_ref_time(190_014).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Multisig Multisigs (r:1 w:1)
    fn approve_as_multi_approve(s: u32) -> Weight {
        Weight::from_ref_time(49_692_105)
            // Standard Error: 11_540
            .saturating_add(Weight::from_ref_time(185_756).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Multisig Multisigs (r:1 w:1)
    fn cancel_as_multi(s: u32) -> Weight {
        Weight::from_ref_time(68_690_132)
            // Standard Error: 12_309
            .saturating_add(Weight::from_ref_time(179_635).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
