// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-09-19`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_multisig
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_multisig (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::weights::WeightInfo for WeightInfo<T> {
    fn as_multi_threshold_1(z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 17_510 nanoseconds.
        Weight::from_ref_time(22_513_680)
            // Standard Error: 72
            .saturating_add(Weight::from_ref_time(1_055).saturating_mul(z.into()))
    }
    /// Storage: Multisig Multisigs (r:1 w:1)
    /// Proof: Multisig Multisigs (max_values: None, max_size: Some(3350), added: 5825, mode: MaxEncodedLen)
    fn as_multi_create(s: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `303 + s * (1 ±0)`
        //  Estimated: `5825`
        // Minimum execution time: 48_000 nanoseconds.
        Weight::from_parts(54_977_016, 5825)
            // Standard Error: 9_444
            .saturating_add(Weight::from_ref_time(41_852).saturating_mul(s.into()))
            // Standard Error: 92
            .saturating_add(Weight::from_ref_time(2_453).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Multisig Multisigs (r:1 w:1)
    /// Proof: Multisig Multisigs (max_values: None, max_size: Some(3350), added: 5825, mode: MaxEncodedLen)
    fn as_multi_approve(s: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `246`
        //  Estimated: `5825`
        // Minimum execution time: 35_791 nanoseconds.
        Weight::from_parts(40_752_558, 5825)
            // Standard Error: 9_035
            .saturating_add(Weight::from_ref_time(40_991).saturating_mul(s.into()))
            // Standard Error: 88
            .saturating_add(Weight::from_ref_time(2_340).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Multisig Multisigs (r:1 w:1)
    /// Proof: Multisig Multisigs (max_values: None, max_size: Some(3350), added: 5825, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn as_multi_complete(s: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `388 + s * (33 ±0)`
        //  Estimated: `8432`
        // Minimum execution time: 57_500 nanoseconds.
        Weight::from_parts(65_557_947, 8432)
            // Standard Error: 17_739
            .saturating_add(Weight::from_ref_time(44_272).saturating_mul(s.into()))
            // Standard Error: 173
            .saturating_add(Weight::from_ref_time(2_086).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Multisig Multisigs (r:1 w:1)
    /// Proof: Multisig Multisigs (max_values: None, max_size: Some(3350), added: 5825, mode: MaxEncodedLen)
    fn approve_as_multi_create(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `307 + s * (1 ±0)`
        //  Estimated: `5825`
        // Minimum execution time: 37_550 nanoseconds.
        Weight::from_parts(49_094_735, 5825)
            // Standard Error: 12_276
            .saturating_add(Weight::from_ref_time(121_978).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Multisig Multisigs (r:1 w:1)
    /// Proof: Multisig Multisigs (max_values: None, max_size: Some(3350), added: 5825, mode: MaxEncodedLen)
    fn approve_as_multi_approve(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `246`
        //  Estimated: `5825`
        // Minimum execution time: 26_680 nanoseconds.
        Weight::from_parts(30_984_305, 5825)
            // Standard Error: 6_780
            .saturating_add(Weight::from_ref_time(82_706).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Multisig Multisigs (r:1 w:1)
    /// Proof: Multisig Multisigs (max_values: None, max_size: Some(3350), added: 5825, mode: MaxEncodedLen)
    fn cancel_as_multi(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `454 + s * (1 ±0)`
        //  Estimated: `5825`
        // Minimum execution time: 40_801 nanoseconds.
        Weight::from_parts(47_846_662, 5825)
            // Standard Error: 7_468
            .saturating_add(Weight::from_ref_time(82_892).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}
