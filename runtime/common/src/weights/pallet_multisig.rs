// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-02-15`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zafoi`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: `Some(Native)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=0
// --pallet=pallet_multisig
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_multisig (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::weights::WeightInfo for WeightInfo<T> {
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_threshold_1(_z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_020 nanoseconds.
        Weight::from_parts(9_430_000, 0)
    }
    /// Storage: Multisig Multisigs (r:1 w:1)
    /// Proof: Multisig Multisigs (max_values: None, max_size: Some(3350), added: 5825, mode: MaxEncodedLen)
    /// The range of component `s` is `[2, 100]`.
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_create(s: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `280 + s * (2 ±0)`
        //  Estimated: `5825`
        // Minimum execution time: 21_591 nanoseconds.
        Weight::from_parts(15_954_265, 5825)
            // Standard Error: 16_525
            .saturating_add(Weight::from_parts(56_367, 0).saturating_mul(s.into()))
            // Standard Error: 161
            .saturating_add(Weight::from_parts(868, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Multisig Multisigs (r:1 w:1)
    /// Proof: Multisig Multisigs (max_values: None, max_size: Some(3350), added: 5825, mode: MaxEncodedLen)
    /// The range of component `s` is `[3, 100]`.
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_approve(s: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `317`
        //  Estimated: `5825`
        // Minimum execution time: 15_631 nanoseconds.
        Weight::from_parts(11_573_268, 5825)
            // Standard Error: 6_160
            .saturating_add(Weight::from_parts(40_577, 0).saturating_mul(s.into()))
            // Standard Error: 59
            .saturating_add(Weight::from_parts(809, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Multisig Multisigs (r:1 w:1)
    /// Proof: Multisig Multisigs (max_values: None, max_size: Some(3350), added: 5825, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `s` is `[2, 100]`.
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_complete(s: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `458 + s * (34 ±0)`
        //  Estimated: `8432`
        // Minimum execution time: 25_271 nanoseconds.
        Weight::from_parts(18_623_040, 8432)
            // Standard Error: 11_046
            .saturating_add(Weight::from_parts(66_479, 0).saturating_mul(s.into()))
            // Standard Error: 108
            .saturating_add(Weight::from_parts(787, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Multisig Multisigs (r:1 w:1)
    /// Proof: Multisig Multisigs (max_values: None, max_size: Some(3350), added: 5825, mode: MaxEncodedLen)
    /// The range of component `s` is `[2, 100]`.
    fn approve_as_multi_create(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `280 + s * (2 ±0)`
        //  Estimated: `5825`
        // Minimum execution time: 16_990 nanoseconds.
        Weight::from_parts(22_170_000, 5825)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Multisig Multisigs (r:1 w:1)
    /// Proof: Multisig Multisigs (max_values: None, max_size: Some(3350), added: 5825, mode: MaxEncodedLen)
    /// The range of component `s` is `[2, 100]`.
    fn approve_as_multi_approve(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `317`
        //  Estimated: `5825`
        // Minimum execution time: 11_630 nanoseconds.
        Weight::from_parts(15_290_000, 5825)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Multisig Multisigs (r:1 w:1)
    /// Proof: Multisig Multisigs (max_values: None, max_size: Some(3350), added: 5825, mode: MaxEncodedLen)
    /// The range of component `s` is `[2, 100]`.
    fn cancel_as_multi(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `522 + s * (2 ±0)`
        //  Estimated: `5825`
        // Minimum execution time: 16_390 nanoseconds.
        Weight::from_parts(20_881_000, 5825)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
