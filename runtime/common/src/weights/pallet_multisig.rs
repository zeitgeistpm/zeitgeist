// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-23`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=pallet_multisig
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions for pallet_multisig (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_multisig::weights::WeightInfo for WeightInfo<T> {
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_threshold_1(_z: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 18_420 nanoseconds.
        Weight::from_parts(30_730_000, 0)
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3350), added: 5825, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_create(s: u32, z: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `214 + s * (2 ±0)`
        //  Estimated: `6815`
        // Minimum execution time: 39_100 nanoseconds.
        Weight::from_parts(32_645_408, 6815)
            // Standard Error: 35_798
            .saturating_add(Weight::from_parts(64_545, 0).saturating_mul(s.into()))
            // Standard Error: 350
            .saturating_add(Weight::from_parts(1_583, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3350), added: 5825, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[3, 100]`.
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_approve(s: u32, z: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `252`
        //  Estimated: `6815`
        // Minimum execution time: 21_870 nanoseconds.
        Weight::from_parts(13_988_556, 6815)
            // Standard Error: 62_228
            .saturating_add(Weight::from_parts(78_814, 0).saturating_mul(s.into()))
            // Standard Error: 603
            .saturating_add(Weight::from_parts(1_420, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3350), added: 5825, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    /// The range of component `z` is `[0, 10000]`.
    fn as_multi_complete(s: u32, z: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `361 + s * (34 ±0)`
        //  Estimated: `6815`
        // Minimum execution time: 36_530 nanoseconds.
        Weight::from_parts(30_917_755, 6815)
            // Standard Error: 12_018
            .saturating_add(Weight::from_parts(56_122, 0).saturating_mul(s.into()))
            // Standard Error: 117
            .saturating_add(Weight::from_parts(1_243, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3350), added: 5825, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    fn approve_as_multi_create(_s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `214 + s * (2 ±0)`
        //  Estimated: `6815`
        // Minimum execution time: 28_860 nanoseconds.
        Weight::from_parts(38_760_000, 6815)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3350), added: 5825, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    fn approve_as_multi_approve(_s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `252`
        //  Estimated: `6815`
        // Minimum execution time: 14_480 nanoseconds.
        Weight::from_parts(24_170_000, 6815)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Multisig::Multisigs` (r:1 w:1)
    /// Proof: `Multisig::Multisigs` (`max_values`: None, `max_size`: Some(3350), added: 5825, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[2, 100]`.
    fn cancel_as_multi(_s: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `425 + s * (2 ±0)`
        //  Estimated: `6815`
        // Minimum execution time: 25_130 nanoseconds.
        Weight::from_parts(38_570_000, 6815)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
