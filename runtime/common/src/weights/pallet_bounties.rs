// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_bounties
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-24`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=pallet_bounties
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_bounties (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_bounties::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `Bounties::BountyCount` (r:1 w:1)
    /// Proof: `Bounties::BountyCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Bounties::BountyDescriptions` (r:0 w:1)
    /// Proof: `Bounties::BountyDescriptions` (`max_values`: None, `max_size`: Some(8206), added: 10681, mode: `MaxEncodedLen`)
    /// Storage: `Bounties::Bounties` (r:0 w:1)
    /// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
    /// The range of component `d` is `[0, 8192]`.
    fn propose_bounty(_d: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `109`
        //  Estimated: `3597`
        // Minimum execution time: 25_940 nanoseconds.
        Weight::from_parts(34_810_000, 3597)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `Bounties::Bounties` (r:1 w:1)
    /// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
    /// Storage: `Bounties::BountyApprovals` (r:1 w:1)
    /// Proof: `Bounties::BountyApprovals` (`max_values`: Some(1), `max_size`: Some(402), added: 897, mode: `MaxEncodedLen`)
    fn approve_bounty() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `197`
        //  Estimated: `3646`
        // Minimum execution time: 11_740 nanoseconds.
        Weight::from_parts(11_740_000, 3646)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Bounties::Bounties` (r:1 w:1)
    /// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
    fn propose_curator() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `217`
        //  Estimated: `3646`
        // Minimum execution time: 10_470 nanoseconds.
        Weight::from_parts(10_470_000, 3646)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Bounties::Bounties` (r:1 w:1)
    /// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn unassign_curator() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `545`
        //  Estimated: `6204`
        // Minimum execution time: 32_020 nanoseconds.
        Weight::from_parts(32_020_000, 6204)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Bounties::Bounties` (r:1 w:1)
    /// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn accept_curator() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `393`
        //  Estimated: `3646`
        // Minimum execution time: 22_900 nanoseconds.
        Weight::from_parts(22_900_000, 3646)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Bounties::Bounties` (r:1 w:1)
    /// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
    fn award_bounty() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `257`
        //  Estimated: `3646`
        // Minimum execution time: 10_640 nanoseconds.
        Weight::from_parts(10_640_000, 3646)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Bounties::Bounties` (r:1 w:1)
    /// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:3 w:3)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Bounties::BountyDescriptions` (r:0 w:1)
    /// Proof: `Bounties::BountyDescriptions` (`max_values`: None, `max_size`: Some(8206), added: 10681, mode: `MaxEncodedLen`)
    fn claim_bounty() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `578`
        //  Estimated: `8811`
        // Minimum execution time: 96_790 nanoseconds.
        Weight::from_parts(96_790_000, 8811)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: `Bounties::Bounties` (r:1 w:1)
    /// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Bounties::BountyDescriptions` (r:0 w:1)
    /// Proof: `Bounties::BountyDescriptions` (`max_values`: None, `max_size`: Some(8206), added: 10681, mode: `MaxEncodedLen`)
    fn close_bounty_proposed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `445`
        //  Estimated: `6204`
        // Minimum execution time: 36_020 nanoseconds.
        Weight::from_parts(36_020_000, 6204)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `Bounties::Bounties` (r:1 w:1)
    /// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:3 w:3)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Bounties::BountyDescriptions` (r:0 w:1)
    /// Proof: `Bounties::BountyDescriptions` (`max_values`: None, `max_size`: Some(8206), added: 10681, mode: `MaxEncodedLen`)
    fn close_bounty_active() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `690`
        //  Estimated: `8811`
        // Minimum execution time: 59_280 nanoseconds.
        Weight::from_parts(59_280_000, 8811)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: `Bounties::Bounties` (r:1 w:1)
    /// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
    fn extend_bounty_expiry() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `257`
        //  Estimated: `3646`
        // Minimum execution time: 10_790 nanoseconds.
        Weight::from_parts(10_790_000, 3646)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Bounties::BountyApprovals` (r:1 w:1)
    /// Proof: `Bounties::BountyApprovals` (`max_values`: Some(1), `max_size`: Some(402), added: 897, mode: `MaxEncodedLen`)
    /// Storage: `Bounties::Bounties` (r:100 w:100)
    /// Proof: `Bounties::Bounties` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:200 w:200)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `b` is `[0, 100]`.
    fn spend_funds(_b: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4 + b * (294 ±0)`
        //  Estimated: `522390`
        // Minimum execution time: 2_300 nanoseconds.
        Weight::from_parts(2_736_809_000, 522390)
            .saturating_add(T::DbWeight::get().reads(301))
            .saturating_add(T::DbWeight::get().writes(301))
    }
}
