// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-05-12`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/production/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=50
// --repeat=20
// --pallet=pallet_scheduler
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_scheduler (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_scheduler::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `Scheduler::IncompleteSince` (r:1 w:1)
    /// Proof: `Scheduler::IncompleteSince` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
    fn service_agendas_base() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `35`
        //  Estimated: `1493`
        // Minimum execution time: 2_820 nanoseconds.
        Weight::from_parts(2_960_000, 1493)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(109074), added: 111549, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 512]`.
    fn service_agenda_base(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `85 + s * (181 ±0)`
        //  Estimated: `112539`
        // Minimum execution time: 3_370 nanoseconds.
        Weight::from_parts(4_353_394, 112539)
            // Standard Error: 1_846
            .saturating_add(Weight::from_parts(319_410, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    fn service_task_base() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_060 nanoseconds.
        Weight::from_parts(2_150_000, 0)
    }
    /// Storage: `Preimage::PreimageFor` (r:1 w:1)
    /// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `MaxEncodedLen`)
    /// Storage: `Preimage::StatusFor` (r:1 w:0)
    /// Proof: `Preimage::StatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
    /// Storage: `Preimage::RequestStatusFor` (r:1 w:1)
    /// Proof: `Preimage::RequestStatusFor` (`max_values`: None, `max_size`: Some(91), added: 2566, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[128, 4194304]`.
    fn service_task_fetched(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `179 + s * (1 ±0)`
        //  Estimated: `4197809`
        // Minimum execution time: 12_930 nanoseconds.
        Weight::from_parts(13_070_000, 4197809)
            // Standard Error: 148
            .saturating_add(Weight::from_parts(13_316, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Scheduler::Lookup` (r:0 w:1)
    /// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    fn service_task_named() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_940 nanoseconds.
        Weight::from_parts(3_130_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    fn service_task_periodic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_920 nanoseconds.
        Weight::from_parts(2_070_000, 0)
    }
    fn execute_dispatch_signed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_380 nanoseconds.
        Weight::from_parts(1_490_000, 0)
    }
    fn execute_dispatch_unsigned() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_390 nanoseconds.
        Weight::from_parts(1_490_000, 0)
    }
    fn set_retry() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_580 nanoseconds.
        Weight::from_parts(2_770_000, 0)
    }
    fn set_retry_named() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_580 nanoseconds.
        Weight::from_parts(2_770_000, 0)
    }
    fn cancel_retry() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_580 nanoseconds.
        Weight::from_parts(2_770_000, 0)
    }
    fn cancel_retry_named() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_580 nanoseconds.
        Weight::from_parts(2_770_000, 0)
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(109074), added: 111549, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 511]`.
    fn schedule(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `85 + s * (181 ±0)`
        //  Estimated: `112539`
        // Minimum execution time: 6_800 nanoseconds.
        Weight::from_parts(4_103_195, 112539)
            // Standard Error: 1_134
            .saturating_add(Weight::from_parts(326_049, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(109074), added: 111549, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(38), added: 2513, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Lookup` (r:0 w:1)
    /// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 512]`.
    fn cancel(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `85 + s * (181 ±0)`
        //  Estimated: `112539`
        // Minimum execution time: 10_960 nanoseconds.
        Weight::from_parts(4_346_702, 112539)
            // Standard Error: 1_341
            .saturating_add(Weight::from_parts(495_956, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Scheduler::Lookup` (r:1 w:1)
    /// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(109074), added: 111549, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 511]`.
    fn schedule_named(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `601 + s * (182 ±0)`
        //  Estimated: `112539`
        // Minimum execution time: 8_950 nanoseconds.
        Weight::from_parts(6_145_399, 112539)
            // Standard Error: 1_304
            .saturating_add(Weight::from_parts(344_619, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Scheduler::Lookup` (r:1 w:1)
    /// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(109074), added: 111549, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(38), added: 2513, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 512]`.
    fn cancel_named(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `717 + s * (181 ±0)`
        //  Estimated: `112539`
        // Minimum execution time: 13_840 nanoseconds.
        Weight::from_parts(8_321_763, 112539)
            // Standard Error: 1_620
            .saturating_add(Weight::from_parts(533_216, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:1)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(109074), added: 111549, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(38), added: 2513, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 512]`.
    fn schedule_retry(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `122`
        //  Estimated: `112539`
        // Minimum execution time: 7_590 nanoseconds.
        Weight::from_parts(8_650_131, 112539)
            // Standard Error: 121
            .saturating_add(Weight::from_parts(5_146, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:0)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(109074), added: 111549, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(38), added: 2513, mode: `MaxEncodedLen`)
    fn set_retry() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `92757`
        //  Estimated: `112539`
        // Minimum execution time: 111_230 nanoseconds.
        Weight::from_parts(115_899_000, 112539)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Scheduler::Lookup` (r:1 w:0)
    /// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:1 w:0)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(109074), added: 111549, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(38), added: 2513, mode: `MaxEncodedLen`)
    fn set_retry_named() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `93803`
        //  Estimated: `112539`
        // Minimum execution time: 118_240 nanoseconds.
        Weight::from_parts(120_010_000, 112539)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Scheduler::Agenda` (r:1 w:0)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(109074), added: 111549, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(38), added: 2513, mode: `MaxEncodedLen`)
    fn cancel_retry() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `92769`
        //  Estimated: `112539`
        // Minimum execution time: 110_550 nanoseconds.
        Weight::from_parts(117_680_000, 112539)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Scheduler::Lookup` (r:1 w:0)
    /// Proof: `Scheduler::Lookup` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Agenda` (r:1 w:0)
    /// Proof: `Scheduler::Agenda` (`max_values`: None, `max_size`: Some(109074), added: 111549, mode: `MaxEncodedLen`)
    /// Storage: `Scheduler::Retries` (r:0 w:1)
    /// Proof: `Scheduler::Retries` (`max_values`: None, `max_size`: Some(38), added: 2513, mode: `MaxEncodedLen`)
    fn cancel_retry_named() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `93815`
        //  Estimated: `112539`
        // Minimum execution time: 118_380 nanoseconds.
        Weight::from_parts(122_510_000, 112539)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
