// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-02-15`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zafoi`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: `Some(Native)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=0
// --pallet=pallet_scheduler
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_scheduler (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_scheduler::weights::WeightInfo for WeightInfo<T> {
    /// Storage: Scheduler IncompleteSince (r:1 w:1)
    /// Proof: Scheduler IncompleteSince (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn service_agendas_base() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `35`
        //  Estimated: `503`
        // Minimum execution time: 3_070 nanoseconds.
        Weight::from_parts(3_070_000, 503)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(10667), added: 13142, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 50]`.
    fn service_agenda_base(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3 + s * (183 ±0)`
        //  Estimated: `13142`
        // Minimum execution time: 2_030 nanoseconds.
        Weight::from_parts(22_911_000, 13142)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    fn service_task_base() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_970 nanoseconds.
        Weight::from_parts(3_970_000, 0)
    }
    /// Storage: Preimage PreimageFor (r:1 w:1)
    /// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: Measured)
    /// Storage: Preimage StatusFor (r:1 w:1)
    /// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
    /// The range of component `s` is `[128, 4194304]`.
    fn service_task_fetched(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `204 + s * (1 ±0)`
        //  Estimated: `4199553`
        // Minimum execution time: 12_151 nanoseconds.
        Weight::from_parts(3_027_077_000, 4199553)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Scheduler Lookup (r:0 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    fn service_task_named() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_670 nanoseconds.
        Weight::from_parts(4_670_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    fn service_task_periodic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_670 nanoseconds.
        Weight::from_parts(3_670_000, 0)
    }
    fn execute_dispatch_signed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_190 nanoseconds.
        Weight::from_parts(2_190_000, 0)
    }
    fn execute_dispatch_unsigned() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_900 nanoseconds.
        Weight::from_parts(1_900_000, 0)
    }
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(10667), added: 13142, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 49]`.
    fn schedule(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3 + s * (183 ±0)`
        //  Estimated: `13142`
        // Minimum execution time: 8_300 nanoseconds.
        Weight::from_parts(20_950_000, 13142)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(10667), added: 13142, mode: MaxEncodedLen)
    /// Storage: Scheduler Lookup (r:0 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 50]`.
    fn cancel(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `114 + s * (181 ±0)`
        //  Estimated: `13142`
        // Minimum execution time: 14_370 nanoseconds.
        Weight::from_parts(28_210_000, 13142)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Scheduler Lookup (r:1 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(10667), added: 13142, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 49]`.
    fn schedule_named(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3 + s * (196 ±0)`
        //  Estimated: `15669`
        // Minimum execution time: 9_370 nanoseconds.
        Weight::from_parts(24_591_000, 15669)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Scheduler Lookup (r:1 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(10667), added: 13142, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 50]`.
    fn cancel_named(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `142 + s * (192 ±0)`
        //  Estimated: `15669`
        // Minimum execution time: 11_860 nanoseconds.
        Weight::from_parts(32_401_000, 15669)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
