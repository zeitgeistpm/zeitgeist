// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_scheduler
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-01-15`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_scheduler
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_scheduler (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_scheduler::weights::WeightInfo for WeightInfo<T> {
    /// Storage: Scheduler IncompleteSince (r:1 w:1)
    /// Proof: Scheduler IncompleteSince (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
    fn service_agendas_base() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `35`
        //  Estimated: `503`
        // Minimum execution time: 6_040 nanoseconds.
        Weight::from_parts(7_220_000, 503)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(10667), added: 13142, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 50]`.
    fn service_agenda_base(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `114 + s * (181 ±0)`
        //  Estimated: `13142`
        // Minimum execution time: 4_780 nanoseconds.
        Weight::from_parts(11_602_646, 13142)
            // Standard Error: 11_992
            .saturating_add(Weight::from_parts(563_088, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    fn service_task_base() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_360 nanoseconds.
        Weight::from_parts(7_750_000, 0)
    }
    /// Storage: Preimage PreimageFor (r:1 w:1)
    /// Proof: Preimage PreimageFor (max_values: None, max_size: Some(4194344), added: 4196819, mode: Measured)
    /// Storage: Preimage StatusFor (r:1 w:1)
    /// Proof: Preimage StatusFor (max_values: None, max_size: Some(91), added: 2566, mode: MaxEncodedLen)
    /// The range of component `s` is `[128, 4194304]`.
    fn service_task_fetched(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `211 + s * (1 ±0)`
        //  Estimated: `5252 + s * (1 ±0)`
        // Minimum execution time: 31_830 nanoseconds.
        Weight::from_parts(37_380_000, 5252)
            // Standard Error: 6
            .saturating_add(Weight::from_parts(2_229, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 1).saturating_mul(s.into()))
    }
    /// Storage: Scheduler Lookup (r:0 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    fn service_task_named() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_700 nanoseconds.
        Weight::from_parts(13_030_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    fn service_task_periodic() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 7_980 nanoseconds.
        Weight::from_parts(8_790_000, 0)
    }
    fn execute_dispatch_signed() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_680 nanoseconds.
        Weight::from_parts(4_700_000, 0)
    }
    fn execute_dispatch_unsigned() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_570 nanoseconds.
        Weight::from_parts(4_540_000, 0)
    }
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(10667), added: 13142, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 49]`.
    fn schedule(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `114 + s * (181 ±0)`
        //  Estimated: `13142`
        // Minimum execution time: 18_750 nanoseconds.
        Weight::from_parts(25_732_878, 13142)
            // Standard Error: 21_418
            .saturating_add(Weight::from_parts(627_490, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(10667), added: 13142, mode: MaxEncodedLen)
    /// Storage: Scheduler Lookup (r:0 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 50]`.
    fn cancel(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `114 + s * (181 ±0)`
        //  Estimated: `13142`
        // Minimum execution time: 23_610 nanoseconds.
        Weight::from_parts(28_867_441, 13142)
            // Standard Error: 12_753
            .saturating_add(Weight::from_parts(732_013, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Scheduler Lookup (r:1 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(10667), added: 13142, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 49]`.
    fn schedule_named(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `297 + s * (189 ±0)`
        //  Estimated: `15669`
        // Minimum execution time: 21_810 nanoseconds.
        Weight::from_parts(34_859_221, 15669)
            // Standard Error: 14_855
            .saturating_add(Weight::from_parts(533_329, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Scheduler Lookup (r:1 w:1)
    /// Proof: Scheduler Lookup (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
    /// Storage: Scheduler Agenda (r:1 w:1)
    /// Proof: Scheduler Agenda (max_values: None, max_size: Some(10667), added: 13142, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 50]`.
    fn cancel_named(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `321 + s * (189 ±0)`
        //  Estimated: `15669`
        // Minimum execution time: 26_600 nanoseconds.
        Weight::from_parts(38_582_510, 15669)
            // Standard Error: 24_205
            .saturating_add(Weight::from_parts(646_684, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
