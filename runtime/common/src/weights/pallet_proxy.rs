// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_proxy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-10-11`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_proxy
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_proxy (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::weights::WeightInfo for WeightInfo<T> {
    /// Storage: Proxy Proxies (r:1 w:0)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// The range of component `p` is `[1, 31]`.
    fn proxy(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `122 + p * (41 ±0)`
        //  Estimated: `3844`
        // Minimum execution time: 20_940 nanoseconds.
        Weight::from_parts(25_140_189, 3844)
            // Standard Error: 11_204
            .saturating_add(Weight::from_parts(82_019, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    /// Storage: Proxy Proxies (r:1 w:0)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// Storage: Proxy Announcements (r:1 w:1)
    /// Proof: Proxy Announcements (max_values: None, max_size: Some(2361), added: 4836, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn proxy_announced(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521 + a * (72 ±0) + p * (41 ±0)`
        //  Estimated: `11287`
        // Minimum execution time: 45_610 nanoseconds.
        Weight::from_parts(50_961_712, 11287)
            // Standard Error: 20_838
            .saturating_add(Weight::from_parts(313_335, 0).saturating_mul(a.into()))
            // Standard Error: 21_529
            .saturating_add(Weight::from_parts(82_019, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Proxy Announcements (r:1 w:1)
    /// Proof: Proxy Announcements (max_values: None, max_size: Some(2361), added: 4836, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn remove_announcement(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `404 + a * (72 ±0)`
        //  Estimated: `7443`
        // Minimum execution time: 27_220 nanoseconds.
        Weight::from_parts(31_906_629, 7443)
            // Standard Error: 19_587
            .saturating_add(Weight::from_parts(295_108, 0).saturating_mul(a.into()))
            // Standard Error: 20_237
            .saturating_add(Weight::from_parts(60_064, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Proxy Announcements (r:1 w:1)
    /// Proof: Proxy Announcements (max_values: None, max_size: Some(2361), added: 4836, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn reject_announcement(a: u32, _p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `404 + a * (72 ±0)`
        //  Estimated: `7443`
        // Minimum execution time: 27_740 nanoseconds.
        Weight::from_parts(34_981_605, 7443)
            // Standard Error: 15_466
            .saturating_add(Weight::from_parts(249_342, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Proxy Proxies (r:1 w:0)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// Storage: Proxy Announcements (r:1 w:1)
    /// Proof: Proxy Announcements (max_values: None, max_size: Some(2361), added: 4836, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn announce(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `449 + a * (72 ±0) + p * (41 ±0)`
        //  Estimated: `11287`
        // Minimum execution time: 39_530 nanoseconds.
        Weight::from_parts(51_332_901, 11287)
            // Standard Error: 20_753
            .saturating_add(Weight::from_parts(60_767, 0).saturating_mul(a.into()))
            // Standard Error: 21_442
            .saturating_add(Weight::from_parts(25_155, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Proxy Proxies (r:1 w:1)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// The range of component `p` is `[1, 31]`.
    fn add_proxy(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `122 + p * (41 ±0)`
        //  Estimated: `3844`
        // Minimum execution time: 29_740 nanoseconds.
        Weight::from_parts(34_898_386, 3844)
            // Standard Error: 16_204
            .saturating_add(Weight::from_parts(93_434, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Proxy Proxies (r:1 w:1)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxy(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `122 + p * (41 ±0)`
        //  Estimated: `3844`
        // Minimum execution time: 29_330 nanoseconds.
        Weight::from_parts(35_210_658, 3844)
            // Standard Error: 14_296
            .saturating_add(Weight::from_parts(41_370, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Proxy Proxies (r:1 w:1)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxies(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `122 + p * (41 ±0)`
        //  Estimated: `3844`
        // Minimum execution time: 23_490 nanoseconds.
        Weight::from_parts(31_470_503, 3844)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Proxy Proxies (r:1 w:1)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// The range of component `p` is `[1, 31]`.
    fn create_pure(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `102`
        //  Estimated: `3844`
        // Minimum execution time: 30_780 nanoseconds.
        Weight::from_parts(36_804_882, 3844)
            // Standard Error: 14_018
            .saturating_add(Weight::from_parts(15_229, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Proxy Proxies (r:1 w:1)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// The range of component `p` is `[0, 30]`.
    fn kill_pure(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `163 + p * (41 ±0)`
        //  Estimated: `3844`
        // Minimum execution time: 25_020 nanoseconds.
        Weight::from_parts(29_081_365, 3844)
            // Standard Error: 10_456
            .saturating_add(Weight::from_parts(47_688, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
