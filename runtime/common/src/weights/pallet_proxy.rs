// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_proxy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-24`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=pallet_proxy
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_proxy (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn proxy(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `88 + p * (41 ±0)`
        //  Estimated: `4834`
        // Minimum execution time: 12_540 nanoseconds.
        Weight::from_parts(12_560_000, 4834).saturating_add(T::DbWeight::get().reads(1))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2361), added: 4836, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn proxy_announced(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `459 + a * (72 ±0) + p * (39 ±0)`
        //  Estimated: `5826`
        // Minimum execution time: 29_000 nanoseconds.
        Weight::from_parts(28_426_500, 5826)
            // Standard Error: 12_012
            .saturating_add(Weight::from_parts(143_709, 0).saturating_mul(a.into()))
            // Standard Error: 12_413
            .saturating_add(Weight::from_parts(18_500, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2361), added: 4836, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn remove_announcement(a: u32, _p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `375 + a * (72 ±0)`
        //  Estimated: `5826`
        // Minimum execution time: 20_680 nanoseconds.
        Weight::from_parts(20_721_333, 5826)
            // Standard Error: 5_587
            .saturating_add(Weight::from_parts(150_000, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2361), added: 4836, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn reject_announcement(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `375 + a * (72 ±0)`
        //  Estimated: `5826`
        // Minimum execution time: 20_910 nanoseconds.
        Weight::from_parts(20_491_500, 5826)
            // Standard Error: 10_895
            .saturating_add(Weight::from_parts(149_516, 0).saturating_mul(a.into()))
            // Standard Error: 11_258
            .saturating_add(Weight::from_parts(13_500, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2361), added: 4836, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn announce(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `306 + a * (74 ±0) + p * (39 ±0)`
        //  Estimated: `5826`
        // Minimum execution time: 26_740 nanoseconds.
        Weight::from_parts(26_109_666, 5826)
            // Standard Error: 13_968
            .saturating_add(Weight::from_parts(129_032, 0).saturating_mul(a.into()))
            // Standard Error: 14_433
            .saturating_add(Weight::from_parts(20_333, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn add_proxy(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `88 + p * (41 ±0)`
        //  Estimated: `4834`
        // Minimum execution time: 19_740 nanoseconds.
        Weight::from_parts(25_410_000, 4834)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxy(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `88 + p * (41 ±0)`
        //  Estimated: `4834`
        // Minimum execution time: 19_880 nanoseconds.
        Weight::from_parts(20_590_000, 4834)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxies(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `88 + p * (41 ±0)`
        //  Estimated: `4834`
        // Minimum execution time: 18_090 nanoseconds.
        Weight::from_parts(18_620_000, 4834)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn create_pure(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `102`
        //  Estimated: `4834`
        // Minimum execution time: 21_380 nanoseconds.
        Weight::from_parts(21_600_000, 4834)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[0, 30]`.
    fn kill_pure(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `130 + p * (41 ±0)`
        //  Estimated: `4834`
        // Minimum execution time: 18_550 nanoseconds.
        Weight::from_parts(19_180_000, 4834)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
