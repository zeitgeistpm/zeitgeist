// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_proxy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-05, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_proxy
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_proxy (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::weights::WeightInfo for WeightInfo<T> {
    // Storage: Proxy Proxies (r:1 w:0)
    fn proxy(p: u32) -> Weight {
        Weight::from_ref_time(45_430_273)
            // Standard Error: 16_376
            .saturating_add(Weight::from_ref_time(170_989).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    // Storage: Proxy Proxies (r:1 w:0)
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn proxy_announced(a: u32, _p: u32) -> Weight {
        Weight::from_ref_time(81_336_808)
            // Standard Error: 39_634
            .saturating_add(Weight::from_ref_time(132_877).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn remove_announcement(a: u32, p: u32) -> Weight {
        Weight::from_ref_time(47_073_348)
            // Standard Error: 24_794
            .saturating_add(Weight::from_ref_time(390_421).saturating_mul(a.into()))
            // Standard Error: 25_617
            .saturating_add(Weight::from_ref_time(91_176).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn reject_announcement(a: u32, _p: u32) -> Weight {
        Weight::from_ref_time(57_836_563)
            // Standard Error: 21_558
            .saturating_add(Weight::from_ref_time(203_004).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Proxy Proxies (r:1 w:0)
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn announce(a: u32, _p: u32) -> Weight {
        Weight::from_ref_time(77_933_386)
            // Standard Error: 31_635
            .saturating_add(Weight::from_ref_time(128_801).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn add_proxy(p: u32) -> Weight {
        Weight::from_ref_time(56_713_436)
            // Standard Error: 22_905
            .saturating_add(Weight::from_ref_time(213_098).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn remove_proxy(p: u32) -> Weight {
        Weight::from_ref_time(60_721_471)
            // Standard Error: 45_816
            .saturating_add(Weight::from_ref_time(163_780).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn remove_proxies(p: u32) -> Weight {
        Weight::from_ref_time(50_358_662)
            // Standard Error: 23_696
            .saturating_add(Weight::from_ref_time(82_661).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
    // Storage: Proxy Proxies (r:1 w:1)
    fn create_pure(p: u32) -> Weight {
        Weight::from_ref_time(62_497_769)
            // Standard Error: 26_171
            .saturating_add(Weight::from_ref_time(34_287).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn kill_pure(p: u32) -> Weight {
        Weight::from_ref_time(51_548_294)
            // Standard Error: 19_850
            .saturating_add(Weight::from_ref_time(337_485).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
