// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_proxy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-02-15`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zafoi`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: `Some(Native)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=0
// --pallet=pallet_proxy
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_proxy (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::weights::WeightInfo for WeightInfo<T> {
    /// Storage: Proxy Proxies (r:1 w:0)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// The range of component `p` is `[1, 31]`.
    fn proxy(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `120 + p * (41 ±0)`
        //  Estimated: `3844`
        // Minimum execution time: 9_380 nanoseconds.
        Weight::from_parts(10_150_000, 3844).saturating_add(T::DbWeight::get().reads(1))
    }
    /// Storage: Proxy Proxies (r:1 w:0)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// Storage: Proxy Announcements (r:1 w:1)
    /// Proof: Proxy Announcements (max_values: None, max_size: Some(2361), added: 4836, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn proxy_announced(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `555 + a * (72 ±0) + p * (39 ±0)`
        //  Estimated: `11287`
        // Minimum execution time: 19_850 nanoseconds.
        Weight::from_parts(18_677_683, 11287)
            // Standard Error: 45_508
            .saturating_add(Weight::from_parts(70_500, 0).saturating_mul(a.into()))
            // Standard Error: 47_025
            .saturating_add(Weight::from_parts(37_816, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Proxy Announcements (r:1 w:1)
    /// Proof: Proxy Announcements (max_values: None, max_size: Some(2361), added: 4836, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn remove_announcement(a: u32, _p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `439 + a * (72 ±0)`
        //  Estimated: `7443`
        // Minimum execution time: 11_780 nanoseconds.
        Weight::from_parts(11_858_016, 7443)
            // Standard Error: 1_983
            .saturating_add(Weight::from_parts(53_403, 0).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Proxy Announcements (r:1 w:1)
    /// Proof: Proxy Announcements (max_values: None, max_size: Some(2361), added: 4836, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn reject_announcement(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `439 + a * (72 ±0)`
        //  Estimated: `7443`
        // Minimum execution time: 11_620 nanoseconds.
        Weight::from_parts(11_527_516, 7443)
            // Standard Error: 13_437
            .saturating_add(Weight::from_parts(57_758, 0).saturating_mul(a.into()))
            // Standard Error: 13_885
            .saturating_add(Weight::from_parts(2_983, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Proxy Proxies (r:1 w:0)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// Storage: Proxy Announcements (r:1 w:1)
    /// Proof: Proxy Announcements (max_values: None, max_size: Some(2361), added: 4836, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn announce(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `370 + a * (75 ±0) + p * (39 ±0)`
        //  Estimated: `11287`
        // Minimum execution time: 16_661 nanoseconds.
        Weight::from_parts(15_730_483, 11287)
            // Standard Error: 5_000
            .saturating_add(Weight::from_parts(82_241, 0).saturating_mul(a.into()))
            // Standard Error: 5_167
            .saturating_add(Weight::from_parts(30_016, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Proxy Proxies (r:1 w:1)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// The range of component `p` is `[1, 31]`.
    fn add_proxy(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `120 + p * (41 ±0)`
        //  Estimated: `3844`
        // Minimum execution time: 11_750 nanoseconds.
        Weight::from_parts(12_601_000, 3844)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Proxy Proxies (r:1 w:1)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxy(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `120 + p * (41 ±0)`
        //  Estimated: `3844`
        // Minimum execution time: 11_700 nanoseconds.
        Weight::from_parts(13_341_000, 3844)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Proxy Proxies (r:1 w:1)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxies(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `120 + p * (41 ±0)`
        //  Estimated: `3844`
        // Minimum execution time: 10_170 nanoseconds.
        Weight::from_parts(10_740_000, 3844)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Proxy Proxies (r:1 w:1)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// The range of component `p` is `[1, 31]`.
    fn create_pure(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `102`
        //  Estimated: `3844`
        // Minimum execution time: 12_081 nanoseconds.
        Weight::from_parts(12_630_000, 3844)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Proxy Proxies (r:1 w:1)
    /// Proof: Proxy Proxies (max_values: None, max_size: Some(1369), added: 3844, mode: MaxEncodedLen)
    /// The range of component `p` is `[0, 30]`.
    fn kill_pure(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `162 + p * (41 ±0)`
        //  Estimated: `3844`
        // Minimum execution time: 10_850 nanoseconds.
        Weight::from_parts(11_240_000, 3844)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
