// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_proxy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_proxy
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_proxy (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::weights::WeightInfo for WeightInfo<T> {
    // Storage: Proxy Proxies (r:1 w:0)
    fn proxy(p: u32) -> Weight {
        Weight::from_ref_time(38_813_017)
            // Standard Error: 12_164
            .saturating_add(Weight::from_ref_time(55_828).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    // Storage: Proxy Proxies (r:1 w:0)
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn proxy_announced(a: u32, p: u32) -> Weight {
        Weight::from_ref_time(70_138_051)
            // Standard Error: 22_795
            .saturating_add(Weight::from_ref_time(142_027).saturating_mul(a.into()))
            // Standard Error: 23_552
            .saturating_add(Weight::from_ref_time(44_496).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn remove_announcement(a: u32, _p: u32) -> Weight {
        Weight::from_ref_time(52_322_996)
            // Standard Error: 23_300
            .saturating_add(Weight::from_ref_time(89_493).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn reject_announcement(a: u32, _p: u32) -> Weight {
        Weight::from_ref_time(51_337_128)
            // Standard Error: 17_654
            .saturating_add(Weight::from_ref_time(102_594).saturating_mul(a.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Proxy Proxies (r:1 w:0)
    // Storage: Proxy Announcements (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn announce(a: u32, p: u32) -> Weight {
        Weight::from_ref_time(61_924_058)
            // Standard Error: 25_171
            .saturating_add(Weight::from_ref_time(170_865).saturating_mul(a.into()))
            // Standard Error: 26_006
            .saturating_add(Weight::from_ref_time(108_550).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn add_proxy(p: u32) -> Weight {
        Weight::from_ref_time(51_760_535)
            // Standard Error: 19_935
            .saturating_add(Weight::from_ref_time(181_482).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn remove_proxy(p: u32) -> Weight {
        Weight::from_ref_time(50_793_408)
            // Standard Error: 18_245
            .saturating_add(Weight::from_ref_time(229_589).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn remove_proxies(p: u32) -> Weight {
        Weight::from_ref_time(44_155_777)
            // Standard Error: 9_895
            .saturating_add(Weight::from_ref_time(138_340).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
    // Storage: Proxy Proxies (r:1 w:1)
    fn create_pure(p: u32) -> Weight {
        Weight::from_ref_time(55_555_781)
            // Standard Error: 6_475
            .saturating_add(Weight::from_ref_time(20_634).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Proxy Proxies (r:1 w:1)
    fn kill_pure(p: u32) -> Weight {
        Weight::from_ref_time(47_801_082)
            // Standard Error: 14_776
            .saturating_add(Weight::from_ref_time(49_907).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
