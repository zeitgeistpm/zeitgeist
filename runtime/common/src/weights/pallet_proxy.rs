// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_proxy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 48.0.0
//! DATE: `2025-07-10`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ztg-benchmark`, CPU: `AMD EPYC 7713 64-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/production/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=50
// --repeat=20
// --pallet=pallet_proxy
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_proxy (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn proxy(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `90 + p * (41 ±0)`
        //  Estimated: `4834`
        // Minimum execution time: 19_600 nanoseconds.
        Weight::from_parts(21_028_002, 4834)
            // Standard Error: 5_004
            .saturating_add(Weight::from_parts(79_339, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2361), added: 4836, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn proxy_announced(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `425 + a * (72 ±0) + p * (41 ±0)`
        //  Estimated: `5826`
        // Minimum execution time: 51_731 nanoseconds.
        Weight::from_parts(52_500_344, 5826)
            // Standard Error: 6_557
            .saturating_add(Weight::from_parts(313_269, 0).saturating_mul(a.into()))
            // Standard Error: 6_774
            .saturating_add(Weight::from_parts(64_509, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2361), added: 4836, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn remove_announcement(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `340 + a * (72 ±0)`
        //  Estimated: `5826`
        // Minimum execution time: 35_751 nanoseconds.
        Weight::from_parts(36_969_234, 5826)
            // Standard Error: 4_279
            .saturating_add(Weight::from_parts(291_927, 0).saturating_mul(a.into()))
            // Standard Error: 4_421
            .saturating_add(Weight::from_parts(29_539, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2361), added: 4836, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn reject_announcement(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `340 + a * (72 ±0)`
        //  Estimated: `5826`
        // Minimum execution time: 35_560 nanoseconds.
        Weight::from_parts(37_628_654, 5826)
            // Standard Error: 4_220
            .saturating_add(Weight::from_parts(277_296, 0).saturating_mul(a.into()))
            // Standard Error: 4_361
            .saturating_add(Weight::from_parts(15_231, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:0)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// Storage: `Proxy::Announcements` (r:1 w:1)
    /// Proof: `Proxy::Announcements` (`max_values`: None, `max_size`: Some(2361), added: 4836, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `a` is `[0, 31]`.
    /// The range of component `p` is `[1, 31]`.
    fn announce(a: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `353 + a * (72 ±0) + p * (41 ±0)`
        //  Estimated: `5826`
        // Minimum execution time: 47_151 nanoseconds.
        Weight::from_parts(47_839_209, 5826)
            // Standard Error: 5_107
            .saturating_add(Weight::from_parts(286_290, 0).saturating_mul(a.into()))
            // Standard Error: 5_277
            .saturating_add(Weight::from_parts(66_115, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn add_proxy(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `90 + p * (41 ±0)`
        //  Estimated: `4834`
        // Minimum execution time: 33_781 nanoseconds.
        Weight::from_parts(35_215_701, 4834)
            // Standard Error: 5_006
            .saturating_add(Weight::from_parts(106_254, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxy(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `90 + p * (41 ±0)`
        //  Estimated: `4834`
        // Minimum execution time: 33_551 nanoseconds.
        Weight::from_parts(35_087_027, 4834)
            // Standard Error: 6_205
            .saturating_add(Weight::from_parts(107_403, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn remove_proxies(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `90 + p * (41 ±0)`
        //  Estimated: `4834`
        // Minimum execution time: 30_341 nanoseconds.
        Weight::from_parts(31_372_007, 4834)
            // Standard Error: 4_920
            .saturating_add(Weight::from_parts(84_032, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[1, 31]`.
    fn create_pure(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `102`
        //  Estimated: `4834`
        // Minimum execution time: 36_351 nanoseconds.
        Weight::from_parts(37_717_020, 4834)
            // Standard Error: 6_853
            .saturating_add(Weight::from_parts(59_792, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Proxy::Proxies` (r:1 w:1)
    /// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(1369), added: 3844, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[0, 30]`.
    fn kill_pure(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `131 + p * (41 ±0)`
        //  Estimated: `4834`
        // Minimum execution time: 31_581 nanoseconds.
        Weight::from_parts(32_980_949, 4834)
            // Standard Error: 5_118
            .saturating_add(Weight::from_parts(77_744, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
