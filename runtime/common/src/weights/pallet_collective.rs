// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-04-15`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_collective (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::weights::WeightInfo for WeightInfo<T> {
    /// Storage: AdvisoryCommittee Members (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Voting (r:255 w:255)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[0, 100]`.
    /// The range of component `n` is `[0, 100]`.
    /// The range of component `p` is `[0, 255]`.
    fn set_members(m: u32, _n: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + m * (8195 ±0) + p * (3227 ±0)`
        //  Estimated: `33167 + m * (19751 ±60) + p * (10255 ±23)`
        // Minimum execution time: 32_240 nanoseconds.
        Weight::from_parts(36_010_000, 33167)
            // Standard Error: 331_381
            .saturating_add(Weight::from_parts(24_168_756, 0).saturating_mul(m.into()))
            // Standard Error: 130_107
            .saturating_add(Weight::from_parts(16_390_802, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 19751).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 10255).saturating_mul(p.into()))
    }
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[1, 100]`.
    fn execute(b: u32, m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `100 + m * (32 ±0)`
        //  Estimated: `596 + m * (32 ±0)`
        // Minimum execution time: 29_290 nanoseconds.
        Weight::from_parts(33_241_053, 596)
            // Standard Error: 107
            .saturating_add(Weight::from_parts(2_623, 0).saturating_mul(b.into()))
            // Standard Error: 1_108
            .saturating_add(Weight::from_parts(31_802, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
    }
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[1, 100]`.
    fn propose_execute(b: u32, m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `100 + m * (32 ±0)`
        //  Estimated: `3172 + m * (64 ±0)`
        // Minimum execution time: 32_470 nanoseconds.
        Weight::from_parts(36_593_323, 3172)
            // Standard Error: 263
            .saturating_add(Weight::from_parts(3_751, 0).saturating_mul(b.into()))
            // Standard Error: 2_716
            .saturating_add(Weight::from_parts(50_600, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
    }
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalCount (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalCount (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Voting (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[2, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `565 + m * (32 ±0) + p * (33 ±0)`
        //  Estimated: `6570 + m * (160 ±0) + p * (170 ±0)`
        // Minimum execution time: 51_800 nanoseconds.
        Weight::from_parts(49_667_053, 6570)
            // Standard Error: 666
            .saturating_add(Weight::from_parts(11_053, 0).saturating_mul(b.into()))
            // Standard Error: 6_959
            .saturating_add(Weight::from_parts(83_279, 0).saturating_mul(m.into()))
            // Standard Error: 2_679
            .saturating_add(Weight::from_parts(254_614, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(Weight::from_parts(0, 160).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 170).saturating_mul(p.into()))
    }
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Voting (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// The range of component `m` is `[5, 100]`.
    fn vote(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1240 + m * (64 ±0)`
        //  Estimated: `5448 + m * (128 ±0)`
        // Minimum execution time: 51_250 nanoseconds.
        Weight::from_parts(71_287_144, 5448)
            // Standard Error: 5_011
            .saturating_add(Weight::from_parts(73_018, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(Weight::from_parts(0, 128).saturating_mul(m.into()))
    }
    /// Storage: AdvisoryCommittee Voting (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_early_disapproved(m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `683 + m * (64 ±0) + p * (33 ±0)`
        //  Estimated: `6017 + m * (260 ±0) + p * (136 ±0)`
        // Minimum execution time: 48_690 nanoseconds.
        Weight::from_parts(55_109_178, 6017)
            // Standard Error: 6_245
            .saturating_add(Weight::from_parts(107_851, 0).saturating_mul(m.into()))
            // Standard Error: 2_373
            .saturating_add(Weight::from_parts(229_124, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 260).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 136).saturating_mul(p.into()))
    }
    /// Storage: AdvisoryCommittee Voting (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `926 + b * (1 ±0) + m * (64 ±0) + p * (36 ±0)`
        //  Estimated: `9916 + b * (4 ±0) + m * (248 ±0) + p * (144 ±0)`
        // Minimum execution time: 57_050 nanoseconds.
        Weight::from_parts(75_520_068, 9916)
            // Standard Error: 794
            .saturating_add(Weight::from_parts(7_735, 0).saturating_mul(b.into()))
            // Standard Error: 8_398
            .saturating_add(Weight::from_parts(53_897, 0).saturating_mul(m.into()))
            // Standard Error: 3_191
            .saturating_add(Weight::from_parts(306_904, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 4).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 248).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 144).saturating_mul(p.into()))
    }
    /// Storage: AdvisoryCommittee Voting (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_disapproved(m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `703 + m * (64 ±0) + p * (33 ±0)`
        //  Estimated: `7250 + m * (325 ±0) + p * (170 ±0)`
        // Minimum execution time: 46_220 nanoseconds.
        Weight::from_parts(62_405_239, 7250)
            // Standard Error: 7_440
            .saturating_add(Weight::from_parts(108_767, 0).saturating_mul(m.into()))
            // Standard Error: 2_827
            .saturating_add(Weight::from_parts(218_334, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 325).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 170).saturating_mul(p.into()))
    }
    /// Storage: AdvisoryCommittee Voting (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_approved(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `946 + b * (1 ±0) + m * (64 ±0) + p * (36 ±0)`
        //  Estimated: `11505 + b * (5 ±0) + m * (310 ±0) + p * (180 ±0)`
        // Minimum execution time: 60_490 nanoseconds.
        Weight::from_parts(87_540_688, 11505)
            // Standard Error: 865
            .saturating_add(Weight::from_parts(3_430, 0).saturating_mul(b.into()))
            // Standard Error: 3_474
            .saturating_add(Weight::from_parts(317_677, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 5).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 310).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 180).saturating_mul(p.into()))
    }
    /// Storage: AdvisoryCommittee Proposals (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Voting (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// The range of component `p` is `[1, 255]`.
    fn disapprove_proposal(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `258 + p * (32 ±0)`
        //  Estimated: `1266 + p * (96 ±0)`
        // Minimum execution time: 23_361 nanoseconds.
        Weight::from_parts(35_532_415, 1266)
            // Standard Error: 3_908
            .saturating_add(Weight::from_parts(240_150, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 96).saturating_mul(p.into()))
    }
}
