// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-02-15`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zafoi`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: `Some(Native)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=0
// --pallet=pallet_collective
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_collective (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::weights::WeightInfo for WeightInfo<T> {
    /// Storage: AdvisoryCommittee Members (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Voting (r:255 w:255)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[0, 100]`.
    /// The range of component `n` is `[0, 100]`.
    /// The range of component `p` is `[0, 255]`.
    fn set_members(m: u32, _n: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + m * (8264 ±0) + p * (3228 ±0)`
        //  Estimated: `1204 + m * (15297 ±1_899) + p * (5961 ±744)`
        // Minimum execution time: 13_300 nanoseconds.
        Weight::from_parts(13_300_000, 1204)
            // Standard Error: 3_265_951
            .saturating_add(Weight::from_parts(8_527_799, 0).saturating_mul(m.into()))
            // Standard Error: 1_280_765
            .saturating_add(Weight::from_parts(3_328_234, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 15297).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 5961).saturating_mul(p.into()))
    }
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[1, 100]`.
    fn execute(b: u32, m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `99 + m * (32 ±0)`
        //  Estimated: `595 + m * (32 ±0)`
        // Minimum execution time: 12_031 nanoseconds.
        Weight::from_parts(11_630_145, 595)
            // Standard Error: 84
            .saturating_add(Weight::from_parts(381, 0).saturating_mul(b.into()))
            // Standard Error: 874
            .saturating_add(Weight::from_parts(10_090, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
    }
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[1, 100]`.
    fn propose_execute(_b: u32, m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `99 + m * (32 ±0)`
        //  Estimated: `3170 + m * (64 ±0)`
        // Minimum execution time: 13_900 nanoseconds.
        Weight::from_parts(14_051_635, 3170)
            // Standard Error: 253
            .saturating_add(Weight::from_parts(13_186, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
    }
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalCount (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalCount (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Voting (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[2, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `68 + m * (32 ±0) + p * (36 ±0)`
        //  Estimated: `4305 + m * (160 ±0) + p * (180 ±0)`
        // Minimum execution time: 17_221 nanoseconds.
        Weight::from_parts(13_531_059, 4305)
            // Standard Error: 1_044
            .saturating_add(Weight::from_parts(1_656, 0).saturating_mul(b.into()))
            // Standard Error: 10_888
            .saturating_add(Weight::from_parts(19_520, 0).saturating_mul(m.into()))
            // Standard Error: 4_201
            .saturating_add(Weight::from_parts(41_586, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(Weight::from_parts(0, 160).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 180).saturating_mul(p.into()))
    }
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Voting (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// The range of component `m` is `[5, 100]`.
    fn vote(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1239 + m * (64 ±0)`
        //  Estimated: `18254`
        // Minimum execution time: 15_780 nanoseconds.
        Weight::from_parts(19_200_000, 18254)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: AdvisoryCommittee Voting (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_early_disapproved(m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `283 + m * (64 ±0) + p * (35 ±0)`
        //  Estimated: `4601 + m * (256 ±0) + p * (140 ±0)`
        // Minimum execution time: 19_241 nanoseconds.
        Weight::from_parts(16_291_175, 4601)
            // Standard Error: 3_698
            .saturating_add(Weight::from_parts(29_114, 0).saturating_mul(m.into()))
            // Standard Error: 1_397
            .saturating_add(Weight::from_parts(38_366, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 256).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 140).saturating_mul(p.into()))
    }
    /// Storage: AdvisoryCommittee Voting (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + b * (1 ±0) + m * (64 ±0) + p * (39 ±0)`
        //  Estimated: `4980 + b * (8 ±0) + m * (256 ±0) + p * (160 ±0)`
        // Minimum execution time: 25_361 nanoseconds.
        Weight::from_parts(16_276_001, 4980)
            // Standard Error: 228
            .saturating_add(Weight::from_parts(4_367, 0).saturating_mul(b.into()))
            // Standard Error: 2_433
            .saturating_add(Weight::from_parts(45_555, 0).saturating_mul(m.into()))
            // Standard Error: 919
            .saturating_add(Weight::from_parts(57_375, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 8).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 256).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 160).saturating_mul(p.into()))
    }
    /// Storage: AdvisoryCommittee Voting (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_disapproved(m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `303 + m * (64 ±0) + p * (35 ±0)`
        //  Estimated: `5480 + m * (320 ±0) + p * (175 ±0)`
        // Minimum execution time: 20_361 nanoseconds.
        Weight::from_parts(17_791_257, 5480)
            // Standard Error: 3_779
            .saturating_add(Weight::from_parts(25_307, 0).saturating_mul(m.into()))
            // Standard Error: 1_428
            .saturating_add(Weight::from_parts(39_013, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 320).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 175).saturating_mul(p.into()))
    }
    /// Storage: AdvisoryCommittee Voting (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Members (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_approved(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + b * (1 ±0) + m * (64 ±0) + p * (39 ±0)`
        //  Estimated: `5335 + b * (10 ±0) + m * (320 ±0) + p * (200 ±0)`
        // Minimum execution time: 27_001 nanoseconds.
        Weight::from_parts(18_839_784, 5335)
            // Standard Error: 590
            .saturating_add(Weight::from_parts(4_762, 0).saturating_mul(b.into()))
            // Standard Error: 6_281
            .saturating_add(Weight::from_parts(32_260, 0).saturating_mul(m.into()))
            // Standard Error: 2_374
            .saturating_add(Weight::from_parts(58_649, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 10).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 320).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 200).saturating_mul(p.into()))
    }
    /// Storage: AdvisoryCommittee Proposals (r:1 w:1)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Voting (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Voting (max_values: None, max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee ProposalOf (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee ProposalOf (max_values: None, max_size: None, mode: Measured)
    /// The range of component `p` is `[1, 255]`.
    fn disapprove_proposal(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `255 + p * (32 ±0)`
        //  Estimated: `25749`
        // Minimum execution time: 10_500 nanoseconds.
        Weight::from_parts(17_421_000, 25749)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(3))
    }
}
