// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-24`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=pallet_collective
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_collective (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Voting` (r:255 w:255)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[0, 100]`.
    /// The range of component `n` is `[0, 100]`.
    /// The range of component `p` is `[0, 255]`.
    fn set_members(m: u32, _n: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + m * (8179 ±0) + p * (3195 ±0)`
        //  Estimated: `1512 + m * (5046 ±1_880) + p * (1966 ±737)`
        // Minimum execution time: 16_200 nanoseconds.
        Weight::from_parts(16_200_000, 1512)
            // Standard Error: 5_241_523
            .saturating_add(Weight::from_parts(12_977_704, 0).saturating_mul(m.into()))
            // Standard Error: 2_055_499
            .saturating_add(Weight::from_parts(5_057_962, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 5046).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 1966).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[1, 100]`.
    fn execute(b: u32, m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `29 + m * (32 ±0)`
        //  Estimated: `1515 + m * (32 ±0)`
        // Minimum execution time: 12_800 nanoseconds.
        Weight::from_parts(12_896_724, 1515)
            // Standard Error: 694
            .saturating_add(Weight::from_parts(2_142, 0).saturating_mul(b.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[1, 100]`.
    fn propose_execute(b: u32, m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `29 + m * (32 ±0)`
        //  Estimated: `3495 + m * (32 ±0)`
        // Minimum execution time: 15_340 nanoseconds.
        Weight::from_parts(15_124_062, 3495)
            // Standard Error: 50
            .saturating_add(Weight::from_parts(1_908, 0).saturating_mul(b.into()))
            // Standard Error: 524
            .saturating_add(Weight::from_parts(2_121, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalCount` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Voting` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[2, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn propose_proposed(_b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + m * (32 ±0) + p * (36 ±0)`
        //  Estimated: `3464 + m * (32 ±0) + p * (36 ±0)`
        // Minimum execution time: 19_270 nanoseconds.
        Weight::from_parts(23_098_567, 3464)
            // Standard Error: 6_387
            .saturating_add(Weight::from_parts(141_640, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[5, 100]`.
    fn vote(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1136 + m * (64 ±0)`
        //  Estimated: `11004`
        // Minimum execution time: 19_360 nanoseconds.
        Weight::from_parts(21_720_000, 11004)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_early_disapproved(m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `149 + m * (64 ±0) + p * (35 ±0)`
        //  Estimated: `3615 + m * (64 ±0) + p * (35 ±0)`
        // Minimum execution time: 20_100 nanoseconds.
        Weight::from_parts(18_920_695, 3615)
            // Standard Error: 11_366
            .saturating_add(Weight::from_parts(10_416, 0).saturating_mul(m.into()))
            // Standard Error: 4_296
            .saturating_add(Weight::from_parts(137_637, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 35).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + b * (1 ±0) + m * (64 ±0) + p * (39 ±0)`
        //  Estimated: `3092 + b * (2 ±0) + m * (64 ±0) + p * (40 ±0)`
        // Minimum execution time: 27_820 nanoseconds.
        Weight::from_parts(21_784_999, 3092)
            // Standard Error: 1_287
            .saturating_add(Weight::from_parts(3_065, 0).saturating_mul(b.into()))
            // Standard Error: 13_701
            .saturating_add(Weight::from_parts(27_427, 0).saturating_mul(m.into()))
            // Standard Error: 5_178
            .saturating_add(Weight::from_parts(153_161, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 2).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_disapproved(m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `169 + m * (64 ±0) + p * (35 ±0)`
        //  Estimated: `3635 + m * (64 ±0) + p * (35 ±0)`
        // Minimum execution time: 22_210 nanoseconds.
        Weight::from_parts(21_803_339, 3635)
            // Standard Error: 25_078
            .saturating_add(Weight::from_parts(2_708, 0).saturating_mul(m.into()))
            // Standard Error: 9_478
            .saturating_add(Weight::from_parts(135_826, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 35).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_approved(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + b * (1 ±0) + m * (64 ±0) + p * (39 ±0)`
        //  Estimated: `3112 + b * (2 ±0) + m * (64 ±0) + p * (40 ±0)`
        // Minimum execution time: 30_370 nanoseconds.
        Weight::from_parts(27_326_152, 3112)
            // Standard Error: 1_447
            .saturating_add(Weight::from_parts(1_356, 0).saturating_mul(b.into()))
            // Standard Error: 15_408
            .saturating_add(Weight::from_parts(14_965, 0).saturating_mul(m.into()))
            // Standard Error: 5_823
            .saturating_add(Weight::from_parts(157_939, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 2).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 40).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Voting` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `p` is `[1, 255]`.
    fn disapprove_proposal(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `185 + p * (32 ±0)`
        //  Estimated: `9833`
        // Minimum execution time: 12_160 nanoseconds.
        Weight::from_parts(44_550_000, 9833)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(3))
    }
}
