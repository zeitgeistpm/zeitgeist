// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-07-24`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_collective (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Voting` (r:255 w:255)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[0, 100]`.
    /// The range of component `n` is `[0, 100]`.
    /// The range of component `p` is `[0, 255]`.
    fn set_members(m: u32, _n: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + m * (8192 ±0) + p * (3194 ±0)`
        //  Estimated: `32746 + m * (4970 ±60) + p * (4343 ±23)`
        // Minimum execution time: 37_640 nanoseconds.
        Weight::from_parts(37_820_000, 32746)
            // Standard Error: 342_845
            .saturating_add(Weight::from_parts(25_501_936, 0).saturating_mul(m.into()))
            // Standard Error: 134_608
            .saturating_add(Weight::from_parts(18_454_663, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 4970).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 4343).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[1, 100]`.
    fn execute(b: u32, m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `68 + m * (32 ±0)`
        //  Estimated: `1554 + m * (32 ±0)`
        // Minimum execution time: 29_810 nanoseconds.
        Weight::from_parts(38_342_071, 1554)
            // Standard Error: 355
            .saturating_add(Weight::from_parts(2_144, 0).saturating_mul(b.into()))
            // Standard Error: 3_667
            .saturating_add(Weight::from_parts(21_795, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[1, 100]`.
    fn propose_execute(b: u32, m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `68 + m * (32 ±0)`
        //  Estimated: `3534 + m * (32 ±0)`
        // Minimum execution time: 34_190 nanoseconds.
        Weight::from_parts(41_468_423, 3534)
            // Standard Error: 380
            .saturating_add(Weight::from_parts(2_531, 0).saturating_mul(b.into()))
            // Standard Error: 3_920
            .saturating_add(Weight::from_parts(67_320, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalCount` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Voting` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[2, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `501 + m * (32 ±0) + p * (33 ±0)`
        //  Estimated: `3926 + m * (32 ±0) + p * (34 ±0)`
        // Minimum execution time: 48_060 nanoseconds.
        Weight::from_parts(72_847_338, 3926)
            // Standard Error: 1_256
            .saturating_add(Weight::from_parts(326, 0).saturating_mul(b.into()))
            // Standard Error: 13_109
            .saturating_add(Weight::from_parts(36_498, 0).saturating_mul(m.into()))
            // Standard Error: 5_046
            .saturating_add(Weight::from_parts(378_035, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 34).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[5, 100]`.
    fn vote(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1175 + m * (64 ±0)`
        //  Estimated: `4639 + m * (64 ±0)`
        // Minimum execution time: 53_080 nanoseconds.
        Weight::from_parts(73_109_709, 4639)
            // Standard Error: 5_086
            .saturating_add(Weight::from_parts(105_322, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_early_disapproved(m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `586 + m * (64 ±0) + p * (33 ±0)`
        //  Estimated: `4006 + m * (65 ±0) + p * (34 ±0)`
        // Minimum execution time: 62_949 nanoseconds.
        Weight::from_parts(74_028_560, 4006)
            // Standard Error: 10_128
            .saturating_add(Weight::from_parts(65_347, 0).saturating_mul(m.into()))
            // Standard Error: 3_849
            .saturating_add(Weight::from_parts(290_905, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 65).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 34).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `798 + b * (1 ±0) + m * (64 ±0) + p * (36 ±0)`
        //  Estimated: `4337 + b * (1 ±0) + m * (62 ±0) + p * (36 ±0)`
        // Minimum execution time: 65_450 nanoseconds.
        Weight::from_parts(94_281_108, 4337)
            // Standard Error: 748
            .saturating_add(Weight::from_parts(10_158, 0).saturating_mul(b.into()))
            // Standard Error: 7_910
            .saturating_add(Weight::from_parts(36_894, 0).saturating_mul(m.into()))
            // Standard Error: 3_006
            .saturating_add(Weight::from_parts(344_530, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 62).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_disapproved(m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `606 + m * (64 ±0) + p * (33 ±0)`
        //  Estimated: `4026 + m * (65 ±0) + p * (34 ±0)`
        // Minimum execution time: 64_390 nanoseconds.
        Weight::from_parts(70_683_234, 4026)
            // Standard Error: 10_591
            .saturating_add(Weight::from_parts(135_054, 0).saturating_mul(m.into()))
            // Standard Error: 4_025
            .saturating_add(Weight::from_parts(307_190, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 65).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 34).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_approved(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `818 + b * (1 ±0) + m * (64 ±0) + p * (36 ±0)`
        //  Estimated: `4357 + b * (1 ±0) + m * (62 ±0) + p * (36 ±0)`
        // Minimum execution time: 85_380 nanoseconds.
        Weight::from_parts(91_547_722, 4357)
            // Standard Error: 1_298
            .saturating_add(Weight::from_parts(15_683, 0).saturating_mul(b.into()))
            // Standard Error: 13_725
            .saturating_add(Weight::from_parts(46_296, 0).saturating_mul(m.into()))
            // Standard Error: 5_216
            .saturating_add(Weight::from_parts(377_484, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 62).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Voting` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `p` is `[1, 255]`.
    fn disapprove_proposal(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `226 + p * (32 ±0)`
        //  Estimated: `1710 + p * (32 ±0)`
        // Minimum execution time: 33_040 nanoseconds.
        Weight::from_parts(43_701_252, 1710)
            // Standard Error: 2_402
            .saturating_add(Weight::from_parts(300_555, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(p.into()))
    }
}
