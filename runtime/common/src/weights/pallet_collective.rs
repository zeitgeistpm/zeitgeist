// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 48.0.0
//! DATE: `2025-07-10`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ztg-benchmark`, CPU: `AMD EPYC 7713 64-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/production/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_collective (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Voting` (r:255 w:255)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[0, 100]`.
    /// The range of component `n` is `[0, 100]`.
    /// The range of component `p` is `[0, 255]`.
    fn set_members(m: u32, _n: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + m * (8192 ±0) + p * (3194 ±0)`
        //  Estimated: `32708 + m * (4970 ±60) + p * (4343 ±23)`
        // Minimum execution time: 25_320 nanoseconds.
        Weight::from_parts(25_900_000, 32708)
            // Standard Error: 333_479
            .saturating_add(Weight::from_parts(22_372_682, 0).saturating_mul(m.into()))
            // Standard Error: 130_931
            .saturating_add(Weight::from_parts(14_712_891, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
            .saturating_add(Weight::from_parts(0, 4970).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 4343).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[1, 100]`.
    fn execute(b: u32, m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `30 + m * (32 ±0)`
        //  Estimated: `1516 + m * (32 ±0)`
        // Minimum execution time: 20_840 nanoseconds.
        Weight::from_parts(20_654_594, 1516)
            // Standard Error: 129
            .saturating_add(Weight::from_parts(1_463, 0).saturating_mul(b.into()))
            // Standard Error: 1_337
            .saturating_add(Weight::from_parts(22_737, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[1, 100]`.
    fn propose_execute(b: u32, m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `30 + m * (32 ±0)`
        //  Estimated: `3496 + m * (32 ±0)`
        // Minimum execution time: 25_190 nanoseconds.
        Weight::from_parts(25_423_152, 3496)
            // Standard Error: 171
            .saturating_add(Weight::from_parts(1_172, 0).saturating_mul(b.into()))
            // Standard Error: 1_768
            .saturating_add(Weight::from_parts(33_618, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalCount` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Voting` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[2, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `463 + m * (32 ±0) + p * (33 ±0)`
        //  Estimated: `3888 + m * (32 ±0) + p * (34 ±0)`
        // Minimum execution time: 33_221 nanoseconds.
        Weight::from_parts(35_036_355, 3888)
            // Standard Error: 302
            .saturating_add(Weight::from_parts(5_224, 0).saturating_mul(b.into()))
            // Standard Error: 3_159
            .saturating_add(Weight::from_parts(32_692, 0).saturating_mul(m.into()))
            // Standard Error: 1_216
            .saturating_add(Weight::from_parts(254_662, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 34).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[5, 100]`.
    fn vote(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1137 + m * (64 ±0)`
        //  Estimated: `4601 + m * (64 ±0)`
        // Minimum execution time: 38_741 nanoseconds.
        Weight::from_parts(42_250_344, 4601)
            // Standard Error: 1_207
            .saturating_add(Weight::from_parts(45_852, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_early_disapproved(m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `548 + m * (64 ±0) + p * (33 ±0)`
        //  Estimated: `3968 + m * (65 ±0) + p * (34 ±0)`
        // Minimum execution time: 38_021 nanoseconds.
        Weight::from_parts(41_955_248, 3968)
            // Standard Error: 2_177
            .saturating_add(Weight::from_parts(32_691, 0).saturating_mul(m.into()))
            // Standard Error: 827
            .saturating_add(Weight::from_parts(227_481, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 65).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 34).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760 + b * (1 ±0) + m * (64 ±0) + p * (36 ±0)`
        //  Estimated: `4299 + b * (1 ±0) + m * (62 ±0) + p * (36 ±0)`
        // Minimum execution time: 52_131 nanoseconds.
        Weight::from_parts(56_776_472, 4299)
            // Standard Error: 326
            .saturating_add(Weight::from_parts(3_010, 0).saturating_mul(b.into()))
            // Standard Error: 3_453
            .saturating_add(Weight::from_parts(26_698, 0).saturating_mul(m.into()))
            // Standard Error: 1_312
            .saturating_add(Weight::from_parts(249_948, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 62).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_disapproved(m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `568 + m * (64 ±0) + p * (33 ±0)`
        //  Estimated: `3988 + m * (65 ±0) + p * (34 ±0)`
        // Minimum execution time: 40_941 nanoseconds.
        Weight::from_parts(44_340_412, 3988)
            // Standard Error: 2_076
            .saturating_add(Weight::from_parts(39_932, 0).saturating_mul(m.into()))
            // Standard Error: 789
            .saturating_add(Weight::from_parts(230_778, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 65).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 34).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Voting` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `b` is `[2, 1024]`.
    /// The range of component `m` is `[4, 100]`.
    /// The range of component `p` is `[1, 255]`.
    fn close_approved(b: u32, m: u32, p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `780 + b * (1 ±0) + m * (64 ±0) + p * (36 ±0)`
        //  Estimated: `4319 + b * (1 ±0) + m * (62 ±0) + p * (36 ±0)`
        // Minimum execution time: 55_951 nanoseconds.
        Weight::from_parts(58_706_300, 4319)
            // Standard Error: 421
            .saturating_add(Weight::from_parts(4_214, 0).saturating_mul(b.into()))
            // Standard Error: 4_458
            .saturating_add(Weight::from_parts(26_827, 0).saturating_mul(m.into()))
            // Standard Error: 1_694
            .saturating_add(Weight::from_parts(265_386, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 1).saturating_mul(b.into()))
            .saturating_add(Weight::from_parts(0, 62).saturating_mul(m.into()))
            .saturating_add(Weight::from_parts(0, 36).saturating_mul(p.into()))
    }
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:1)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Voting` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::ProposalOf` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `p` is `[1, 255]`.
    fn disapprove_proposal(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `188 + p * (32 ±0)`
        //  Estimated: `1672 + p * (32 ±0)`
        // Minimum execution time: 21_131 nanoseconds.
        Weight::from_parts(25_009_414, 1672)
            // Standard Error: 829
            .saturating_add(Weight::from_parts(230_286, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(p.into()))
    }
}
