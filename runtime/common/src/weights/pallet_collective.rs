// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_collective
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-08, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_collective
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_collective (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective::weights::WeightInfo for WeightInfo<T> {
    // Storage: AdvisoryCommittee Members (r:1 w:1)
    // Storage: AdvisoryCommittee Proposals (r:1 w:0)
    // Storage: AdvisoryCommittee Prime (r:0 w:1)
    // Storage: AdvisoryCommittee Voting (r:255 w:255)
    fn set_members(m: u32, _n: u32, p: u32) -> Weight {
        Weight::from_ref_time(12_092_000)
            // Standard Error: 120_533
            .saturating_add(Weight::from_ref_time(9_830_156).saturating_mul(m.into()))
            // Standard Error: 47_324
            .saturating_add(Weight::from_ref_time(5_530_913).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
    }
    // Storage: AdvisoryCommittee Members (r:1 w:0)
    fn execute(b: u32, m: u32) -> Weight {
        Weight::from_ref_time(13_910_710)
            // Standard Error: 39
            .saturating_add(Weight::from_ref_time(1_329).saturating_mul(b.into()))
            // Standard Error: 409
            .saturating_add(Weight::from_ref_time(13_307).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    // Storage: AdvisoryCommittee Members (r:1 w:0)
    // Storage: AdvisoryCommittee ProposalOf (r:1 w:0)
    fn propose_execute(b: u32, m: u32) -> Weight {
        Weight::from_ref_time(15_156_779)
            // Standard Error: 36
            .saturating_add(Weight::from_ref_time(1_439).saturating_mul(b.into()))
            // Standard Error: 378
            .saturating_add(Weight::from_ref_time(17_083).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
    }
    // Storage: AdvisoryCommittee Members (r:1 w:0)
    // Storage: AdvisoryCommittee ProposalOf (r:1 w:1)
    // Storage: AdvisoryCommittee Proposals (r:1 w:1)
    // Storage: AdvisoryCommittee ProposalCount (r:1 w:1)
    // Storage: AdvisoryCommittee Voting (r:0 w:1)
    fn propose_proposed(b: u32, m: u32, p: u32) -> Weight {
        Weight::from_ref_time(22_819_241)
            // Standard Error: 354
            .saturating_add(Weight::from_ref_time(4_011).saturating_mul(b.into()))
            // Standard Error: 3_707
            .saturating_add(Weight::from_ref_time(35_095).saturating_mul(m.into()))
            // Standard Error: 1_427
            .saturating_add(Weight::from_ref_time(90_320).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    // Storage: AdvisoryCommittee Members (r:1 w:0)
    // Storage: AdvisoryCommittee Voting (r:1 w:1)
    fn vote(m: u32) -> Weight {
        Weight::from_ref_time(34_942_963)
            // Standard Error: 5_250
            .saturating_add(Weight::from_ref_time(43_923).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: AdvisoryCommittee Voting (r:1 w:1)
    // Storage: AdvisoryCommittee Members (r:1 w:0)
    // Storage: AdvisoryCommittee Proposals (r:1 w:1)
    // Storage: AdvisoryCommittee ProposalOf (r:0 w:1)
    fn close_early_disapproved(_m: u32, p: u32) -> Weight {
        Weight::from_ref_time(31_521_383)
            // Standard Error: 1_768
            .saturating_add(Weight::from_ref_time(91_263).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: AdvisoryCommittee Voting (r:1 w:1)
    // Storage: AdvisoryCommittee Members (r:1 w:0)
    // Storage: AdvisoryCommittee ProposalOf (r:1 w:1)
    // Storage: AdvisoryCommittee Proposals (r:1 w:1)
    fn close_early_approved(b: u32, m: u32, p: u32) -> Weight {
        Weight::from_ref_time(27_750_291)
            // Standard Error: 381
            .saturating_add(Weight::from_ref_time(3_284).saturating_mul(b.into()))
            // Standard Error: 4_030
            .saturating_add(Weight::from_ref_time(77_635).saturating_mul(m.into()))
            // Standard Error: 1_532
            .saturating_add(Weight::from_ref_time(101_653).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: AdvisoryCommittee Voting (r:1 w:1)
    // Storage: AdvisoryCommittee Members (r:1 w:0)
    // Storage: AdvisoryCommittee Prime (r:1 w:0)
    // Storage: AdvisoryCommittee Proposals (r:1 w:1)
    // Storage: AdvisoryCommittee ProposalOf (r:0 w:1)
    fn close_disapproved(_m: u32, p: u32) -> Weight {
        Weight::from_ref_time(35_447_953)
            // Standard Error: 1_843
            .saturating_add(Weight::from_ref_time(82_511).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: AdvisoryCommittee Voting (r:1 w:1)
    // Storage: AdvisoryCommittee Members (r:1 w:0)
    // Storage: AdvisoryCommittee Prime (r:1 w:0)
    // Storage: AdvisoryCommittee ProposalOf (r:1 w:1)
    // Storage: AdvisoryCommittee Proposals (r:1 w:1)
    fn close_approved(b: u32, m: u32, p: u32) -> Weight {
        Weight::from_ref_time(32_560_116)
            // Standard Error: 378
            .saturating_add(Weight::from_ref_time(1_465).saturating_mul(b.into()))
            // Standard Error: 4_008
            .saturating_add(Weight::from_ref_time(62_930).saturating_mul(m.into()))
            // Standard Error: 1_523
            .saturating_add(Weight::from_ref_time(101_811).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: AdvisoryCommittee Proposals (r:1 w:1)
    // Storage: AdvisoryCommittee Voting (r:0 w:1)
    // Storage: AdvisoryCommittee ProposalOf (r:0 w:1)
    fn disapprove_proposal(p: u32) -> Weight {
        Weight::from_ref_time(20_281_170)
            // Standard Error: 1_763
            .saturating_add(Weight::from_ref_time(84_565).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(3))
    }
}
