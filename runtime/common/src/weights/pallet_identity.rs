// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 48.0.0
//! DATE: `2025-07-10`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ztg-benchmark`, CPU: `AMD EPYC 7713 64-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/production/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_identity (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn add_registrar(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `32 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 15_490 nanoseconds.
        Weight::from_parts(16_228_973, 1942)
            // Standard Error: 8_874
            .saturating_add(Weight::from_parts(166_945, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    fn set_identity(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4602 + r * (5 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 131_872 nanoseconds.
        Weight::from_parts(133_547_713, 8337)
            // Standard Error: 19_779
            .saturating_add(Weight::from_parts(482_026, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:64 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 64]`.
    fn set_subs_new(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101`
        //  Estimated: `8337 + s * (2589 ±0)`
        // Minimum execution time: 16_140 nanoseconds.
        Weight::from_parts(34_340_339, 8337)
            // Standard Error: 8_860
            .saturating_add(Weight::from_parts(5_446_762, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
            .saturating_add(Weight::from_parts(0, 2589).saturating_mul(s.into()))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:0 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[0, 64]`.
    fn set_subs_old(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `194 + p * (32 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 16_010 nanoseconds.
        Weight::from_parts(35_967_101, 8337)
            // Standard Error: 7_917
            .saturating_add(Weight::from_parts(2_086_294, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
    }
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:0 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    fn clear_identity(r: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4696 + r * (5 ±0) + s * (32 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 71_952 nanoseconds.
        Weight::from_parts(74_060_481, 8337)
            // Standard Error: 44_100
            .saturating_add(Weight::from_parts(217_411, 0).saturating_mul(r.into()))
            // Standard Error: 5_122
            .saturating_add(Weight::from_parts(2_106_331, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: `Identity::Registrars` (r:1 w:0)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    fn request_judgement(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4592 + r * (57 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 98_212 nanoseconds.
        Weight::from_parts(100_089_810, 8337)
            // Standard Error: 22_990
            .saturating_add(Weight::from_parts(141_441, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    fn cancel_request(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4623`
        //  Estimated: `8337`
        // Minimum execution time: 95_582 nanoseconds.
        Weight::from_parts(97_508_284, 8337)
            // Standard Error: 20_486
            .saturating_add(Weight::from_parts(131_323, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn set_fee(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 11_700 nanoseconds.
        Weight::from_parts(12_303_819, 1942)
            // Standard Error: 5_874
            .saturating_add(Weight::from_parts(93_463, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn set_account_id(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 10_201 nanoseconds.
        Weight::from_parts(10_808_506, 1942)
            // Standard Error: 6_758
            .saturating_add(Weight::from_parts(128_638, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn set_fields(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 10_260 nanoseconds.
        Weight::from_parts(10_840_418, 1942)
            // Standard Error: 5_767
            .saturating_add(Weight::from_parts(108_852, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:0)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn provide_judgement(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4670 + r * (57 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 114_103 nanoseconds.
        Weight::from_parts(116_192_745, 8337)
            // Standard Error: 22_827
            .saturating_add(Weight::from_parts(140_744, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:0 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    fn kill_identity(r: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `5051 + r * (5 ±0) + s * (32 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 97_062 nanoseconds.
        Weight::from_parts(97_075_826, 8337)
            // Standard Error: 66_971
            .saturating_add(Weight::from_parts(561_135, 0).saturating_mul(r.into()))
            // Standard Error: 7_779
            .saturating_add(Weight::from_parts(2_123_661, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 63]`.
    fn add_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `323 + s * (41 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 41_901 nanoseconds.
        Weight::from_parts(47_850_310, 8337)
            // Standard Error: 5_146
            .saturating_add(Weight::from_parts(184_849, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 64]`.
    fn rename_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `432 + s * (7 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 21_381 nanoseconds.
        Weight::from_parts(24_550_666, 8337)
            // Standard Error: 2_973
            .saturating_add(Weight::from_parts(62_183, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 64]`.
    fn remove_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480 + s * (39 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 48_201 nanoseconds.
        Weight::from_parts(52_056_303, 8337)
            // Standard Error: 4_970
            .saturating_add(Weight::from_parts(119_751, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 63]`.
    fn quit_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `583 + s * (42 ±0)`
        //  Estimated: `5571`
        // Minimum execution time: 37_201 nanoseconds.
        Weight::from_parts(39_970_293, 5571)
            // Standard Error: 3_412
            .saturating_add(Weight::from_parts(133_827, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Identity::UsernameAuthorities` (r:0 w:1)
    /// Proof: `Identity::UsernameAuthorities` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    fn add_username_authority() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_730 nanoseconds.
        Weight::from_parts(11_121_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::UsernameAuthorities` (r:1 w:1)
    /// Proof: `Identity::UsernameAuthorities` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    fn remove_username_authority() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3517`
        // Minimum execution time: 17_281 nanoseconds.
        Weight::from_parts(17_841_000, 3517)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::UsernameAuthorities` (r:1 w:1)
    /// Proof: `Identity::UsernameAuthorities` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    /// Storage: `Identity::AccountOfUsername` (r:1 w:1)
    /// Proof: `Identity::AccountOfUsername` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
    /// Storage: `Identity::PendingUsernames` (r:1 w:0)
    /// Proof: `Identity::PendingUsernames` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    fn set_username_for() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `8337`
        // Minimum execution time: 94_613 nanoseconds.
        Weight::from_parts(95_612_000, 8337)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Identity::PendingUsernames` (r:1 w:1)
    /// Proof: `Identity::PendingUsernames` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::AccountOfUsername` (r:0 w:1)
    /// Proof: `Identity::AccountOfUsername` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
    fn accept_username() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `119`
        //  Estimated: `8337`
        // Minimum execution time: 34_111 nanoseconds.
        Weight::from_parts(35_191_000, 8337)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Identity::PendingUsernames` (r:1 w:1)
    /// Proof: `Identity::PendingUsernames` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
    fn remove_expired_approval() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `119`
        //  Estimated: `3554`
        // Minimum execution time: 28_521 nanoseconds.
        Weight::from_parts(32_920_000, 3554)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::AccountOfUsername` (r:1 w:0)
    /// Proof: `Identity::AccountOfUsername` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    fn set_primary_username() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `257`
        //  Estimated: `8337`
        // Minimum execution time: 28_640 nanoseconds.
        Weight::from_parts(29_241_000, 8337)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::AccountOfUsername` (r:1 w:1)
    /// Proof: `Identity::AccountOfUsername` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    fn remove_dangling_username() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `98`
        //  Estimated: `8337`
        // Minimum execution time: 20_451 nanoseconds.
        Weight::from_parts(21_680_000, 8337)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
