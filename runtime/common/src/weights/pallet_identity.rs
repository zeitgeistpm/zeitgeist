// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-08-12`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_identity (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn add_registrar(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `32 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 14_410 nanoseconds.
        Weight::from_parts(15_407_333, 1942)
            // Standard Error: 11_030
            .saturating_add(Weight::from_parts(212_489, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn set_identity(r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `442 + r * (5 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 23_670 nanoseconds.
        Weight::from_parts(35_369_137, 8303)
            // Standard Error: 29_907
            .saturating_add(Weight::from_parts(307_325, 0).saturating_mul(r.into()))
            // Standard Error: 3_473
            .saturating_add(Weight::from_parts(605_307, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:64 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 64]`.
    fn set_subs_new(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101`
        //  Estimated: `8303 + s * (2589 ±0)`
        // Minimum execution time: 11_121 nanoseconds.
        Weight::from_parts(30_946_234, 8303)
            // Standard Error: 51_947
            .saturating_add(Weight::from_parts(4_241_610, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
            .saturating_add(Weight::from_parts(0, 2589).saturating_mul(s.into()))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:0 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[0, 64]`.
    fn set_subs_old(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `194 + p * (32 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 10_961 nanoseconds.
        Weight::from_parts(27_050_993, 8303)
            // Standard Error: 7_711
            .saturating_add(Weight::from_parts(1_722_355, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
    }
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:0 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    /// The range of component `x` is `[0, 64]`.
    fn clear_identity(r: u32, s: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `471 + r * (5 ±0) + s * (32 ±0) + x * (66 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 57_681 nanoseconds.
        Weight::from_parts(33_121_561, 8303)
            // Standard Error: 57_995
            .saturating_add(Weight::from_parts(443_118, 0).saturating_mul(r.into()))
            // Standard Error: 6_753
            .saturating_add(Weight::from_parts(1_722_243, 0).saturating_mul(s.into()))
            // Standard Error: 6_753
            .saturating_add(Weight::from_parts(374_023, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: `Identity::Registrars` (r:1 w:0)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn request_judgement(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `367 + r * (57 ±0) + x * (66 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 36_451 nanoseconds.
        Weight::from_parts(52_476_624, 8303)
            // Standard Error: 12_317
            .saturating_add(Weight::from_parts(561_685, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn cancel_request(r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `398 + x * (66 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 33_951 nanoseconds.
        Weight::from_parts(32_485_363, 8303)
            // Standard Error: 30_691
            .saturating_add(Weight::from_parts(376_729, 0).saturating_mul(r.into()))
            // Standard Error: 3_565
            .saturating_add(Weight::from_parts(631_886, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn set_fee(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 9_240 nanoseconds.
        Weight::from_parts(9_898_407, 1942)
            // Standard Error: 7_804
            .saturating_add(Weight::from_parts(178_705, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn set_account_id(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 8_380 nanoseconds.
        Weight::from_parts(9_219_043, 1942)
            // Standard Error: 7_235
            .saturating_add(Weight::from_parts(131_081, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn set_fields(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 8_290 nanoseconds.
        Weight::from_parts(8_954_875, 1942)
            // Standard Error: 6_957
            .saturating_add(Weight::from_parts(151_835, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:0)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    /// The range of component `x` is `[0, 64]`.
    fn provide_judgement(r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `445 + r * (57 ±0) + x * (66 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 26_260 nanoseconds.
        Weight::from_parts(26_430_246, 8303)
            // Standard Error: 43_942
            .saturating_add(Weight::from_parts(89_107, 0).saturating_mul(r.into()))
            // Standard Error: 4_490
            .saturating_add(Weight::from_parts(987_183, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:0 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    /// The range of component `x` is `[0, 64]`.
    fn kill_identity(r: u32, s: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `826 + r * (5 ±0) + s * (32 ±0) + x * (66 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 79_731 nanoseconds.
        Weight::from_parts(51_352_548, 8303)
            // Standard Error: 72_069
            .saturating_add(Weight::from_parts(562_966, 0).saturating_mul(r.into()))
            // Standard Error: 8_392
            .saturating_add(Weight::from_parts(1_760_970, 0).saturating_mul(s.into()))
            // Standard Error: 8_392
            .saturating_add(Weight::from_parts(455_995, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 63]`.
    fn add_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `323 + s * (41 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 33_211 nanoseconds.
        Weight::from_parts(38_752_704, 8303)
            // Standard Error: 4_482
            .saturating_add(Weight::from_parts(128_208, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 64]`.
    fn rename_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `432 + s * (7 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 15_100 nanoseconds.
        Weight::from_parts(17_219_992, 8303)
            // Standard Error: 1_600
            .saturating_add(Weight::from_parts(53_129, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 64]`.
    fn remove_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480 + s * (39 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 37_551 nanoseconds.
        Weight::from_parts(40_470_778, 8303)
            // Standard Error: 3_963
            .saturating_add(Weight::from_parts(108_592, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 63]`.
    fn quit_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `583 + s * (42 ±0)`
        //  Estimated: `5571`
        // Minimum execution time: 28_281 nanoseconds.
        Weight::from_parts(30_998_496, 5571)
            // Standard Error: 2_453
            .saturating_add(Weight::from_parts(105_811, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
