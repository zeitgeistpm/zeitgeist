// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-02-15`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zafoi`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: `Some(Native)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=0
// --pallet=pallet_identity
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_identity (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::weights::WeightInfo for WeightInfo<T> {
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    fn add_registrar(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `62 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 7_880 nanoseconds.
        Weight::from_parts(8_790_000, 952)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn set_identity(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `474 + r * (5 ±0)`
        //  Estimated: `7313`
        // Minimum execution time: 14_540 nanoseconds.
        Weight::from_parts(14_889_142, 7313)
            // Standard Error: 10_405
            .saturating_add(Weight::from_parts(138_210, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:64 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 64]`.
    fn set_subs_new(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101`
        //  Estimated: `177590`
        // Minimum execution time: 6_180 nanoseconds.
        Weight::from_parts(106_043_000, 177590)
            .saturating_add(T::DbWeight::get().reads(66))
            .saturating_add(T::DbWeight::get().writes(65))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:0 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `p` is `[0, 64]`.
    fn set_subs_old(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + p * (33 ±0)`
        //  Estimated: `11894`
        // Minimum execution time: 5_530 nanoseconds.
        Weight::from_parts(50_692_000, 11894)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(65))
    }
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:0 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    /// The range of component `x` is `[0, 64]`.
    fn clear_identity(r: u32, s: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `408 + r * (5 ±0) + s * (33 ±0) + x * (66 ±0)`
        //  Estimated: `11894`
        // Minimum execution time: 22_121 nanoseconds.
        Weight::from_parts(12_695_285, 11894)
            // Standard Error: 60_892
            .saturating_add(Weight::from_parts(157_714, 0).saturating_mul(r.into()))
            // Standard Error: 6_660
            .saturating_add(Weight::from_parts(615_843, 0).saturating_mul(s.into()))
            // Standard Error: 6_660
            .saturating_add(Weight::from_parts(127_562, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: Identity Registrars (r:1 w:0)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn request_judgement(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `428 + r * (57 ±0) + x * (66 ±0)`
        //  Estimated: `8265`
        // Minimum execution time: 15_540 nanoseconds.
        Weight::from_parts(19_157_142, 8265)
            // Standard Error: 135
            .saturating_add(Weight::from_parts(156_500, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn cancel_request(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `429 + x * (66 ±0)`
        //  Estimated: `7313`
        // Minimum execution time: 13_150 nanoseconds.
        Weight::from_parts(16_887_142, 7313)
            // Standard Error: 4_600
            .saturating_add(Weight::from_parts(156_890, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    fn set_fee(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `121 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 5_240 nanoseconds.
        Weight::from_parts(5_750_000, 952)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    fn set_account_id(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `121 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 4_740 nanoseconds.
        Weight::from_parts(5_200_000, 952)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    fn set_fields(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `121 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 4_800 nanoseconds.
        Weight::from_parts(5_030_000, 952)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity Registrars (r:1 w:0)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    /// The range of component `x` is `[0, 64]`.
    fn provide_judgement(r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `508 + r * (57 ±0) + x * (66 ±0)`
        //  Estimated: `8265`
        // Minimum execution time: 12_260 nanoseconds.
        Weight::from_parts(11_834_166, 8265)
            // Standard Error: 99_592
            .saturating_add(Weight::from_parts(60_833, 0).saturating_mul(r.into()))
            // Standard Error: 9_336
            .saturating_add(Weight::from_parts(231_187, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:0 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    /// The range of component `x` is `[0, 64]`.
    fn kill_identity(_r: u32, s: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `789 + r * (9 ±0) + s * (33 ±0) + x * (66 ±0)`
        //  Estimated: `17108`
        // Minimum execution time: 30_611 nanoseconds.
        Weight::from_parts(29_901_714, 17108)
            // Standard Error: 33_592
            .saturating_add(Weight::from_parts(643_239, 0).saturating_mul(s.into()))
            // Standard Error: 33_592
            .saturating_add(Weight::from_parts(70_255, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 63]`.
    fn add_sub(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + s * (43 ±0)`
        //  Estimated: `14483`
        // Minimum execution time: 14_570 nanoseconds.
        Weight::from_parts(19_940_000, 14483)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 64]`.
    fn rename_sub(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `297 + s * (8 ±0)`
        //  Estimated: `9902`
        // Minimum execution time: 7_751 nanoseconds.
        Weight::from_parts(9_820_000, 9902)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 64]`.
    fn remove_sub(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `376 + s * (40 ±0)`
        //  Estimated: `14483`
        // Minimum execution time: 17_470 nanoseconds.
        Weight::from_parts(20_470_000, 14483)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 63]`.
    fn quit_sub(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `357 + s * (42 ±0)`
        //  Estimated: `7170`
        // Minimum execution time: 11_930 nanoseconds.
        Weight::from_parts(15_691_000, 7170)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
