// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-23, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_identity (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::weights::WeightInfo for WeightInfo<T> {
    // Storage: Identity Registrars (r:1 w:1)
    fn add_registrar(r: u32) -> Weight {
        Weight::from_ref_time(12_196_000)
            // Standard Error: 5_000
            .saturating_add(Weight::from_ref_time(376_000).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Identity IdentityOf (r:1 w:1)
    fn set_identity(r: u32, x: u32) -> Weight {
        Weight::from_ref_time(23_488_000)
            // Standard Error: 15_000
            .saturating_add(Weight::from_ref_time(384_000).saturating_mul(r.into()))
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(200_000).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SubsOf (r:1 w:1)
    // Storage: Identity SuperOf (r:1 w:1)
    fn set_subs_new(s: u32) -> Weight {
        Weight::from_ref_time(22_648_000)
            // Standard Error: 4_000
            .saturating_add(Weight::from_ref_time(1_755_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SubsOf (r:1 w:1)
    // Storage: Identity SuperOf (r:0 w:1)
    fn set_subs_old(p: u32) -> Weight {
        Weight::from_ref_time(22_847_000)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(781_000).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
    }
    // Storage: Identity SubsOf (r:1 w:1)
    // Storage: Identity IdentityOf (r:1 w:1)
    // Storage: Identity SuperOf (r:0 w:64)
    fn clear_identity(r: u32, s: u32, x: u32) -> Weight {
        Weight::from_ref_time(26_919_000)
            // Standard Error: 18_000
            .saturating_add(Weight::from_ref_time(141_000).saturating_mul(r.into()))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(808_000).saturating_mul(s.into()))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(79_000).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    // Storage: Identity Registrars (r:1 w:0)
    // Storage: Identity IdentityOf (r:1 w:1)
    fn request_judgement(r: u32, x: u32) -> Weight {
        Weight::from_ref_time(24_741_000)
            // Standard Error: 9_000
            .saturating_add(Weight::from_ref_time(381_000).saturating_mul(r.into()))
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(206_000).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Identity IdentityOf (r:1 w:1)
    fn cancel_request(r: u32, x: u32) -> Weight {
        Weight::from_ref_time(23_484_000)
            // Standard Error: 8_000
            .saturating_add(Weight::from_ref_time(251_000).saturating_mul(r.into()))
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(202_000).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Identity Registrars (r:1 w:1)
    fn set_fee(r: u32) -> Weight {
        Weight::from_ref_time(6_477_000)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(262_000).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Identity Registrars (r:1 w:1)
    fn set_account_id(r: u32) -> Weight {
        Weight::from_ref_time(6_698_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(242_000).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Identity Registrars (r:1 w:1)
    fn set_fields(r: u32) -> Weight {
        Weight::from_ref_time(6_546_000)
            // Standard Error: 3_000
            .saturating_add(Weight::from_ref_time(244_000).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Identity Registrars (r:1 w:0)
    // Storage: Identity IdentityOf (r:1 w:1)
    fn provide_judgement(r: u32, x: u32) -> Weight {
        Weight::from_ref_time(18_426_000)
            // Standard Error: 7_000
            .saturating_add(Weight::from_ref_time(300_000).saturating_mul(r.into()))
            // Standard Error: 0
            .saturating_add(Weight::from_ref_time(340_000).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Identity SubsOf (r:1 w:1)
    // Storage: Identity IdentityOf (r:1 w:1)
    // Storage: System Account (r:2 w:2)
    // Storage: Identity SuperOf (r:0 w:64)
    fn kill_identity(r: u32, s: u32, x: u32) -> Weight {
        Weight::from_ref_time(31_309_000)
            // Standard Error: 21_000
            .saturating_add(Weight::from_ref_time(306_000).saturating_mul(r.into()))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(823_000).saturating_mul(s.into()))
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(108_000).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SuperOf (r:1 w:1)
    // Storage: Identity SubsOf (r:1 w:1)
    fn add_sub(s: u32) -> Weight {
        Weight::from_ref_time(27_995_000)
            // Standard Error: 5_000
            .saturating_add(Weight::from_ref_time(111_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SuperOf (r:1 w:1)
    fn rename_sub(s: u32) -> Weight {
        Weight::from_ref_time(11_323_000)
            // Standard Error: 1_000
            .saturating_add(Weight::from_ref_time(73_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SuperOf (r:1 w:1)
    // Storage: Identity SubsOf (r:1 w:1)
    fn remove_sub(s: u32) -> Weight {
        Weight::from_ref_time(28_284_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(127_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Identity SuperOf (r:1 w:1)
    // Storage: Identity SubsOf (r:1 w:1)
    fn quit_sub(s: u32) -> Weight {
        Weight::from_ref_time(20_753_000)
            // Standard Error: 2_000
            .saturating_add(Weight::from_ref_time(107_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
