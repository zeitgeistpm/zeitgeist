// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-13, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_identity (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::weights::WeightInfo for WeightInfo<T> {
    // Storage: Identity Registrars (r:1 w:1)
    fn add_registrar(r: u32) -> Weight {
        (37_208_000 as Weight)
            // Standard Error: 116_000
            .saturating_add((322_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity IdentityOf (r:1 w:1)
    fn set_identity(_r: u32, x: u32) -> Weight {
        (93_292_000 as Weight)
            // Standard Error: 25_000
            .saturating_add((1_150_000 as Weight).saturating_mul(x as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SubsOf (r:1 w:1)
    // Storage: Identity SuperOf (r:1 w:1)
    fn set_subs_new(s: u32) -> Weight {
        (67_910_000 as Weight)
            // Standard Error: 57_000
            .saturating_add((8_863_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(s as Weight)))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SubsOf (r:1 w:1)
    // Storage: Identity SuperOf (r:0 w:1)
    fn set_subs_old(p: u32) -> Weight {
        (71_154_000 as Weight)
            // Standard Error: 35_000
            .saturating_add((2_529_000 as Weight).saturating_mul(p as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(p as Weight)))
    }
    // Storage: Identity SubsOf (r:1 w:1)
    // Storage: Identity IdentityOf (r:1 w:1)
    // Storage: Identity SuperOf (r:0 w:64)
    fn clear_identity(r: u32, s: u32, x: u32) -> Weight {
        (54_111_000 as Weight)
            // Standard Error: 694_000
            .saturating_add((1_189_000 as Weight).saturating_mul(r as Weight))
            // Standard Error: 40_000
            .saturating_add((2_933_000 as Weight).saturating_mul(s as Weight))
            // Standard Error: 40_000
            .saturating_add((698_000 as Weight).saturating_mul(x as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
    }
    // Storage: Identity Registrars (r:1 w:0)
    // Storage: Identity IdentityOf (r:1 w:1)
    fn request_judgement(_r: u32, x: u32) -> Weight {
        (94_635_000 as Weight)
            // Standard Error: 24_000
            .saturating_add((1_339_000 as Weight).saturating_mul(x as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity IdentityOf (r:1 w:1)
    fn cancel_request(r: u32, x: u32) -> Weight {
        (44_136_000 as Weight)
            // Standard Error: 493_000
            .saturating_add((2_969_000 as Weight).saturating_mul(r as Weight))
            // Standard Error: 32_000
            .saturating_add((1_550_000 as Weight).saturating_mul(x as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity Registrars (r:1 w:1)
    fn set_fee(r: u32) -> Weight {
        (13_133_000 as Weight)
            // Standard Error: 74_000
            .saturating_add((587_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity Registrars (r:1 w:1)
    fn set_account_id(r: u32) -> Weight {
        (13_123_000 as Weight)
            // Standard Error: 60_000
            .saturating_add((698_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity Registrars (r:1 w:1)
    fn set_fields(r: u32) -> Weight {
        (14_917_000 as Weight)
            // Standard Error: 64_000
            .saturating_add((158_000 as Weight).saturating_mul(r as Weight))
            .saturating_add(T::DbWeight::get().reads(1 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity Registrars (r:1 w:0)
    // Storage: Identity IdentityOf (r:1 w:1)
    fn provide_judgement(r: u32, x: u32) -> Weight {
        (50_831_000 as Weight)
            // Standard Error: 321_000
            .saturating_add((1_256_000 as Weight).saturating_mul(r as Weight))
            // Standard Error: 17_000
            .saturating_add((1_221_000 as Weight).saturating_mul(x as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity SubsOf (r:1 w:1)
    // Storage: Identity IdentityOf (r:1 w:1)
    // Storage: System Account (r:2 w:2)
    // Storage: Identity SuperOf (r:0 w:64)
    fn kill_identity(_r: u32, s: u32, x: u32) -> Weight {
        (103_820_000 as Weight)
            // Standard Error: 40_000
            .saturating_add((2_873_000 as Weight).saturating_mul(s as Weight))
            // Standard Error: 40_000
            .saturating_add((444_000 as Weight).saturating_mul(x as Weight))
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
            .saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(s as Weight)))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SuperOf (r:1 w:1)
    // Storage: Identity SubsOf (r:1 w:1)
    fn add_sub(s: u32) -> Weight {
        (83_732_000 as Weight)
            // Standard Error: 18_000
            .saturating_add((288_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SuperOf (r:1 w:1)
    fn rename_sub(s: u32) -> Weight {
        (26_727_000 as Weight)
            // Standard Error: 8_000
            .saturating_add((93_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(1 as Weight))
    }
    // Storage: Identity IdentityOf (r:1 w:0)
    // Storage: Identity SuperOf (r:1 w:1)
    // Storage: Identity SubsOf (r:1 w:1)
    fn remove_sub(s: u32) -> Weight {
        (82_726_000 as Weight)
            // Standard Error: 17_000
            .saturating_add((471_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    // Storage: Identity SuperOf (r:1 w:1)
    // Storage: Identity SubsOf (r:1 w:1)
    fn quit_sub(_s: u32) -> Weight {
        (67_836_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
}
