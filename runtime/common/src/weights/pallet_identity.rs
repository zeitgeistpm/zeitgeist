// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-10-25`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_identity (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::weights::WeightInfo for WeightInfo<T> {
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    fn add_registrar(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `64 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 19_230 nanoseconds.
        Weight::from_parts(22_092_935, 952)
            // Standard Error: 60_132
            .saturating_add(Weight::from_parts(298_384, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn set_identity(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `474 + r * (5 ±0)`
        //  Estimated: `7313`
        // Minimum execution time: 25_480 nanoseconds.
        Weight::from_parts(45_732_528, 7313)
            // Standard Error: 11_669
            .saturating_add(Weight::from_parts(623_699, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:64 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 64]`.
    fn set_subs_new(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101`
        //  Estimated: `11894 + s * (2589 ±0)`
        // Minimum execution time: 12_700 nanoseconds.
        Weight::from_parts(36_155_572, 11894)
            // Standard Error: 48_562
            .saturating_add(Weight::from_parts(4_605_038, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
            .saturating_add(Weight::from_parts(0, 2589).saturating_mul(s.into()))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:0 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `p` is `[0, 64]`.
    fn set_subs_old(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `226 + p * (32 ±0)`
        //  Estimated: `11894`
        // Minimum execution time: 13_930 nanoseconds.
        Weight::from_parts(34_268_734, 11894)
            // Standard Error: 33_963
            .saturating_add(Weight::from_parts(1_902_476, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
    }
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:0 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    /// The range of component `x` is `[0, 64]`.
    fn clear_identity(_r: u32, s: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `535 + r * (5 ±0) + s * (32 ±0) + x * (66 ±0)`
        //  Estimated: `11894`
        // Minimum execution time: 52_030 nanoseconds.
        Weight::from_parts(52_304_738, 11894)
            // Standard Error: 27_639
            .saturating_add(Weight::from_parts(1_796_839, 0).saturating_mul(s.into()))
            // Standard Error: 27_639
            .saturating_add(Weight::from_parts(280_343, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: Identity Registrars (r:1 w:0)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn request_judgement(r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `431 + r * (57 ±0) + x * (66 ±0)`
        //  Estimated: `8265`
        // Minimum execution time: 38_201 nanoseconds.
        Weight::from_parts(40_514_631, 8265)
            // Standard Error: 109_831
            .saturating_add(Weight::from_parts(521_267, 0).saturating_mul(r.into()))
            // Standard Error: 12_757
            .saturating_add(Weight::from_parts(723_546, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn cancel_request(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `430 + x * (66 ±0)`
        //  Estimated: `7313`
        // Minimum execution time: 36_100 nanoseconds.
        Weight::from_parts(46_093_276, 7313)
            // Standard Error: 14_527
            .saturating_add(Weight::from_parts(650_226, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    fn set_fee(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `121 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 11_600 nanoseconds.
        Weight::from_parts(14_311_547, 952)
            // Standard Error: 30_165
            .saturating_add(Weight::from_parts(312_857, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    fn set_account_id(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `121 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 11_420 nanoseconds.
        Weight::from_parts(13_852_062, 952)
            // Standard Error: 41_801
            .saturating_add(Weight::from_parts(58_707, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    fn set_fields(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `121 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 10_180 nanoseconds.
        Weight::from_parts(12_701_169, 952)
            // Standard Error: 25_078
            .saturating_add(Weight::from_parts(66_396, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity Registrars (r:1 w:0)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    /// The range of component `x` is `[0, 64]`.
    fn provide_judgement(r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `509 + r * (57 ±0) + x * (66 ±0)`
        //  Estimated: `8265`
        // Minimum execution time: 28_990 nanoseconds.
        Weight::from_parts(31_391_358, 8265)
            // Standard Error: 166_351
            .saturating_add(Weight::from_parts(536_354, 0).saturating_mul(r.into()))
            // Standard Error: 17_000
            .saturating_add(Weight::from_parts(1_040_806, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:0 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    /// The range of component `x` is `[0, 64]`.
    fn kill_identity(_r: u32, s: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `954 + r * (5 ±0) + s * (32 ±0) + x * (66 ±0)`
        //  Estimated: `17108`
        // Minimum execution time: 75_361 nanoseconds.
        Weight::from_parts(82_306_973, 17108)
            // Standard Error: 33_223
            .saturating_add(Weight::from_parts(1_805_205, 0).saturating_mul(s.into()))
            // Standard Error: 33_223
            .saturating_add(Weight::from_parts(242_228, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 63]`.
    fn add_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355 + s * (41 ±0)`
        //  Estimated: `14483`
        // Minimum execution time: 38_960 nanoseconds.
        Weight::from_parts(49_299_144, 14483)
            // Standard Error: 10_280
            .saturating_add(Weight::from_parts(66_362, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 64]`.
    fn rename_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `464 + s * (7 ±0)`
        //  Estimated: `9902`
        // Minimum execution time: 19_540 nanoseconds.
        Weight::from_parts(22_842_434, 9902)
            // Standard Error: 8_528
            .saturating_add(Weight::from_parts(62_406, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 64]`.
    fn remove_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `544 + s * (39 ±0)`
        //  Estimated: `14483`
        // Minimum execution time: 44_010 nanoseconds.
        Weight::from_parts(50_338_094, 14483)
            // Standard Error: 11_434
            .saturating_add(Weight::from_parts(72_877, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 63]`.
    fn quit_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `469 + s * (42 ±0)`
        //  Estimated: `7170`
        // Minimum execution time: 29_920 nanoseconds.
        Weight::from_parts(35_959_708, 7170)
            // Standard Error: 7_561
            .saturating_add(Weight::from_parts(81_229, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
