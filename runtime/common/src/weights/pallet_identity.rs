// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-09-19`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_identity (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::weights::WeightInfo for WeightInfo<T> {
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    fn add_registrar(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `64 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 19_750 nanoseconds.
        Weight::from_parts(23_875_912, 952)
            // Standard Error: 44_966
            .saturating_add(Weight::from_ref_time(276_086).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    fn set_identity(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `474 + r * (5 ±0)`
        //  Estimated: `7313`
        // Minimum execution time: 26_470 nanoseconds.
        Weight::from_parts(52_488_961, 7313)
            // Standard Error: 15_114
            .saturating_add(Weight::from_ref_time(650_896).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:64 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    fn set_subs_new(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101`
        //  Estimated: `11894 + s * (2589 ±0)`
        // Minimum execution time: 15_090 nanoseconds.
        Weight::from_parts(36_412_498, 11894)
            // Standard Error: 41_980
            .saturating_add(Weight::from_ref_time(5_214_371).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
            .saturating_add(T::DbWeight::get().writes(1_u64))
            .saturating_add(Weight::from_proof_size(2589).saturating_mul(s.into()))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:0 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    fn set_subs_old(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `226 + p * (32 ±0)`
        //  Estimated: `11894`
        // Minimum execution time: 17_660 nanoseconds.
        Weight::from_parts(40_522_976, 11894)
            // Standard Error: 33_316
            .saturating_add(Weight::from_ref_time(2_105_754).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:0 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    fn clear_identity(r: u32, s: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `535 + r * (5 ±0) + s * (32 ±0) + x * (66 ±0)`
        //  Estimated: `11894`
        // Minimum execution time: 52_610 nanoseconds.
        Weight::from_parts(38_385_262, 11894)
            // Standard Error: 223_582
            .saturating_add(Weight::from_ref_time(234_415).saturating_mul(r.into()))
            // Standard Error: 26_034
            .saturating_add(Weight::from_ref_time(2_014_829).saturating_mul(s.into()))
            // Standard Error: 26_034
            .saturating_add(Weight::from_ref_time(425_350).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Identity Registrars (r:1 w:0)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    fn request_judgement(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `431 + r * (57 ±0) + x * (66 ±0)`
        //  Estimated: `8265`
        // Minimum execution time: 42_260 nanoseconds.
        Weight::from_parts(52_260_973, 8265)
            // Standard Error: 13_326
            .saturating_add(Weight::from_ref_time(721_487).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    fn cancel_request(r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `430 + x * (66 ±0)`
        //  Estimated: `7313`
        // Minimum execution time: 36_330 nanoseconds.
        Weight::from_parts(42_149_171, 7313)
            // Standard Error: 141_837
            .saturating_add(Weight::from_ref_time(673_369).saturating_mul(r.into()))
            // Standard Error: 16_475
            .saturating_add(Weight::from_ref_time(729_714).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    fn set_fee(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `121 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 13_950 nanoseconds.
        Weight::from_parts(16_409_239, 952)
            // Standard Error: 29_690
            .saturating_add(Weight::from_ref_time(229_915).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    fn set_account_id(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `121 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 11_170 nanoseconds.
        Weight::from_parts(13_615_141, 952)
            // Standard Error: 20_885
            .saturating_add(Weight::from_ref_time(392_778).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    fn set_fields(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `121 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 11_490 nanoseconds.
        Weight::from_parts(14_496_207, 952)
            // Standard Error: 41_795
            .saturating_add(Weight::from_ref_time(215_483).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Identity Registrars (r:1 w:0)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    fn provide_judgement(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `509 + r * (57 ±0) + x * (66 ±0)`
        //  Estimated: `8265`
        // Minimum execution time: 31_070 nanoseconds.
        Weight::from_parts(48_354_843, 8265)
            // Standard Error: 14_494
            .saturating_add(Weight::from_ref_time(1_136_000).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:0 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    fn kill_identity(r: u32, s: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `954 + r * (5 ±0) + s * (32 ±0) + x * (66 ±0)`
        //  Estimated: `17108`
        // Minimum execution time: 75_910 nanoseconds.
        Weight::from_parts(64_507_024, 17108)
            // Standard Error: 253_244
            .saturating_add(Weight::from_ref_time(400_254).saturating_mul(r.into()))
            // Standard Error: 29_488
            .saturating_add(Weight::from_ref_time(2_063_702).saturating_mul(s.into()))
            // Standard Error: 29_488
            .saturating_add(Weight::from_ref_time(433_912).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    fn add_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355 + s * (41 ±0)`
        //  Estimated: `14483`
        // Minimum execution time: 40_220 nanoseconds.
        Weight::from_parts(53_504_593, 14483)
            // Standard Error: 10_817
            .saturating_add(Weight::from_ref_time(131_324).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    fn rename_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `464 + s * (7 ±0)`
        //  Estimated: `9902`
        // Minimum execution time: 20_240 nanoseconds.
        Weight::from_parts(25_667_761, 9902)
            // Standard Error: 8_668
            .saturating_add(Weight::from_ref_time(86_610).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    fn remove_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `544 + s * (39 ±0)`
        //  Estimated: `14483`
        // Minimum execution time: 44_900 nanoseconds.
        Weight::from_parts(58_362_741, 14483)
            // Standard Error: 10_560
            .saturating_add(Weight::from_ref_time(60_261).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    fn quit_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `469 + s * (42 ±0)`
        //  Estimated: `7170`
        // Minimum execution time: 31_550 nanoseconds.
        Weight::from_parts(40_548_052, 7170)
            // Standard Error: 8_448
            .saturating_add(Weight::from_ref_time(83_481).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
}
