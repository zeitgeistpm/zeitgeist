// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-24`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=pallet_identity
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_identity (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn add_registrar(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `30 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 9_170 nanoseconds.
        Weight::from_parts(10_920_000, 1942)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    fn set_identity(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4602 + r * (5 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 85_239 nanoseconds.
        Weight::from_parts(87_030_000, 8337)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:64 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 64]`.
    fn set_subs_new(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101`
        //  Estimated: `166686`
        // Minimum execution time: 9_190 nanoseconds.
        Weight::from_parts(220_150_000, 166686)
            .saturating_add(T::DbWeight::get().reads(66))
            .saturating_add(T::DbWeight::get().writes(65))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:0 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[0, 64]`.
    fn set_subs_old(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + p * (33 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 10_060 nanoseconds.
        Weight::from_parts(93_790_000, 8337)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(65))
    }
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:0 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    fn clear_identity(r: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4602 + r * (5 ±0) + s * (33 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 46_540 nanoseconds.
        Weight::from_parts(42_945_714, 8337)
            // Standard Error: 684_160
            .saturating_add(Weight::from_parts(449_285, 0).saturating_mul(r.into()))
            // Standard Error: 74_830
            .saturating_add(Weight::from_parts(1_134_750, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: `Identity::Registrars` (r:1 w:0)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    fn request_judgement(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4590 + r * (57 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 58_030 nanoseconds.
        Weight::from_parts(58_570_000, 8337)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    fn cancel_request(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4623`
        //  Estimated: `8337`
        // Minimum execution time: 55_880 nanoseconds.
        Weight::from_parts(55_970_000, 8337)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn set_fee(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 6_620 nanoseconds.
        Weight::from_parts(6_730_000, 1942)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn set_account_id(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 6_200 nanoseconds.
        Weight::from_parts(6_530_000, 1942)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn set_fields(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 5_920 nanoseconds.
        Weight::from_parts(6_180_000, 1942)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:0)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn provide_judgement(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4670 + r * (57 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 67_530 nanoseconds.
        Weight::from_parts(70_520_000, 8337)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:0 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    fn kill_identity(r: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4919 + r * (9 ±0) + s * (33 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 53_840 nanoseconds.
        Weight::from_parts(50_902_857, 8337)
            // Standard Error: 128_666
            .saturating_add(Weight::from_parts(367_142, 0).saturating_mul(r.into()))
            // Standard Error: 14_072
            .saturating_add(Weight::from_parts(1_226_718, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 63]`.
    fn add_sub(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101 + s * (42 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 24_840 nanoseconds.
        Weight::from_parts(33_350_000, 8337)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 64]`.
    fn rename_sub(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `266 + s * (8 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 11_960 nanoseconds.
        Weight::from_parts(14_170_000, 8337)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 64]`.
    fn remove_sub(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `313 + s * (40 ±0)`
        //  Estimated: `8337`
        // Minimum execution time: 27_520 nanoseconds.
        Weight::from_parts(31_340_000, 8337)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 63]`.
    fn quit_sub(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `472 + s * (42 ±0)`
        //  Estimated: `5571`
        // Minimum execution time: 24_460 nanoseconds.
        Weight::from_parts(24_850_000, 5571)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Identity::UsernameAuthorities` (r:0 w:1)
    /// Proof: `Identity::UsernameAuthorities` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    fn add_username_authority() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_530 nanoseconds.
        Weight::from_parts(8_530_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::UsernameAuthorities` (r:1 w:1)
    /// Proof: `Identity::UsernameAuthorities` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    fn remove_username_authority() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `3517`
        // Minimum execution time: 10_520 nanoseconds.
        Weight::from_parts(10_520_000, 3517)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::UsernameAuthorities` (r:1 w:1)
    /// Proof: `Identity::UsernameAuthorities` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
    /// Storage: `Identity::AccountOfUsername` (r:1 w:1)
    /// Proof: `Identity::AccountOfUsername` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
    /// Storage: `Identity::PendingUsernames` (r:1 w:0)
    /// Proof: `Identity::PendingUsernames` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    fn set_username_for() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `80`
        //  Estimated: `8337`
        // Minimum execution time: 43_870 nanoseconds.
        Weight::from_parts(43_870_000, 8337)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Identity::PendingUsernames` (r:1 w:1)
    /// Proof: `Identity::PendingUsernames` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    /// Storage: `Identity::AccountOfUsername` (r:0 w:1)
    /// Proof: `Identity::AccountOfUsername` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
    fn accept_username() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `119`
        //  Estimated: `8337`
        // Minimum execution time: 22_180 nanoseconds.
        Weight::from_parts(22_180_000, 8337)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Identity::PendingUsernames` (r:1 w:1)
    /// Proof: `Identity::PendingUsernames` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
    fn remove_expired_approval() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `119`
        //  Estimated: `3554`
        // Minimum execution time: 14_230 nanoseconds.
        Weight::from_parts(14_230_000, 3554)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::AccountOfUsername` (r:1 w:0)
    /// Proof: `Identity::AccountOfUsername` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    fn set_primary_username() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `257`
        //  Estimated: `8337`
        // Minimum execution time: 16_500 nanoseconds.
        Weight::from_parts(16_500_000, 8337)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::AccountOfUsername` (r:1 w:1)
    /// Proof: `Identity::AccountOfUsername` (`max_values`: None, `max_size`: Some(81), added: 2556, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4872), added: 7347, mode: `MaxEncodedLen`)
    fn remove_dangling_username() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `98`
        //  Estimated: `8337`
        // Minimum execution time: 11_770 nanoseconds.
        Weight::from_parts(11_770_000, 8337)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
