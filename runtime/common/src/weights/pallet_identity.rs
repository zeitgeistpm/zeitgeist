// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-07-24`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_identity (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn add_registrar(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `32 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 21_660 nanoseconds.
        Weight::from_parts(25_850_328, 1942)
            // Standard Error: 29_962
            .saturating_add(Weight::from_parts(896_959, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn set_identity(r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `442 + r * (5 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 39_640 nanoseconds.
        Weight::from_parts(60_315_640, 8303)
            // Standard Error: 144_124
            .saturating_add(Weight::from_parts(609_509, 0).saturating_mul(r.into()))
            // Standard Error: 16_740
            .saturating_add(Weight::from_parts(1_085_375, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:64 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 64]`.
    fn set_subs_new(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101`
        //  Estimated: `8303 + s * (2589 ±0)`
        // Minimum execution time: 19_750 nanoseconds.
        Weight::from_parts(46_888_139, 8303)
            // Standard Error: 63_869
            .saturating_add(Weight::from_parts(6_537_301, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
            .saturating_add(Weight::from_parts(0, 2589).saturating_mul(s.into()))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:0 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `p` is `[0, 64]`.
    fn set_subs_old(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `194 + p * (32 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 19_190 nanoseconds.
        Weight::from_parts(51_774_753, 8303)
            // Standard Error: 31_886
            .saturating_add(Weight::from_parts(2_750_438, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
    }
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:0 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    /// The range of component `x` is `[0, 64]`.
    fn clear_identity(_r: u32, s: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `471 + r * (5 ±0) + s * (32 ±0) + x * (66 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 94_821 nanoseconds.
        Weight::from_parts(81_296_022, 8303)
            // Standard Error: 17_279
            .saturating_add(Weight::from_parts(2_529_084, 0).saturating_mul(s.into()))
            // Standard Error: 17_279
            .saturating_add(Weight::from_parts(530_119, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: `Identity::Registrars` (r:1 w:0)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn request_judgement(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `367 + r * (57 ±0) + x * (66 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 51_290 nanoseconds.
        Weight::from_parts(71_825_285, 8303)
            // Standard Error: 20_454
            .saturating_add(Weight::from_parts(1_158_768, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn cancel_request(r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `398 + x * (66 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 49_660 nanoseconds.
        Weight::from_parts(56_328_193, 8303)
            // Standard Error: 104_321
            .saturating_add(Weight::from_parts(615_177, 0).saturating_mul(r.into()))
            // Standard Error: 12_117
            .saturating_add(Weight::from_parts(1_058_625, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn set_fee(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 14_930 nanoseconds.
        Weight::from_parts(19_021_487, 1942)
            // Standard Error: 27_494
            .saturating_add(Weight::from_parts(355_592, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn set_account_id(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 14_111 nanoseconds.
        Weight::from_parts(16_435_082, 1942)
            // Standard Error: 17_735
            .saturating_add(Weight::from_parts(343_164, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:1)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    fn set_fields(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `89 + r * (57 ±0)`
        //  Estimated: `1942`
        // Minimum execution time: 13_630 nanoseconds.
        Weight::from_parts(17_450_843, 1942)
            // Standard Error: 19_433
            .saturating_add(Weight::from_parts(358_031, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::Registrars` (r:1 w:0)
    /// Proof: `Identity::Registrars` (`max_values`: Some(1), `max_size`: Some(457), added: 952, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 7]`.
    /// The range of component `x` is `[0, 64]`.
    fn provide_judgement(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `445 + r * (57 ±0) + x * (66 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 43_850 nanoseconds.
        Weight::from_parts(74_007_290, 8303)
            // Standard Error: 14_509
            .saturating_add(Weight::from_parts(1_470_246, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `Identity::IdentityOf` (r:1 w:1)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:0 w:64)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    /// The range of component `x` is `[0, 64]`.
    fn kill_identity(r: u32, s: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `826 + r * (5 ±0) + s * (32 ±0) + x * (66 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 126_141 nanoseconds.
        Weight::from_parts(85_217_639, 8303)
            // Standard Error: 167_129
            .saturating_add(Weight::from_parts(2_032_971, 0).saturating_mul(r.into()))
            // Standard Error: 19_461
            .saturating_add(Weight::from_parts(2_770_065, 0).saturating_mul(s.into()))
            // Standard Error: 19_461
            .saturating_add(Weight::from_parts(654_970, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 63]`.
    fn add_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `323 + s * (41 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 53_400 nanoseconds.
        Weight::from_parts(67_814_141, 8303)
            // Standard Error: 14_324
            .saturating_add(Weight::from_parts(312_244, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 64]`.
    fn rename_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `432 + s * (7 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 22_360 nanoseconds.
        Weight::from_parts(32_328_919, 8303)
            // Standard Error: 5_763
            .saturating_add(Weight::from_parts(96_628, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `Identity::IdentityOf` (r:1 w:0)
    /// Proof: `Identity::IdentityOf` (`max_values`: None, `max_size`: Some(4838), added: 7313, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[1, 64]`.
    fn remove_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `480 + s * (39 ±0)`
        //  Estimated: `8303`
        // Minimum execution time: 53_400 nanoseconds.
        Weight::from_parts(72_889_969, 8303)
            // Standard Error: 13_786
            .saturating_add(Weight::from_parts(142_340, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Identity::SuperOf` (r:1 w:1)
    /// Proof: `Identity::SuperOf` (`max_values`: None, `max_size`: Some(114), added: 2589, mode: `MaxEncodedLen`)
    /// Storage: `Identity::SubsOf` (r:1 w:1)
    /// Proof: `Identity::SubsOf` (`max_values`: None, `max_size`: Some(2106), added: 4581, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:0)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `s` is `[0, 63]`.
    fn quit_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `583 + s * (42 ±0)`
        //  Estimated: `5571`
        // Minimum execution time: 43_830 nanoseconds.
        Weight::from_parts(58_683_464, 5571)
            // Standard Error: 11_129
            .saturating_add(Weight::from_parts(198_809, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
