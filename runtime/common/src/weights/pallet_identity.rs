// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_identity
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-01-15`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_identity
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_identity (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_identity::weights::WeightInfo for WeightInfo<T> {
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    fn add_registrar(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `64 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 17_540 nanoseconds.
        Weight::from_parts(19_412_422, 952)
            // Standard Error: 44_718
            .saturating_add(Weight::from_parts(716_331, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn set_identity(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `474 + r * (5 ±0)`
        //  Estimated: `7313`
        // Minimum execution time: 25_450 nanoseconds.
        Weight::from_parts(49_207_597, 7313)
            // Standard Error: 14_331
            .saturating_add(Weight::from_parts(513_639, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:64 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 64]`.
    fn set_subs_new(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `101`
        //  Estimated: `11894 + s * (2589 ±0)`
        // Minimum execution time: 13_130 nanoseconds.
        Weight::from_parts(40_210_154, 11894)
            // Standard Error: 39_792
            .saturating_add(Weight::from_parts(4_319_815, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
            .saturating_add(Weight::from_parts(0, 2589).saturating_mul(s.into()))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:0 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `p` is `[0, 64]`.
    fn set_subs_old(p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `226 + p * (32 ±0)`
        //  Estimated: `11894`
        // Minimum execution time: 13_910 nanoseconds.
        Weight::from_parts(38_666_951, 11894)
            // Standard Error: 51_955
            .saturating_add(Weight::from_parts(1_774_301, 0).saturating_mul(p.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
    }
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:0 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    /// The range of component `x` is `[0, 64]`.
    fn clear_identity(_r: u32, s: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `535 + r * (5 ±0) + s * (32 ±0) + x * (66 ±0)`
        //  Estimated: `11894`
        // Minimum execution time: 51_390 nanoseconds.
        Weight::from_parts(48_950_763, 11894)
            // Standard Error: 31_792
            .saturating_add(Weight::from_parts(1_828_765, 0).saturating_mul(s.into()))
            // Standard Error: 31_792
            .saturating_add(Weight::from_parts(268_175, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: Identity Registrars (r:1 w:0)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn request_judgement(r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `431 + r * (57 ±0) + x * (66 ±0)`
        //  Estimated: `8265`
        // Minimum execution time: 37_700 nanoseconds.
        Weight::from_parts(34_649_694, 8265)
            // Standard Error: 103_076
            .saturating_add(Weight::from_parts(1_038_785, 0).saturating_mul(r.into()))
            // Standard Error: 11_972
            .saturating_add(Weight::from_parts(660_722, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `x` is `[0, 64]`.
    fn cancel_request(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `430 + x * (66 ±0)`
        //  Estimated: `7313`
        // Minimum execution time: 34_050 nanoseconds.
        Weight::from_parts(50_054_855, 7313)
            // Standard Error: 13_231
            .saturating_add(Weight::from_parts(537_492, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    fn set_fee(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `121 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 11_460 nanoseconds.
        Weight::from_parts(12_342_541, 952)
            // Standard Error: 26_113
            .saturating_add(Weight::from_parts(711_064, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    fn set_account_id(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `121 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 10_260 nanoseconds.
        Weight::from_parts(13_295_725, 952)
            // Standard Error: 31_155
            .saturating_add(Weight::from_parts(66_512, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity Registrars (r:1 w:1)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    fn set_fields(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `121 + r * (57 ±0)`
        //  Estimated: `952`
        // Minimum execution time: 10_060 nanoseconds.
        Weight::from_parts(12_931_747, 952)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity Registrars (r:1 w:0)
    /// Proof: Identity Registrars (max_values: Some(1), max_size: Some(457), added: 952, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 7]`.
    /// The range of component `x` is `[0, 64]`.
    fn provide_judgement(_r: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `509 + r * (57 ±0) + x * (66 ±0)`
        //  Estimated: `8265`
        // Minimum execution time: 30_500 nanoseconds.
        Weight::from_parts(35_394_279, 8265)
            // Standard Error: 16_146
            .saturating_add(Weight::from_parts(1_027_013, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// Storage: Identity IdentityOf (r:1 w:1)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:0 w:64)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 8]`.
    /// The range of component `s` is `[0, 64]`.
    /// The range of component `x` is `[0, 64]`.
    fn kill_identity(_r: u32, s: u32, x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `954 + r * (5 ±0) + s * (32 ±0) + x * (66 ±0)`
        //  Estimated: `17108`
        // Minimum execution time: 74_220 nanoseconds.
        Weight::from_parts(77_339_608, 17108)
            // Standard Error: 36_161
            .saturating_add(Weight::from_parts(1_737_934, 0).saturating_mul(s.into()))
            // Standard Error: 36_161
            .saturating_add(Weight::from_parts(184_480, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 63]`.
    fn add_sub(_s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `355 + s * (41 ±0)`
        //  Estimated: `14483`
        // Minimum execution time: 36_160 nanoseconds.
        Weight::from_parts(52_735_396, 14483)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 64]`.
    fn rename_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `464 + s * (7 ±0)`
        //  Estimated: `9902`
        // Minimum execution time: 17_690 nanoseconds.
        Weight::from_parts(22_790_076, 9902)
            // Standard Error: 4_956
            .saturating_add(Weight::from_parts(32_433, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Identity IdentityOf (r:1 w:0)
    /// Proof: Identity IdentityOf (max_values: None, max_size: Some(4838), added: 7313, mode: MaxEncodedLen)
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// The range of component `s` is `[1, 64]`.
    fn remove_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `544 + s * (39 ±0)`
        //  Estimated: `14483`
        // Minimum execution time: 43_240 nanoseconds.
        Weight::from_parts(52_869_158, 14483)
            // Standard Error: 16_108
            .saturating_add(Weight::from_parts(46_916, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Identity SuperOf (r:1 w:1)
    /// Proof: Identity SuperOf (max_values: None, max_size: Some(114), added: 2589, mode: MaxEncodedLen)
    /// Storage: Identity SubsOf (r:1 w:1)
    /// Proof: Identity SubsOf (max_values: None, max_size: Some(2106), added: 4581, mode: MaxEncodedLen)
    /// The range of component `s` is `[0, 63]`.
    fn quit_sub(s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `469 + s * (42 ±0)`
        //  Estimated: `7170`
        // Minimum execution time: 29_340 nanoseconds.
        Weight::from_parts(34_148_899, 7170)
            // Standard Error: 7_721
            .saturating_add(Weight::from_parts(101_826, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
