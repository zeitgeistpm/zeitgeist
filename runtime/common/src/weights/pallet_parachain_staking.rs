// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-24`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=pallet_parachain_staking
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_parachain_staking (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_parachain_staking::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_staking_expectations() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `88`
        //  Estimated: `1573`
        // Minimum execution time: 12_670 nanoseconds.
        Weight::from_parts(12_670_000, 1573)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_inflation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `88`
        //  Estimated: `1573`
        // Minimum execution time: 49_199 nanoseconds.
        Weight::from_parts(49_199_000, 1573)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_parachain_bond_account() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `1540`
        // Minimum execution time: 13_150 nanoseconds.
        Weight::from_parts(13_150_000, 1540)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_parachain_bond_reserve_percent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `1540`
        // Minimum execution time: 12_580 nanoseconds.
        Weight::from_parts(12_580_000, 1540)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_inflation_distribution_config() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `1540`
        // Minimum execution time: 11_070 nanoseconds.
        Weight::from_parts(11_070_000, 1540)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
    /// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_total_selected() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `28`
        //  Estimated: `1513`
        // Minimum execution time: 7_320 nanoseconds.
        Weight::from_parts(7_320_000, 1513)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
    /// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_collator_commission() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27`
        //  Estimated: `1512`
        // Minimum execution time: 10_820 nanoseconds.
        Weight::from_parts(10_820_000, 1512)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
    /// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_blocks_per_round() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `116`
        //  Estimated: `1601`
        // Minimum execution time: 50_760 nanoseconds.
        Weight::from_parts(50_760_000, 1601)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:0 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:0 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[3, 200]`.
    fn join_candidates(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `284 + x * (56 ±0)`
        //  Estimated: `14992`
        // Minimum execution time: 38_700 nanoseconds.
        Weight::from_parts(54_060_000, 14992)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(7))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[3, 200]`.
    fn schedule_leave_candidates(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `197 + x * (51 ±0)`
        //  Estimated: `14006`
        // Minimum execution time: 14_460 nanoseconds.
        Weight::from_parts(25_530_000, 14006)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:350 w:350)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:350 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:350 w:350)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[2, 350]`.
    fn execute_leave_candidates_worst_case(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `436 + x * (531 ±0)`
        //  Estimated: `1321890`
        // Minimum execution time: 75_690 nanoseconds.
        Weight::from_parts(10_056_875_000, 1321890)
            .saturating_add(T::DbWeight::get().reads(1405))
            .saturating_add(T::DbWeight::get().writes(1055))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:350 w:350)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:350 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:350 w:350)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[2, 350]`.
    /// The range of component `y` is `[2, 350]`.
    fn execute_leave_candidates_ideal(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `436 + x * (531 ±0)`
        //  Estimated: `4964 + x * (3774 ±0)`
        // Minimum execution time: 70_230 nanoseconds.
        Weight::from_parts(70_230_000, 4964)
            // Standard Error: 398_193
            .saturating_add(Weight::from_parts(27_313_047, 0).saturating_mul(x.into()))
            // Standard Error: 398_193
            .saturating_add(Weight::from_parts(300_587, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 3774).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[3, 200]`.
    fn cancel_leave_candidates(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `153 + x * (51 ±0)`
        //  Estimated: `13962`
        // Minimum execution time: 13_260 nanoseconds.
        Weight::from_parts(25_580_000, 13962)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn go_offline(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `219 + x * (51 ±0)`
        //  Estimated: `14039`
        // Minimum execution time: 12_950 nanoseconds.
        Weight::from_parts(25_710_000, 14039)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn go_online(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `170 + x * (51 ±0)`
        //  Estimated: `13991`
        // Minimum execution time: 12_740 nanoseconds.
        Weight::from_parts(25_190_000, 13991)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn candidate_bond_more(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `460 + x * (57 ±0)`
        //  Estimated: `15365`
        // Minimum execution time: 43_000 nanoseconds.
        Weight::from_parts(50_110_000, 15365)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn schedule_candidate_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `184`
        //  Estimated: `3649`
        // Minimum execution time: 11_780 nanoseconds.
        Weight::from_parts(11_780_000, 3649)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn execute_candidate_bond_less(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `517 + x * (57 ±0)`
        //  Estimated: `15422`
        // Minimum execution time: 33_890 nanoseconds.
        Weight::from_parts(46_020_000, 15422)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn set_candidate_bond_to_zero(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `497 + x * (57 ±0)`
        //  Estimated: `15402`
        // Minimum execution time: 30_260 nanoseconds.
        Weight::from_parts(43_070_000, 15402)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn cancel_candidate_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `204`
        //  Estimated: `3669`
        // Minimum execution time: 10_230 nanoseconds.
        Weight::from_parts(10_230_000, 3669)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    fn schedule_revoke_delegation(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `161 + x * (55 ±0)`
        //  Estimated: `23062`
        // Minimum execution time: 13_220 nanoseconds.
        Weight::from_parts(33_430_000, 23062)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    fn delegator_bond_more(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `795 + x * (100 ±0)`
        //  Estimated: `39408`
        // Minimum execution time: 48_460 nanoseconds.
        Weight::from_parts(84_579_000, 39408)
            .saturating_add(T::DbWeight::get().reads(9))
            .saturating_add(T::DbWeight::get().writes(7))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    fn schedule_delegator_bond_less(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `161 + x * (55 ±0)`
        //  Estimated: `23062`
        // Minimum execution time: 13_920 nanoseconds.
        Weight::from_parts(46_960_000, 23062)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:0)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn execute_revoke_delegation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1092`
        //  Estimated: `4764`
        // Minimum execution time: 53_540 nanoseconds.
        Weight::from_parts(53_540_000, 4764)
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(8))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn execute_delegator_revoke_delegation_worst() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `50147`
        //  Estimated: `53612`
        // Minimum execution time: 100_620 nanoseconds.
        Weight::from_parts(100_620_000, 53612)
            .saturating_add(T::DbWeight::get().reads(11))
            .saturating_add(T::DbWeight::get().writes(10))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn execute_delegator_bond_less_worst() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `38556`
        //  Estimated: `42021`
        // Minimum execution time: 84_540 nanoseconds.
        Weight::from_parts(84_540_000, 42021)
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(9))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    fn cancel_delegation_request(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `274 + x * (55 ±0)`
        //  Estimated: `23043`
        // Minimum execution time: 16_110 nanoseconds.
        Weight::from_parts(31_110_000, 23043)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `ParachainStaking::Points` (r:1 w:0)
    /// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn prepare_staking_payouts() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3`
        //  Estimated: `3468`
        // Minimum execution time: 2_550 nanoseconds.
        Weight::from_parts(2_550_000, 3468).saturating_add(T::DbWeight::get().reads(1))
    }
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:0)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `y` is `[0, 100]`.
    fn get_rewardable_delegators(_y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `100 + y * (48 ±0)`
        //  Estimated: `8369`
        // Minimum execution time: 5_750 nanoseconds.
        Weight::from_parts(8_610_000, 8369).saturating_add(T::DbWeight::get().reads(2))
    }
    /// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
    /// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:51 w:0)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:51 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:51 w:0)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:51 w:0)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
    /// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AtStake` (r:0 w:51)
    /// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 50]`.
    /// The range of component `y` is `[0, 100]`.
    fn select_top_candidates(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (5060 ±0) + y * (2374 ±0)`
        //  Estimated: `3758 + x * (4686 ±1_645) + y * (950 ±822)`
        // Minimum execution time: 19_120 nanoseconds.
        Weight::from_parts(19_120_000, 3758)
            // Standard Error: 1_863_368
            .saturating_add(Weight::from_parts(13_044_240, 0).saturating_mul(x.into()))
            // Standard Error: 931_684
            .saturating_add(Weight::from_parts(1_065_720, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 4686).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 950).saturating_mul(y.into()))
    }
    /// Storage: `System::Account` (r:349 w:349)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:349 w:349)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:349 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    /// The range of component `y` is `[0, 349]`.
    /// The range of component `z` is `[0, 349]`.
    fn pay_one_collator_reward_best(x: u32, y: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (485 ±0) + y * (346 ±0) + z * (53 ±0)`
        //  Estimated: `7 + x * (8192 ±0) + y * (2048 ±48_821_344_668_717_473_792) + z * (53 ±1_020)`
        // Minimum execution time: 270 nanoseconds.
        Weight::from_parts(270_000, 7)
            // Standard Error: 10_663_037
            .saturating_add(Weight::from_parts(36_922_802, 0).saturating_mul(x.into()))
            // Standard Error: 10_663_037
            .saturating_add(Weight::from_parts(24_007_080, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(y.into())))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
            .saturating_add(Weight::from_parts(0, 8192).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 2048).saturating_mul(y.into()))
            .saturating_add(Weight::from_parts(0, 53).saturating_mul(z.into()))
    }
    /// Storage: `ParachainStaking::DelayedPayouts` (r:1 w:0)
    /// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Points` (r:1 w:0)
    /// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AtStake` (r:2 w:1)
    /// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AwardedPts` (r:1 w:1)
    /// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:301 w:301)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `y` is `[0, 300]`.
    fn pay_one_collator_reward(_y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `432 + y * (187 ±0)`
        //  Estimated: `785697`
        // Minimum execution time: 37_890 nanoseconds.
        Weight::from_parts(3_878_778_000, 785697)
            .saturating_add(T::DbWeight::get().reads(307))
            .saturating_add(T::DbWeight::get().writes(303))
    }
    fn base_on_initialize() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 770 nanoseconds.
        Weight::from_parts(770_000, 0)
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 300]`.
    /// The range of component `y` is `[0, 100]`.
    fn set_auto_compound(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `218 + x * (35 ±0) + y * (47 ±0)`
        //  Estimated: `3684 + x * (36 ±0) + y * (48 ±0)`
        // Minimum execution time: 16_930 nanoseconds.
        Weight::from_parts(14_230_000, 3684)
            // Standard Error: 1_674
            .saturating_add(Weight::from_parts(40_600, 0).saturating_mul(x.into()))
            // Standard Error: 5_022
            .saturating_add(Weight::from_parts(27_000, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(Weight::from_parts(0, 36).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 48).saturating_mul(y.into()))
    }
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 350]`.
    /// The range of component `y` is `[0, 349]`.
    /// The range of component `z` is `[0, 99]`.
    fn delegate_with_auto_compound(x: u32, y: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (86 ±0) + y * (33 ±0) + z * (121 ±0)`
        //  Estimated: `16063 + x * (65 ±15) + y * (33 ±15) + z * (122 ±55)`
        // Minimum execution time: 72_660 nanoseconds.
        Weight::from_parts(34_640_000, 16063)
            // Standard Error: 41_654
            .saturating_add(Weight::from_parts(97_228, 0).saturating_mul(x.into()))
            // Standard Error: 41_773
            .saturating_add(Weight::from_parts(38_395, 0).saturating_mul(y.into()))
            // Standard Error: 147_263
            .saturating_add(Weight::from_parts(248_686, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(8))
            .saturating_add(Weight::from_parts(0, 65).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 33).saturating_mul(y.into()))
            .saturating_add(Weight::from_parts(0, 122).saturating_mul(z.into()))
    }
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegatorState` (r:2 w:2)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:2 w:2)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:2 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn delegate_with_auto_compound_worst() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `63206`
        //  Estimated: `69146`
        // Minimum execution time: 172_590 nanoseconds.
        Weight::from_parts(172_590_000, 69146)
            .saturating_add(T::DbWeight::get().reads(15))
            .saturating_add(T::DbWeight::get().writes(13))
    }
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn mint_collator_reward() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `107`
        //  Estimated: `3597`
        // Minimum execution time: 14_850 nanoseconds.
        Weight::from_parts(14_850_000, 3597)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::EnableMarkingOffline` (r:1 w:0)
    /// Proof: `ParachainStaking::EnableMarkingOffline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
    /// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::SelectedCandidates` (r:1 w:0)
    /// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::WasInactive` (r:1 w:0)
    /// Proof: `ParachainStaking::WasInactive` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn notify_inactive_collator() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `14679`
        //  Estimated: `18144`
        // Minimum execution time: 43_940 nanoseconds.
        Weight::from_parts(43_940_000, 18144)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `ParachainStaking::AtStake` (r:52 w:0)
    /// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AwardedPts` (r:51 w:0)
    /// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::WasInactive` (r:0 w:51)
    /// Proof: `ParachainStaking::WasInactive` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 50]`.
    fn mark_collators_as_inactive(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `115 + x * (130 ±0)`
        //  Estimated: `136352`
        // Minimum execution time: 13_730 nanoseconds.
        Weight::from_parts(372_660_000, 136352)
            .saturating_add(T::DbWeight::get().reads(103))
            .saturating_add(T::DbWeight::get().writes(51))
    }
    /// Storage: `ParachainStaking::AtStake` (r:1 w:1)
    /// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn migrate_old_collator_snapshot() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `296`
        //  Estimated: `3761`
        // Minimum execution time: 14_580 nanoseconds.
        Weight::from_parts(15_130_000, 3761)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
