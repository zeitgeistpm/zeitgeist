// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-05-12`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/production/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=50
// --repeat=20
// --pallet=pallet_parachain_staking
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_parachain_staking (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_parachain_staking::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_staking_expectations() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `88`
        //  Estimated: `1573`
        // Minimum execution time: 5_030 nanoseconds.
        Weight::from_parts(5_350_000, 1573)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_inflation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `88`
        //  Estimated: `1573`
        // Minimum execution time: 20_530 nanoseconds.
        Weight::from_parts(20_780_000, 1573)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_parachain_bond_account() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `1540`
        // Minimum execution time: 5_680 nanoseconds.
        Weight::from_parts(5_840_000, 1540)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_parachain_bond_reserve_percent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `1540`
        // Minimum execution time: 5_660 nanoseconds.
        Weight::from_parts(5_870_000, 1540)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::InflationDistributionInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationDistributionInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_inflation_distribution_config() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `55`
        //  Estimated: `1540`
        // Minimum execution time: 4_540 nanoseconds.
        Weight::from_parts(4_670_000, 1540)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
    /// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_total_selected() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `28`
        //  Estimated: `1513`
        // Minimum execution time: 4_810 nanoseconds.
        Weight::from_parts(5_040_000, 1513)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
    /// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_collator_commission() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27`
        //  Estimated: `1512`
        // Minimum execution time: 4_430 nanoseconds.
        Weight::from_parts(4_570_000, 1512)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
    /// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_blocks_per_round() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `116`
        //  Estimated: `1601`
        // Minimum execution time: 22_420 nanoseconds.
        Weight::from_parts(22_740_000, 1601)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:0 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:0 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[3, 200]`.
    fn join_candidates(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1175 + x * (52 ±0)`
        //  Estimated: `4764 + x * (53 ±0)`
        // Minimum execution time: 31_450 nanoseconds.
        Weight::from_parts(35_946_282, 4764)
            // Standard Error: 958
            .saturating_add(Weight::from_parts(61_819, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(Weight::from_parts(0, 53).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[3, 200]`.
    fn schedule_leave_candidates(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `732 + x * (49 ±0)`
        //  Estimated: `4072 + x * (50 ±0)`
        // Minimum execution time: 10_410 nanoseconds.
        Weight::from_parts(12_211_530, 4072)
            // Standard Error: 567
            .saturating_add(Weight::from_parts(51_088, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 50).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:350 w:350)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:350 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:350 w:350)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[2, 350]`.
    fn execute_leave_candidates_worst_case(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `359 + x * (530 ±0)`
        //  Estimated: `4964 + x * (3774 ±0)`
        // Minimum execution time: 66_710 nanoseconds.
        Weight::from_parts(67_850_000, 4964)
            // Standard Error: 54_920
            .saturating_add(Weight::from_parts(25_583_611, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 3774).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:350 w:350)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:350 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:350 w:350)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[2, 350]`.
    /// The range of component `y` is `[2, 350]`.
    fn execute_leave_candidates_ideal(x: u32, _y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `353 + x * (531 ±0)`
        //  Estimated: `4964 + x * (3774 ±0)`
        // Minimum execution time: 62_490 nanoseconds.
        Weight::from_parts(62_950_000, 4964)
            // Standard Error: 22_994
            .saturating_add(Weight::from_parts(26_583_234, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 3774).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[3, 200]`.
    fn cancel_leave_candidates(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `688 + x * (49 ±0)`
        //  Estimated: `4028 + x * (50 ±0)`
        // Minimum execution time: 9_860 nanoseconds.
        Weight::from_parts(11_770_445, 4028)
            // Standard Error: 552
            .saturating_add(Weight::from_parts(54_171, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 50).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn go_offline(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `601 + x * (49 ±0)`
        //  Estimated: `3987 + x * (50 ±0)`
        // Minimum execution time: 9_470 nanoseconds.
        Weight::from_parts(11_416_494, 3987)
            // Standard Error: 523
            .saturating_add(Weight::from_parts(49_530, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 50).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn go_online(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `553 + x * (49 ±0)`
        //  Estimated: `3939 + x * (50 ±0)`
        // Minimum execution time: 9_840 nanoseconds.
        Weight::from_parts(11_385_378, 3939)
            // Standard Error: 514
            .saturating_add(Weight::from_parts(52_535, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 50).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn candidate_bond_more(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1485 + x * (52 ±0)`
        //  Estimated: `4764 + x * (54 ±0)`
        // Minimum execution time: 28_170 nanoseconds.
        Weight::from_parts(32_401_065, 4764)
            // Standard Error: 1_119
            .saturating_add(Weight::from_parts(65_514, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(Weight::from_parts(0, 54).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn schedule_candidate_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `184`
        //  Estimated: `3649`
        // Minimum execution time: 8_200 nanoseconds.
        Weight::from_parts(8_540_000, 3649)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn execute_candidate_bond_less(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1538 + x * (52 ±0)`
        //  Estimated: `4764 + x * (54 ±0)`
        // Minimum execution time: 28_610 nanoseconds.
        Weight::from_parts(33_073_056, 4764)
            // Standard Error: 1_001
            .saturating_add(Weight::from_parts(55_896, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(Weight::from_parts(0, 54).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn set_candidate_bond_to_zero(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1518 + x * (52 ±0)`
        //  Estimated: `4764 + x * (54 ±0)`
        // Minimum execution time: 25_630 nanoseconds.
        Weight::from_parts(30_010_118, 4764)
            // Standard Error: 942
            .saturating_add(Weight::from_parts(54_912, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(Weight::from_parts(0, 54).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn cancel_candidate_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `204`
        //  Estimated: `3669`
        // Minimum execution time: 7_710 nanoseconds.
        Weight::from_parts(7_930_000, 3669)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    fn schedule_revoke_delegation(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `727 + x * (54 ±0)`
        //  Estimated: `4134 + x * (54 ±0)`
        // Minimum execution time: 10_400 nanoseconds.
        Weight::from_parts(14_892_906, 4134)
            // Standard Error: 583
            .saturating_add(Weight::from_parts(46_888, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 54).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    fn delegator_bond_more(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2054 + x * (103 ±0)`
        //  Estimated: `5592 + x * (102 ±0)`
        // Minimum execution time: 41_510 nanoseconds.
        Weight::from_parts(49_016_327, 5592)
            // Standard Error: 1_261
            .saturating_add(Weight::from_parts(102_894, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(9))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(Weight::from_parts(0, 102).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    fn schedule_delegator_bond_less(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `727 + x * (54 ±0)`
        //  Estimated: `4134 + x * (54 ±0)`
        // Minimum execution time: 11_420 nanoseconds.
        Weight::from_parts(16_597_361, 4134)
            // Standard Error: 667
            .saturating_add(Weight::from_parts(51_883, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 54).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:0)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn execute_revoke_delegation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1092`
        //  Estimated: `4764`
        // Minimum execution time: 51_200 nanoseconds.
        Weight::from_parts(51_810_000, 4764)
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(8))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn execute_delegator_revoke_delegation_worst() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `50147`
        //  Estimated: `53612`
        // Minimum execution time: 99_100 nanoseconds.
        Weight::from_parts(101_710_000, 53612)
            .saturating_add(T::DbWeight::get().reads(11))
            .saturating_add(T::DbWeight::get().writes(10))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn execute_delegator_bond_less_worst() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `38556`
        //  Estimated: `42021`
        // Minimum execution time: 83_330 nanoseconds.
        Weight::from_parts(85_640_000, 42021)
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(9))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    fn cancel_delegation_request(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `767 + x * (54 ±0)`
        //  Estimated: `4182 + x * (55 ±0)`
        // Minimum execution time: 14_650 nanoseconds.
        Weight::from_parts(18_280_788, 4182)
            // Standard Error: 570
            .saturating_add(Weight::from_parts(40_422, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 55).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::Points` (r:1 w:0)
    /// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn prepare_staking_payouts() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3`
        //  Estimated: `3468`
        // Minimum execution time: 2_070 nanoseconds.
        Weight::from_parts(2_160_000, 3468).saturating_add(T::DbWeight::get().reads(1))
    }
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:0)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `y` is `[0, 100]`.
    fn get_rewardable_delegators(y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `103 + y * (48 ±0)`
        //  Estimated: `3567 + y * (48 ±0)`
        // Minimum execution time: 5_030 nanoseconds.
        Weight::from_parts(5_642_877, 3567)
            // Standard Error: 473
            .saturating_add(Weight::from_parts(33_072, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(Weight::from_parts(0, 48).saturating_mul(y.into()))
    }
    /// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
    /// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:51 w:0)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:51 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:51 w:0)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:51 w:0)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
    /// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AtStake` (r:0 w:51)
    /// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 50]`.
    /// The range of component `y` is `[0, 100]`.
    fn select_top_candidates(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (5058 ±0) + y * (2400 ±0)`
        //  Estimated: `3758 + x * (4440 ±53) + y * (851 ±26)`
        // Minimum execution time: 15_430 nanoseconds.
        Weight::from_parts(15_690_000, 3758)
            // Standard Error: 49_015
            .saturating_add(Weight::from_parts(12_402_313, 0).saturating_mul(x.into()))
            // Standard Error: 24_442
            .saturating_add(Weight::from_parts(761_467, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 4440).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 851).saturating_mul(y.into()))
    }
    /// Storage: `System::Account` (r:349 w:349)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:349 w:349)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:349 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    /// The range of component `y` is `[0, 349]`.
    /// The range of component `z` is `[0, 349]`.
    fn pay_one_collator_reward_best(x: u32, y: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (483 ±0) + y * (206 ±0) + z * (53 ±0)`
        //  Estimated: `151960 + x * (2607 ±0) + y * (2241 ±21) + z * (37 ±1)`
        // Minimum execution time: 140 nanoseconds.
        Weight::from_parts(160_000, 151960)
            // Standard Error: 345_592
            .saturating_add(Weight::from_parts(33_801_936, 0).saturating_mul(x.into()))
            // Standard Error: 345_592
            .saturating_add(Weight::from_parts(21_426_956, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(y.into())))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
            .saturating_add(Weight::from_parts(0, 2607).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 2241).saturating_mul(y.into()))
            .saturating_add(Weight::from_parts(0, 37).saturating_mul(z.into()))
    }
    /// Storage: `ParachainStaking::DelayedPayouts` (r:1 w:0)
    /// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Points` (r:1 w:0)
    /// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AtStake` (r:2 w:1)
    /// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AwardedPts` (r:1 w:1)
    /// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:301 w:301)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `y` is `[0, 300]`.
    fn pay_one_collator_reward(y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `406 + y * (187 ±0)`
        //  Estimated: `6340 + y * (2607 ±0)`
        // Minimum execution time: 27_660 nanoseconds.
        Weight::from_parts(13_073_000, 6340)
            // Standard Error: 10_706
            .saturating_add(Weight::from_parts(11_809_870, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
            .saturating_add(Weight::from_parts(0, 2607).saturating_mul(y.into()))
    }
    fn base_on_initialize() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 500 nanoseconds.
        Weight::from_parts(540_000, 0)
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 300]`.
    /// The range of component `y` is `[0, 100]`.
    fn set_auto_compound(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `655 + x * (34 ±0) + y * (48 ±0)`
        //  Estimated: `3997 + x * (35 ±0) + y * (49 ±0)`
        // Minimum execution time: 13_400 nanoseconds.
        Weight::from_parts(13_814_228, 3997)
            // Standard Error: 241
            .saturating_add(Weight::from_parts(36_525, 0).saturating_mul(x.into()))
            // Standard Error: 723
            .saturating_add(Weight::from_parts(13_028, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(Weight::from_parts(0, 35).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 49).saturating_mul(y.into()))
    }
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 350]`.
    /// The range of component `y` is `[0, 349]`.
    /// The range of component `z` is `[0, 99]`.
    fn delegate_with_auto_compound(x: u32, y: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (84 ±0) + y * (33 ±0) + z * (114 ±0)`
        //  Estimated: `34182 + x * (61 ±0) + y * (31 ±0) + z * (105 ±1)`
        // Minimum execution time: 59_870 nanoseconds.
        Weight::from_parts(45_032_639, 34182)
            // Standard Error: 770
            .saturating_add(Weight::from_parts(99_062, 0).saturating_mul(x.into()))
            // Standard Error: 772
            .saturating_add(Weight::from_parts(25_354, 0).saturating_mul(y.into()))
            // Standard Error: 2_721
            .saturating_add(Weight::from_parts(98_898, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(9))
            .saturating_add(T::DbWeight::get().writes(8))
            .saturating_add(Weight::from_parts(0, 61).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 31).saturating_mul(y.into()))
            .saturating_add(Weight::from_parts(0, 105).saturating_mul(z.into()))
    }
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegatorState` (r:2 w:2)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:2 w:2)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:2 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn delegate_with_auto_compound_worst() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `63206`
        //  Estimated: `69146`
        // Minimum execution time: 142_830 nanoseconds.
        Weight::from_parts(145_800_000, 69146)
            .saturating_add(T::DbWeight::get().reads(15))
            .saturating_add(T::DbWeight::get().writes(13))
    }
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn mint_collator_reward() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `107`
        //  Estimated: `3597`
        // Minimum execution time: 11_750 nanoseconds.
        Weight::from_parts(11_940_000, 3597)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::EnableMarkingOffline` (r:1 w:0)
    /// Proof: `ParachainStaking::EnableMarkingOffline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
    /// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::SelectedCandidates` (r:1 w:0)
    /// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::WasInactive` (r:1 w:0)
    /// Proof: `ParachainStaking::WasInactive` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn notify_inactive_collator() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `14679`
        //  Estimated: `18144`
        // Minimum execution time: 32_330 nanoseconds.
        Weight::from_parts(32_890_000, 18144)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `ParachainStaking::AtStake` (r:52 w:0)
    /// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AwardedPts` (r:51 w:0)
    /// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::WasInactive` (r:0 w:51)
    /// Proof: `ParachainStaking::WasInactive` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 50]`.
    fn mark_collators_as_inactive(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `113 + x * (130 ±0)`
        //  Estimated: `6054 + x * (2606 ±0)`
        // Minimum execution time: 7_820 nanoseconds.
        Weight::from_parts(7_484_716, 6054)
            // Standard Error: 6_894
            .saturating_add(Weight::from_parts(6_433_598, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 2606).saturating_mul(x.into()))
    }
}
