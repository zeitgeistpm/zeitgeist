// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-02-15`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zafoi`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: `Some(Native)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=0
// --pallet=pallet_parachain_staking
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_parachain_staking (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_parachain_staking::weights::WeightInfo for WeightInfo<T> {
    /// Storage: ParachainStaking InflationConfig (r:1 w:1)
    /// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
    fn set_staking_expectations() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `119`
        //  Estimated: `614`
        // Minimum execution time: 10_440 nanoseconds.
        Weight::from_parts(10_440_000, 614)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking InflationConfig (r:1 w:1)
    /// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
    fn set_inflation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `119`
        //  Estimated: `614`
        // Minimum execution time: 13_821 nanoseconds.
        Weight::from_parts(13_821_000, 614)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking ParachainBondInfo (max_values: Some(1), max_size: None, mode: Measured)
    fn set_parachain_bond_account() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `52`
        //  Estimated: `547`
        // Minimum execution time: 11_971 nanoseconds.
        Weight::from_parts(11_971_000, 547)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking ParachainBondInfo (max_values: Some(1), max_size: None, mode: Measured)
    fn set_parachain_bond_reserve_percent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `52`
        //  Estimated: `547`
        // Minimum execution time: 10_280 nanoseconds.
        Weight::from_parts(10_280_000, 547)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking TotalSelected (r:1 w:1)
    /// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
    fn set_total_selected() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `28`
        //  Estimated: `523`
        // Minimum execution time: 7_890 nanoseconds.
        Weight::from_parts(7_890_000, 523)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking CollatorCommission (r:1 w:1)
    /// Proof Skipped: ParachainStaking CollatorCommission (max_values: Some(1), max_size: None, mode: Measured)
    fn set_collator_commission() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27`
        //  Estimated: `522`
        // Minimum execution time: 8_791 nanoseconds.
        Weight::from_parts(8_791_000, 522)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking TotalSelected (r:1 w:0)
    /// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking InflationConfig (r:1 w:1)
    /// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
    fn set_blocks_per_round() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `147`
        //  Estimated: `1284`
        // Minimum execution time: 19_731 nanoseconds.
        Weight::from_parts(19_731_000, 1284)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegatorState (r:1 w:0)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:0 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking BottomDelegations (r:0 w:1)
    /// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
    /// The range of component `x` is `[3, 1000]`.
    fn join_candidates(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `401 + x * (50 ±0)`
        //  Estimated: `317949`
        // Minimum execution time: 25_120 nanoseconds.
        Weight::from_parts(69_512_000, 317949)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(7))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `x` is `[3, 1000]`.
    fn schedule_leave_candidates(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `305 + x * (49 ±0)`
        //  Estimated: `101662`
        // Minimum execution time: 12_730 nanoseconds.
        Weight::from_parts(44_090_000, 101662)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegatorState (r:349 w:349)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:350 w:350)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:350 w:350)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking BottomDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `x` is `[2, 350]`.
    fn execute_leave_candidates(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `319 + x * (595 ±0)`
        //  Estimated: `4570902`
        // Minimum execution time: 41_411 nanoseconds.
        Weight::from_parts(6_406_310_000, 4570902)
            .saturating_add(T::DbWeight::get().reads(1055))
            .saturating_add(T::DbWeight::get().writes(1055))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `x` is `[3, 1000]`.
    fn cancel_leave_candidates(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `261 + x * (49 ±0)`
        //  Estimated: `101574`
        // Minimum execution time: 12_311 nanoseconds.
        Weight::from_parts(45_751_000, 101574)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    fn go_offline() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `371`
        //  Estimated: `3712`
        // Minimum execution time: 13_030 nanoseconds.
        Weight::from_parts(13_030_000, 3712)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    fn go_online() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `322`
        //  Estimated: `3614`
        // Minimum execution time: 11_990 nanoseconds.
        Weight::from_parts(11_990_000, 3614)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    fn candidate_bond_more() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `650`
        //  Estimated: `11796`
        // Minimum execution time: 25_661 nanoseconds.
        Weight::from_parts(25_661_000, 11796)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    fn schedule_candidate_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `216`
        //  Estimated: `2691`
        // Minimum execution time: 9_441 nanoseconds.
        Weight::from_parts(9_441_000, 2691)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    fn execute_candidate_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `670`
        //  Estimated: `11856`
        // Minimum execution time: 24_160 nanoseconds.
        Weight::from_parts(24_160_000, 11856)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    fn cancel_candidate_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `236`
        //  Estimated: `2711`
        // Minimum execution time: 9_060 nanoseconds.
        Weight::from_parts(9_060_000, 2711)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `x` is `[3, 100]`.
    /// The range of component `y` is `[2, 300]`.
    fn delegate(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1472 + x * (108 ±0) + y * (53 ±0)`
        //  Estimated: `22156 + x * (540 ±0) + y * (270 ±0)`
        // Minimum execution time: 45_551 nanoseconds.
        Weight::from_parts(31_977_214, 22156)
            // Standard Error: 5_812
            .saturating_add(Weight::from_parts(134_695, 0).saturating_mul(x.into()))
            // Standard Error: 1_891
            .saturating_add(Weight::from_parts(52_098, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(Weight::from_parts(0, 540).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 270).saturating_mul(y.into()))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    fn schedule_leave_delegators() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `176`
        //  Estimated: `5302`
        // Minimum execution time: 10_380 nanoseconds.
        Weight::from_parts(10_380_000, 5302)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:99 w:99)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidateInfo (r:99 w:99)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:99 w:99)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking AutoCompoundingDelegations (r:99 w:0)
    /// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `x` is `[2, 100]`.
    fn execute_leave_delegators(_x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `115 + x * (563 ±0)`
        //  Estimated: `1385383`
        // Minimum execution time: 36_731 nanoseconds.
        Weight::from_parts(1_198_257_000, 1385383)
            .saturating_add(T::DbWeight::get().reads(401))
            .saturating_add(T::DbWeight::get().writes(302))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    fn cancel_leave_delegators() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `298`
        //  Estimated: `5546`
        // Minimum execution time: 11_720 nanoseconds.
        Weight::from_parts(11_720_000, 5546)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    fn schedule_revoke_delegation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `176`
        //  Estimated: `5302`
        // Minimum execution time: 10_110 nanoseconds.
        Weight::from_parts(10_110_000, 5302)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    fn delegator_bond_more() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `23667`
        // Minimum execution time: 32_770 nanoseconds.
        Weight::from_parts(32_770_000, 23667)
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(7))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    fn schedule_delegator_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `176`
        //  Estimated: `5302`
        // Minimum execution time: 10_041 nanoseconds.
        Weight::from_parts(10_041_000, 5302)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:0)
    /// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    fn execute_revoke_delegation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1243`
        //  Estimated: `28447`
        // Minimum execution time: 37_821 nanoseconds.
        Weight::from_parts(37_821_000, 28447)
            .saturating_add(T::DbWeight::get().reads(9))
            .saturating_add(T::DbWeight::get().writes(8))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking TopDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    fn execute_delegator_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1188`
        //  Estimated: `24399`
        // Minimum execution time: 32_081 nanoseconds.
        Weight::from_parts(32_081_000, 24399)
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(8))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    fn cancel_revoke_delegation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `298`
        //  Estimated: `5546`
        // Minimum execution time: 10_330 nanoseconds.
        Weight::from_parts(10_330_000, 5546)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    fn cancel_delegator_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `298`
        //  Estimated: `5546`
        // Minimum execution time: 10_060 nanoseconds.
        Weight::from_parts(10_060_000, 5546)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking Points (r:1 w:0)
    /// Proof Skipped: ParachainStaking Points (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking Staked (r:1 w:1)
    /// Proof Skipped: ParachainStaking Staked (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking InflationConfig (r:1 w:0)
    /// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking ParachainBondInfo (r:1 w:0)
    /// Proof Skipped: ParachainStaking ParachainBondInfo (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking CollatorCommission (r:1 w:0)
    /// Proof Skipped: ParachainStaking CollatorCommission (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelayedPayouts (r:0 w:1)
    /// Proof Skipped: ParachainStaking DelayedPayouts (max_values: None, max_size: None, mode: Measured)
    fn prepare_staking_payouts() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `438`
        //  Estimated: `11670`
        // Minimum execution time: 18_520 nanoseconds.
        Weight::from_parts(18_520_000, 11670)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:1 w:0)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// The range of component `y` is `[0, 100]`.
    fn get_rewardable_delegators(_y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `83 + y * (48 ±0)`
        //  Estimated: `14788`
        // Minimum execution time: 3_630 nanoseconds.
        Weight::from_parts(6_521_000, 14788).saturating_add(T::DbWeight::get().reads(2))
    }
    /// Storage: ParachainStaking TotalSelected (r:1 w:0)
    /// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:0)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidateInfo (r:51 w:0)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:51 w:0)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:51 w:0)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking AutoCompoundingDelegations (r:51 w:0)
    /// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
    /// Proof Skipped: ParachainStaking SelectedCandidates (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking AtStake (r:0 w:51)
    /// Proof Skipped: ParachainStaking AtStake (max_values: None, max_size: None, mode: Measured)
    /// The range of component `x` is `[0, 50]`.
    /// The range of component `y` is `[0, 100]`.
    fn select_top_candidates(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (5124 ±0) + y * (2390 ±0)`
        //  Estimated: `13898 + x * (27948 ±1_656) + y * (7648 ±828)`
        // Minimum execution time: 14_520 nanoseconds.
        Weight::from_parts(14_520_000, 13898)
            // Standard Error: 1_776_838
            .saturating_add(Weight::from_parts(8_272_708, 0).saturating_mul(x.into()))
            // Standard Error: 888_419
            .saturating_add(Weight::from_parts(1_025_784, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 27948).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 7648).saturating_mul(y.into()))
    }
    /// Storage: ParachainStaking DelayedPayouts (r:1 w:0)
    /// Proof Skipped: ParachainStaking DelayedPayouts (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking Points (r:1 w:0)
    /// Proof Skipped: ParachainStaking Points (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking AtStake (r:2 w:1)
    /// Proof Skipped: ParachainStaking AtStake (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking AwardedPts (r:1 w:1)
    /// Proof Skipped: ParachainStaking AwardedPts (max_values: None, max_size: None, mode: Measured)
    /// Storage: System Account (r:301 w:301)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `y` is `[0, 300]`.
    fn pay_one_collator_reward(_y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `511 + y * (219 ±0)`
        //  Estimated: `1062338`
        // Minimum execution time: 25_221 nanoseconds.
        Weight::from_parts(1_698_988_000, 1062338)
            .saturating_add(T::DbWeight::get().reads(306))
            .saturating_add(T::DbWeight::get().writes(303))
    }
    fn base_on_initialize() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 940 nanoseconds.
        Weight::from_parts(940_000, 0)
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:0)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
    /// The range of component `x` is `[0, 300]`.
    /// The range of component `y` is `[0, 100]`.
    fn set_auto_compound(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `251 + x * (35 ±0) + y * (47 ±0)`
        //  Estimated: `5452 + x * (72 ±0) + y * (96 ±0)`
        // Minimum execution time: 13_860 nanoseconds.
        Weight::from_parts(10_831_000, 5452)
            // Standard Error: 1_962
            .saturating_add(Weight::from_parts(37_266, 0).saturating_mul(x.into()))
            // Standard Error: 5_888
            .saturating_add(Weight::from_parts(30_290, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(Weight::from_parts(0, 72).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 96).saturating_mul(y.into()))
    }
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking BottomDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `x` is `[0, 350]`.
    /// The range of component `y` is `[0, 349]`.
    /// The range of component `z` is `[0, 99]`.
    fn delegate_with_auto_compound(x: u32, y: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (86 ±0) + y * (33 ±0) + z * (121 ±0)`
        //  Estimated: `93843 + x * (425 ±15) + y * (78 ±15) + z * (286 ±55)`
        // Minimum execution time: 47_191 nanoseconds.
        Weight::from_parts(17_010_666, 93843)
            // Standard Error: 3_271
            .saturating_add(Weight::from_parts(86_544, 0).saturating_mul(x.into()))
            // Standard Error: 3_281
            .saturating_add(Weight::from_parts(42_262, 0).saturating_mul(y.into()))
            // Standard Error: 11_566
            .saturating_add(Weight::from_parts(155_865, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(9))
            .saturating_add(T::DbWeight::get().writes(8))
            .saturating_add(Weight::from_parts(0, 425).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 78).saturating_mul(y.into()))
            .saturating_add(Weight::from_parts(0, 286).saturating_mul(z.into()))
    }
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn mint_collator_reward() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `139`
        //  Estimated: `2607`
        // Minimum execution time: 8_441 nanoseconds.
        Weight::from_parts(8_441_000, 2607)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
