// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-01-15`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_parachain_staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_parachain_staking (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_parachain_staking::weights::WeightInfo for WeightInfo<T> {
    /// Storage: ParachainStaking InflationConfig (r:1 w:1)
    /// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
    fn set_staking_expectations() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `119`
        //  Estimated: `614`
        // Minimum execution time: 17_690 nanoseconds.
        Weight::from_parts(21_220_000, 614)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking InflationConfig (r:1 w:1)
    /// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
    fn set_inflation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `119`
        //  Estimated: `614`
        // Minimum execution time: 62_130 nanoseconds.
        Weight::from_parts(75_020_000, 614)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking ParachainBondInfo (max_values: Some(1), max_size: None, mode: Measured)
    fn set_parachain_bond_account() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `52`
        //  Estimated: `547`
        // Minimum execution time: 15_670 nanoseconds.
        Weight::from_parts(19_500_000, 547)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking ParachainBondInfo (max_values: Some(1), max_size: None, mode: Measured)
    fn set_parachain_bond_reserve_percent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `52`
        //  Estimated: `547`
        // Minimum execution time: 14_900 nanoseconds.
        Weight::from_parts(18_460_000, 547)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking TotalSelected (r:1 w:1)
    /// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
    fn set_total_selected() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `28`
        //  Estimated: `523`
        // Minimum execution time: 16_140 nanoseconds.
        Weight::from_parts(19_481_000, 523)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking CollatorCommission (r:1 w:1)
    /// Proof Skipped: ParachainStaking CollatorCommission (max_values: Some(1), max_size: None, mode: Measured)
    fn set_collator_commission() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27`
        //  Estimated: `522`
        // Minimum execution time: 17_750 nanoseconds.
        Weight::from_parts(18_270_000, 522)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking TotalSelected (r:1 w:0)
    /// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking InflationConfig (r:1 w:1)
    /// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
    fn set_blocks_per_round() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `147`
        //  Estimated: `1284`
        // Minimum execution time: 66_920 nanoseconds.
        Weight::from_parts(81_800_000, 1284)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegatorState (r:1 w:0)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:0 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking BottomDelegations (r:0 w:1)
    /// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
    /// The range of component `x` is `[3, 1000]`.
    fn join_candidates(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1898 + x * (49 ±0)`
        //  Estimated: `22371 + x * (300 ±0)`
        // Minimum execution time: 67_450 nanoseconds.
        Weight::from_parts(87_054_208, 22371)
            // Standard Error: 2_162
            .saturating_add(Weight::from_parts(203_040, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(Weight::from_parts(0, 300).saturating_mul(x.into()))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `x` is `[3, 1000]`.
    fn schedule_leave_candidates(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `990 + x * (48 ±0)`
        //  Estimated: `4794 + x * (98 ±0)`
        // Minimum execution time: 36_370 nanoseconds.
        Weight::from_parts(40_724_049, 4794)
            // Standard Error: 2_126
            .saturating_add(Weight::from_parts(171_862, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 98).saturating_mul(x.into()))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegatorState (r:349 w:349)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:350 w:350)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:350 w:350)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking BottomDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `x` is `[2, 350]`.
    fn execute_leave_candidates(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `238 + x * (595 ±0)`
        //  Estimated: `18229 + x * (12995 ±0)`
        // Minimum execution time: 121_730 nanoseconds.
        Weight::from_parts(123_981_000, 18229)
            // Standard Error: 154_533
            .saturating_add(Weight::from_parts(45_598_956, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 12995).saturating_mul(x.into()))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `x` is `[3, 1000]`.
    fn cancel_leave_candidates(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `946 + x * (48 ±0)`
        //  Estimated: `4704 + x * (98 ±0)`
        // Minimum execution time: 26_500 nanoseconds.
        Weight::from_parts(36_332_094, 4704)
            // Standard Error: 2_111
            .saturating_add(Weight::from_parts(187_547, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 98).saturating_mul(x.into()))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    fn go_offline() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `371`
        //  Estimated: `3712`
        // Minimum execution time: 28_900 nanoseconds.
        Weight::from_parts(35_300_000, 3712)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    fn go_online() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `322`
        //  Estimated: `3614`
        // Minimum execution time: 30_500 nanoseconds.
        Weight::from_parts(35_560_000, 3614)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    fn candidate_bond_more() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `650`
        //  Estimated: `11796`
        // Minimum execution time: 63_281 nanoseconds.
        Weight::from_parts(75_700_000, 11796)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    fn schedule_candidate_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `216`
        //  Estimated: `2691`
        // Minimum execution time: 23_790 nanoseconds.
        Weight::from_parts(29_200_000, 2691)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    fn execute_candidate_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `670`
        //  Estimated: `11856`
        // Minimum execution time: 54_520 nanoseconds.
        Weight::from_parts(74_880_000, 11856)
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(5))
    }
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    fn cancel_candidate_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `236`
        //  Estimated: `2711`
        // Minimum execution time: 26_350 nanoseconds.
        Weight::from_parts(27_350_000, 2711)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `x` is `[3, 100]`.
    /// The range of component `y` is `[2, 300]`.
    fn delegate(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2374 + x * (103 ±0) + y * (52 ±0)`
        //  Estimated: `25391 + x * (530 ±0) + y * (265 ±0)`
        // Minimum execution time: 117_260 nanoseconds.
        Weight::from_parts(127_979_202, 25391)
            // Standard Error: 7_758
            .saturating_add(Weight::from_parts(273_960, 0).saturating_mul(x.into()))
            // Standard Error: 2_545
            .saturating_add(Weight::from_parts(138_185, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(Weight::from_parts(0, 530).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 265).saturating_mul(y.into()))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    fn schedule_leave_delegators() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `176`
        //  Estimated: `5302`
        // Minimum execution time: 25_010 nanoseconds.
        Weight::from_parts(33_430_000, 5302)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:99 w:99)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidateInfo (r:99 w:99)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:99 w:99)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking AutoCompoundingDelegations (r:99 w:0)
    /// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `x` is `[2, 100]`.
    fn execute_leave_delegators(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `755 + x * (558 ±0)`
        //  Estimated: `26542 + x * (13492 ±2)`
        // Minimum execution time: 107_520 nanoseconds.
        Weight::from_parts(111_190_000, 26542)
            // Standard Error: 83_588
            .saturating_add(Weight::from_parts(37_116_448, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 13492).saturating_mul(x.into()))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    fn cancel_leave_delegators() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `298`
        //  Estimated: `5546`
        // Minimum execution time: 28_590 nanoseconds.
        Weight::from_parts(37_630_000, 5546)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    fn schedule_revoke_delegation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `176`
        //  Estimated: `5302`
        // Minimum execution time: 30_010 nanoseconds.
        Weight::from_parts(33_610_000, 5302)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    fn delegator_bond_more() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1066`
        //  Estimated: `23667`
        // Minimum execution time: 91_720 nanoseconds.
        Weight::from_parts(94_170_000, 23667)
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(7))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    fn schedule_delegator_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `176`
        //  Estimated: `5302`
        // Minimum execution time: 27_890 nanoseconds.
        Weight::from_parts(33_760_000, 5302)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:0)
    /// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    fn execute_revoke_delegation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1243`
        //  Estimated: `28447`
        // Minimum execution time: 109_950 nanoseconds.
        Weight::from_parts(127_880_000, 28447)
            .saturating_add(T::DbWeight::get().reads(9))
            .saturating_add(T::DbWeight::get().writes(8))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking TopDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    fn execute_delegator_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1188`
        //  Estimated: `24399`
        // Minimum execution time: 93_580 nanoseconds.
        Weight::from_parts(108_650_000, 24399)
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(8))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    fn cancel_revoke_delegation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `298`
        //  Estimated: `5546`
        // Minimum execution time: 30_350 nanoseconds.
        Weight::from_parts(34_140_000, 5546)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    fn cancel_delegator_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `298`
        //  Estimated: `5546`
        // Minimum execution time: 30_280 nanoseconds.
        Weight::from_parts(36_430_000, 5546)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: ParachainStaking Points (r:1 w:0)
    /// Proof Skipped: ParachainStaking Points (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking Staked (r:1 w:1)
    /// Proof Skipped: ParachainStaking Staked (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking InflationConfig (r:1 w:0)
    /// Proof Skipped: ParachainStaking InflationConfig (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking ParachainBondInfo (r:1 w:0)
    /// Proof Skipped: ParachainStaking ParachainBondInfo (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking CollatorCommission (r:1 w:0)
    /// Proof Skipped: ParachainStaking CollatorCommission (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelayedPayouts (r:0 w:1)
    /// Proof Skipped: ParachainStaking DelayedPayouts (max_values: None, max_size: None, mode: Measured)
    fn prepare_staking_payouts() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `438`
        //  Estimated: `11670`
        // Minimum execution time: 47_530 nanoseconds.
        Weight::from_parts(57_600_000, 11670)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:1 w:0)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// The range of component `y` is `[0, 100]`.
    fn get_rewardable_delegators(y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `118 + y * (48 ±0)`
        //  Estimated: `5180 + y * (96 ±0)`
        // Minimum execution time: 9_090 nanoseconds.
        Weight::from_parts(12_813_747, 5180)
            // Standard Error: 3_345
            .saturating_add(Weight::from_parts(115_123, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(Weight::from_parts(0, 96).saturating_mul(y.into()))
    }
    /// Storage: ParachainStaking TotalSelected (r:1 w:0)
    /// Proof Skipped: ParachainStaking TotalSelected (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:0)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidateInfo (r:51 w:0)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking DelegationScheduledRequests (r:51 w:0)
    /// Proof Skipped: ParachainStaking DelegationScheduledRequests (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:51 w:0)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking AutoCompoundingDelegations (r:51 w:0)
    /// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking SelectedCandidates (r:0 w:1)
    /// Proof Skipped: ParachainStaking SelectedCandidates (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: ParachainStaking AtStake (r:0 w:51)
    /// Proof Skipped: ParachainStaking AtStake (max_values: None, max_size: None, mode: Measured)
    /// The range of component `x` is `[0, 50]`.
    /// The range of component `y` is `[0, 100]`.
    fn select_top_candidates(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (5122 ±0) + y * (2400 ±0)`
        //  Estimated: `13898 + x * (26124 ±53) + y * (6816 ±26)`
        // Minimum execution time: 37_530 nanoseconds.
        Weight::from_parts(38_070_000, 13898)
            // Standard Error: 167_246
            .saturating_add(Weight::from_parts(29_946_513, 0).saturating_mul(x.into()))
            // Standard Error: 83_401
            .saturating_add(Weight::from_parts(2_881_371, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 26124).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 6816).saturating_mul(y.into()))
    }
    /// Storage: ParachainStaking DelayedPayouts (r:1 w:0)
    /// Proof Skipped: ParachainStaking DelayedPayouts (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking Points (r:1 w:0)
    /// Proof Skipped: ParachainStaking Points (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking AtStake (r:2 w:1)
    /// Proof Skipped: ParachainStaking AtStake (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking AwardedPts (r:1 w:1)
    /// Proof Skipped: ParachainStaking AwardedPts (max_values: None, max_size: None, mode: Measured)
    /// Storage: System Account (r:301 w:301)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `y` is `[0, 300]`.
    fn pay_one_collator_reward(y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `485 + y * (219 ±0)`
        //  Estimated: `16898 + y * (3483 ±0)`
        // Minimum execution time: 53_111 nanoseconds.
        Weight::from_parts(59_768_220, 16898)
            // Standard Error: 56_493
            .saturating_add(Weight::from_parts(21_235_473, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
            .saturating_add(Weight::from_parts(0, 3483).saturating_mul(y.into()))
    }
    fn base_on_initialize() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 2_050 nanoseconds.
        Weight::from_parts(2_300_000, 0)
    }
    /// Storage: ParachainStaking DelegatorState (r:1 w:0)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
    /// The range of component `x` is `[0, 300]`.
    /// The range of component `y` is `[0, 100]`.
    fn set_auto_compound(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `718 + x * (34 ±0) + y * (48 ±0)`
        //  Estimated: `6134 + x * (70 ±0) + y * (98 ±0)`
        // Minimum execution time: 43_000 nanoseconds.
        Weight::from_parts(54_178_821, 6134)
            // Standard Error: 920
            .saturating_add(Weight::from_parts(78_822, 0).saturating_mul(x.into()))
            // Standard Error: 2_754
            .saturating_add(Weight::from_parts(66_407, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(Weight::from_parts(0, 70).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 98).saturating_mul(y.into()))
    }
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: ParachainStaking DelegatorState (r:1 w:1)
    /// Proof Skipped: ParachainStaking DelegatorState (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidateInfo (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidateInfo (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking AutoCompoundingDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking TopDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking TopDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking BottomDelegations (r:1 w:1)
    /// Proof Skipped: ParachainStaking BottomDelegations (max_values: None, max_size: None, mode: Measured)
    /// Storage: ParachainStaking CandidatePool (r:1 w:1)
    /// Proof Skipped: ParachainStaking CandidatePool (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: ParachainStaking Total (r:1 w:1)
    /// Proof Skipped: ParachainStaking Total (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `x` is `[0, 350]`.
    /// The range of component `y` is `[0, 349]`.
    /// The range of component `z` is `[0, 99]`.
    fn delegate_with_auto_compound(x: u32, y: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (84 ±0) + y * (33 ±0) + z * (114 ±0)`
        //  Estimated: `127262 + x * (367 ±0) + y * (73 ±0) + z * (230 ±1)`
        // Minimum execution time: 117_820 nanoseconds.
        Weight::from_parts(111_718_224, 127262)
            // Standard Error: 2_457
            .saturating_add(Weight::from_parts(237_230, 0).saturating_mul(x.into()))
            // Standard Error: 2_464
            .saturating_add(Weight::from_parts(43_725, 0).saturating_mul(y.into()))
            // Standard Error: 8_678
            .saturating_add(Weight::from_parts(311_558, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(8))
            .saturating_add(Weight::from_parts(0, 367).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 73).saturating_mul(y.into()))
            .saturating_add(Weight::from_parts(0, 230).saturating_mul(z.into()))
    }
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn mint_collator_reward() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `139`
        //  Estimated: `2607`
        // Minimum execution time: 28_180 nanoseconds.
        Weight::from_parts(28_980_000, 2607)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
