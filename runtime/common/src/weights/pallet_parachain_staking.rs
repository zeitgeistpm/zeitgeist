// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-08-12`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_parachain_staking
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_parachain_staking (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_parachain_staking::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_staking_expectations() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `88`
        //  Estimated: `1573`
        // Minimum execution time: 12_750 nanoseconds.
        Weight::from_parts(13_320_000, 1573)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_inflation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `88`
        //  Estimated: `1573`
        // Minimum execution time: 41_701 nanoseconds.
        Weight::from_parts(42_771_000, 1573)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::ParachainBondInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::ParachainBondInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_parachain_bond_account() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `21`
        //  Estimated: `1506`
        // Minimum execution time: 11_501 nanoseconds.
        Weight::from_parts(12_070_000, 1506)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::ParachainBondInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::ParachainBondInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_parachain_bond_reserve_percent() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `21`
        //  Estimated: `1506`
        // Minimum execution time: 11_220 nanoseconds.
        Weight::from_parts(11_840_000, 1506)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
    /// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_total_selected() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `28`
        //  Estimated: `1513`
        // Minimum execution time: 12_491 nanoseconds.
        Weight::from_parts(13_000_000, 1513)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
    /// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_collator_commission() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `27`
        //  Estimated: `1512`
        // Minimum execution time: 11_211 nanoseconds.
        Weight::from_parts(11_700_000, 1512)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
    /// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::InflationConfig` (r:1 w:1)
    /// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn set_blocks_per_round() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `116`
        //  Estimated: `1601`
        // Minimum execution time: 45_401 nanoseconds.
        Weight::from_parts(46_321_000, 1601)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:0 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:0 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[3, 200]`.
    fn join_candidates(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1212 + x * (52 ±0)`
        //  Estimated: `4764 + x * (53 ±0)`
        // Minimum execution time: 60_852 nanoseconds.
        Weight::from_parts(69_052_396, 4764)
            // Standard Error: 2_376
            .saturating_add(Weight::from_parts(101_641, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(Weight::from_parts(0, 53).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[3, 200]`.
    fn schedule_leave_candidates(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `769 + x * (49 ±0)`
        //  Estimated: `4109 + x * (50 ±0)`
        // Minimum execution time: 22_450 nanoseconds.
        Weight::from_parts(27_739_839, 4109)
            // Standard Error: 2_293
            .saturating_add(Weight::from_parts(87_842, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 50).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:350 w:350)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:350 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:350 w:350)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[2, 350]`.
    fn execute_leave_candidates_worst_case(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `283 + x * (530 ±0)`
        //  Estimated: `4888 + x * (3774 ±0)`
        // Minimum execution time: 113_953 nanoseconds.
        Weight::from_parts(115_423_000, 4888)
            // Standard Error: 129_842
            .saturating_add(Weight::from_parts(43_888_133, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 3774).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:350 w:350)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:350 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:350 w:350)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[2, 350]`.
    /// The range of component `y` is `[2, 350]`.
    fn execute_leave_candidates_ideal(x: u32, _y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `277 + x * (531 ±0)`
        //  Estimated: `4888 + x * (3774 ±0)`
        // Minimum execution time: 104_643 nanoseconds.
        Weight::from_parts(105_892_000, 4888)
            // Standard Error: 54_336
            .saturating_add(Weight::from_parts(45_946_893, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 3774).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[3, 200]`.
    fn cancel_leave_candidates(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `725 + x * (49 ±0)`
        //  Estimated: `4065 + x * (50 ±0)`
        // Minimum execution time: 21_350 nanoseconds.
        Weight::from_parts(25_668_081, 4065)
            // Standard Error: 1_482
            .saturating_add(Weight::from_parts(100_441, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 50).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn go_offline(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `638 + x * (49 ±0)`
        //  Estimated: `4024 + x * (50 ±0)`
        // Minimum execution time: 19_670 nanoseconds.
        Weight::from_parts(24_709_128, 4024)
            // Standard Error: 1_355
            .saturating_add(Weight::from_parts(83_124, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 50).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn go_online(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `590 + x * (49 ±0)`
        //  Estimated: `3976 + x * (50 ±0)`
        // Minimum execution time: 20_100 nanoseconds.
        Weight::from_parts(24_707_639, 3976)
            // Standard Error: 1_362
            .saturating_add(Weight::from_parts(95_552, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 50).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn candidate_bond_more(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1522 + x * (52 ±0)`
        //  Estimated: `4764 + x * (54 ±0)`
        // Minimum execution time: 51_941 nanoseconds.
        Weight::from_parts(60_792_210, 4764)
            // Standard Error: 2_140
            .saturating_add(Weight::from_parts(109_115, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(Weight::from_parts(0, 54).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn schedule_candidate_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `184`
        //  Estimated: `3649`
        // Minimum execution time: 17_501 nanoseconds.
        Weight::from_parts(18_691_000, 3649)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn execute_candidate_bond_less(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1538 + x * (52 ±0)`
        //  Estimated: `4764 + x * (54 ±0)`
        // Minimum execution time: 52_861 nanoseconds.
        Weight::from_parts(60_523_085, 4764)
            // Standard Error: 2_009
            .saturating_add(Weight::from_parts(98_705, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(Weight::from_parts(0, 54).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[1, 200]`.
    fn set_candidate_bond_to_zero(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1518 + x * (52 ±0)`
        //  Estimated: `4764 + x * (54 ±0)`
        // Minimum execution time: 50_652 nanoseconds.
        Weight::from_parts(58_651_906, 4764)
            // Standard Error: 1_874
            .saturating_add(Weight::from_parts(91_901, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(5))
            .saturating_add(Weight::from_parts(0, 54).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn cancel_candidate_bond_less() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `204`
        //  Estimated: `3669`
        // Minimum execution time: 15_201 nanoseconds.
        Weight::from_parts(15_850_000, 3669)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[3, 100]`.
    /// The range of component `y` is `[2, 300]`.
    fn delegate(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2215 + x * (103 ±0) + y * (52 ±0)`
        //  Estimated: `5422 + x * (106 ±0) + y * (53 ±0)`
        // Minimum execution time: 94_472 nanoseconds.
        Weight::from_parts(86_499_687, 5422)
            // Standard Error: 4_996
            .saturating_add(Weight::from_parts(161_425, 0).saturating_mul(x.into()))
            // Standard Error: 1_639
            .saturating_add(Weight::from_parts(70_126, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(8))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(Weight::from_parts(0, 106).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 53).saturating_mul(y.into()))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    fn schedule_revoke_delegation(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `688 + x * (54 ±0)`
        //  Estimated: `4097 + x * (54 ±0)`
        // Minimum execution time: 19_730 nanoseconds.
        Weight::from_parts(26_076_954, 4097)
            // Standard Error: 1_614
            .saturating_add(Weight::from_parts(89_336, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 54).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    fn delegator_bond_more(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `2052 + x * (103 ±0)`
        //  Estimated: `5592 + x * (102 ±0)`
        // Minimum execution time: 71_562 nanoseconds.
        Weight::from_parts(86_627_790, 5592)
            // Standard Error: 1_719
            .saturating_add(Weight::from_parts(140_925, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(9))
            .saturating_add(T::DbWeight::get().writes(7))
            .saturating_add(Weight::from_parts(0, 102).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    fn schedule_delegator_bond_less(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `688 + x * (54 ±0)`
        //  Estimated: `4097 + x * (54 ±0)`
        // Minimum execution time: 19_901 nanoseconds.
        Weight::from_parts(27_349_086, 4097)
            // Standard Error: 1_455
            .saturating_add(Weight::from_parts(85_443, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 54).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:0)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn execute_revoke_delegation() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `1053`
        //  Estimated: `4764`
        // Minimum execution time: 88_352 nanoseconds.
        Weight::from_parts(91_162_000, 4764)
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(8))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn execute_delegator_revoke_delegation_worst() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `50108`
        //  Estimated: `53573`
        // Minimum execution time: 167_624 nanoseconds.
        Weight::from_parts(177_823_000, 53573)
            .saturating_add(T::DbWeight::get().reads(11))
            .saturating_add(T::DbWeight::get().writes(10))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn execute_delegator_bond_less_worst() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `38517`
        //  Estimated: `41982`
        // Minimum execution time: 134_853 nanoseconds.
        Weight::from_parts(139_443_000, 41982)
            .saturating_add(T::DbWeight::get().reads(10))
            .saturating_add(T::DbWeight::get().writes(9))
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    fn cancel_delegation_request(x: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `728 + x * (54 ±0)`
        //  Estimated: `4143 + x * (55 ±0)`
        // Minimum execution time: 22_061 nanoseconds.
        Weight::from_parts(30_422_441, 4143)
            // Standard Error: 989
            .saturating_add(Weight::from_parts(71_510, 0).saturating_mul(x.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 55).saturating_mul(x.into()))
    }
    /// Storage: `ParachainStaking::Points` (r:1 w:0)
    /// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Staked` (r:1 w:1)
    /// Proof: `ParachainStaking::Staked` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::InflationConfig` (r:1 w:0)
    /// Proof: `ParachainStaking::InflationConfig` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::ParachainBondInfo` (r:1 w:0)
    /// Proof: `ParachainStaking::ParachainBondInfo` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CollatorCommission` (r:1 w:0)
    /// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelayedPayouts` (r:0 w:1)
    /// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn prepare_staking_payouts() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `344`
        //  Estimated: `3809`
        // Minimum execution time: 38_961 nanoseconds.
        Weight::from_parts(41_681_000, 3809)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:0)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `y` is `[0, 100]`.
    fn get_rewardable_delegators(y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `86 + y * (48 ±0)`
        //  Estimated: `3550 + y * (48 ±0)`
        // Minimum execution time: 6_430 nanoseconds.
        Weight::from_parts(7_955_662, 3550)
            // Standard Error: 1_500
            .saturating_add(Weight::from_parts(45_357, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(Weight::from_parts(0, 48).saturating_mul(y.into()))
    }
    /// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
    /// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:51 w:0)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:51 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:51 w:0)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:51 w:0)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
    /// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AtStake` (r:0 w:51)
    /// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 50]`.
    /// The range of component `y` is `[0, 100]`.
    fn select_top_candidates(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (5058 ±0) + y * (2400 ±0)`
        //  Estimated: `3778 + x * (4440 ±53) + y * (851 ±26)`
        // Minimum execution time: 25_291 nanoseconds.
        Weight::from_parts(25_811_000, 3778)
            // Standard Error: 100_977
            .saturating_add(Weight::from_parts(21_069_205, 0).saturating_mul(x.into()))
            // Standard Error: 50_354
            .saturating_add(Weight::from_parts(1_383_596, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
            .saturating_add(Weight::from_parts(0, 4440).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 851).saturating_mul(y.into()))
    }
    /// Storage: `System::Account` (r:349 w:349)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegatorState` (r:349 w:349)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:349 w:349)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:349 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 349]`.
    /// The range of component `y` is `[0, 349]`.
    /// The range of component `z` is `[0, 349]`.
    fn pay_one_collator_reward_best(x: u32, y: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (483 ±0) + y * (206 ±0) + z * (53 ±0)`
        //  Estimated: `151958 + x * (2607 ±19) + y * (2241 ±19) + z * (37 ±1)`
        // Minimum execution time: 310 nanoseconds.
        Weight::from_parts(360_000, 151958)
            // Standard Error: 673_485
            .saturating_add(Weight::from_parts(64_993_666, 0).saturating_mul(x.into()))
            // Standard Error: 673_485
            .saturating_add(Weight::from_parts(38_052_614, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(y.into())))
            .saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(x.into())))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
            .saturating_add(Weight::from_parts(0, 2607).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 2241).saturating_mul(y.into()))
            .saturating_add(Weight::from_parts(0, 37).saturating_mul(z.into()))
    }
    /// Storage: `ParachainStaking::DelayedPayouts` (r:1 w:0)
    /// Proof: `ParachainStaking::DelayedPayouts` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Points` (r:1 w:0)
    /// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AtStake` (r:2 w:1)
    /// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AwardedPts` (r:1 w:1)
    /// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `System::Account` (r:301 w:301)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `y` is `[0, 300]`.
    fn pay_one_collator_reward(y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `389 + y * (187 ±0)`
        //  Estimated: `6323 + y * (2607 ±0)`
        // Minimum execution time: 47_841 nanoseconds.
        Weight::from_parts(24_370_035, 6323)
            // Standard Error: 19_691
            .saturating_add(Weight::from_parts(19_914_060, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y.into())))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y.into())))
            .saturating_add(Weight::from_parts(0, 2607).saturating_mul(y.into()))
    }
    fn base_on_initialize() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_350 nanoseconds.
        Weight::from_parts(1_480_000, 0)
    }
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 300]`.
    /// The range of component `y` is `[0, 100]`.
    fn set_auto_compound(x: u32, y: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `655 + x * (34 ±0) + y * (48 ±0)`
        //  Estimated: `3997 + x * (35 ±0) + y * (49 ±0)`
        // Minimum execution time: 25_790 nanoseconds.
        Weight::from_parts(28_072_776, 3997)
            // Standard Error: 734
            .saturating_add(Weight::from_parts(54_585, 0).saturating_mul(x.into()))
            // Standard Error: 2_198
            .saturating_add(Weight::from_parts(32_939, 0).saturating_mul(y.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(Weight::from_parts(0, 35).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 49).saturating_mul(y.into()))
    }
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `x` is `[0, 350]`.
    /// The range of component `y` is `[0, 349]`.
    /// The range of component `z` is `[0, 99]`.
    fn delegate_with_auto_compound(x: u32, y: u32, z: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0 + x * (84 ±0) + y * (33 ±0) + z * (114 ±0)`
        //  Estimated: `34219 + x * (61 ±0) + y * (31 ±0) + z * (105 ±1)`
        // Minimum execution time: 100_912 nanoseconds.
        Weight::from_parts(87_816_536, 34219)
            // Standard Error: 1_780
            .saturating_add(Weight::from_parts(119_859, 0).saturating_mul(x.into()))
            // Standard Error: 1_784
            .saturating_add(Weight::from_parts(25_504, 0).saturating_mul(y.into()))
            // Standard Error: 6_285
            .saturating_add(Weight::from_parts(125_970, 0).saturating_mul(z.into()))
            .saturating_add(T::DbWeight::get().reads(9))
            .saturating_add(T::DbWeight::get().writes(8))
            .saturating_add(Weight::from_parts(0, 61).saturating_mul(x.into()))
            .saturating_add(Weight::from_parts(0, 31).saturating_mul(y.into()))
            .saturating_add(Weight::from_parts(0, 105).saturating_mul(z.into()))
    }
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegatorState` (r:2 w:2)
    /// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AutoCompoundingDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::AutoCompoundingDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TopDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::TopDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::BottomDelegations` (r:1 w:1)
    /// Proof: `ParachainStaking::BottomDelegations` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `Balances::Locks` (r:2 w:2)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:2 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `ParachainStaking::DelegationScheduledRequests` (r:1 w:1)
    /// Proof: `ParachainStaking::DelegationScheduledRequests` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::Total` (r:1 w:1)
    /// Proof: `ParachainStaking::Total` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn delegate_with_auto_compound_worst() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `63204`
        //  Estimated: `69144`
        // Minimum execution time: 243_907 nanoseconds.
        Weight::from_parts(253_195_000, 69144)
            .saturating_add(T::DbWeight::get().reads(15))
            .saturating_add(T::DbWeight::get().writes(13))
    }
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    fn mint_collator_reward() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `107`
        //  Estimated: `3597`
        // Minimum execution time: 20_700 nanoseconds.
        Weight::from_parts(21_161_000, 3597)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `ParachainStaking::EnableMarkingOffline` (r:1 w:0)
    /// Proof: `ParachainStaking::EnableMarkingOffline` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
    /// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::SelectedCandidates` (r:1 w:0)
    /// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AtStake` (r:1 w:0)
    /// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::AwardedPts` (r:1 w:0)
    /// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidateInfo` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidateInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
    /// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn notify_inactive_collator() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `14976`
        //  Estimated: `18441`
        // Minimum execution time: 66_662 nanoseconds.
        Weight::from_parts(71_142_000, 18441)
            .saturating_add(T::DbWeight::get().reads(7))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
