// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-05, STEPS: `2`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=2
// --pallet=pallet_vesting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_vesting (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_vesting::weights::WeightInfo for WeightInfo<T> {
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn vest_locked(l: u32, s: u32) -> Weight {
        Weight::from_ref_time(51_010_000)
            // Standard Error: 92_000
            .saturating_add(Weight::from_ref_time(81_000).saturating_mul(l.into()))
            // Standard Error: 167_000
            .saturating_add(Weight::from_ref_time(98_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn vest_unlocked(l: u32, s: u32) -> Weight {
        Weight::from_ref_time(53_538_000)
            // Standard Error: 92_000
            .saturating_add(Weight::from_ref_time(3_000).saturating_mul(l.into()))
            // Standard Error: 167_000
            .saturating_add(Weight::from_ref_time(90_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn vest_other_locked(l: u32, s: u32) -> Weight {
        Weight::from_ref_time(48_450_000)
            // Standard Error: 90_000
            .saturating_add(Weight::from_ref_time(111_000).saturating_mul(l.into()))
            // Standard Error: 164_000
            .saturating_add(Weight::from_ref_time(198_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn vest_other_unlocked(l: u32, s: u32) -> Weight {
        Weight::from_ref_time(53_097_000)
            // Standard Error: 85_000
            .saturating_add(Weight::from_ref_time(31_000).saturating_mul(l.into()))
            // Standard Error: 154_000
            .saturating_add(Weight::from_ref_time(39_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn vested_transfer(l: u32, _s: u32) -> Weight {
        Weight::from_ref_time(81_504_000)
            // Standard Error: 115_000
            .saturating_add(Weight::from_ref_time(65_000).saturating_mul(l.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: System Account (r:2 w:2)
    // Storage: Balances Locks (r:1 w:1)
    fn force_vested_transfer(l: u32, _s: u32) -> Weight {
        Weight::from_ref_time(81_219_000)
            // Standard Error: 106_000
            .saturating_add(Weight::from_ref_time(47_000).saturating_mul(l.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn not_unlocking_merge_schedules(l: u32, s: u32) -> Weight {
        Weight::from_ref_time(53_564_000)
            // Standard Error: 72_000
            .saturating_add(Weight::from_ref_time(88_000).saturating_mul(l.into()))
            // Standard Error: 137_000
            .saturating_add(Weight::from_ref_time(64_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn unlocking_merge_schedules(l: u32, s: u32) -> Weight {
        Weight::from_ref_time(53_580_000)
            // Standard Error: 91_000
            .saturating_add(Weight::from_ref_time(50_000).saturating_mul(l.into()))
            // Standard Error: 171_000
            .saturating_add(Weight::from_ref_time(69_000).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
