// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-09-11`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_vesting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_vesting (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_vesting::weights::WeightInfo for WeightInfo<T> {
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn vest_locked(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `405 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `7418`
        // Minimum execution time: 38_571 nanoseconds.
        Weight::from_parts(45_233_599, 7418)
            // Standard Error: 8_644
            .saturating_add(Weight::from_ref_time(108_973).saturating_mul(l.into()))
            // Standard Error: 15_379
            .saturating_add(Weight::from_ref_time(128_780).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn vest_unlocked(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `405 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `7418`
        // Minimum execution time: 38_410 nanoseconds.
        Weight::from_parts(49_815_544, 7418)
            // Standard Error: 16_402
            .saturating_add(Weight::from_ref_time(34_111).saturating_mul(l.into()))
            // Standard Error: 29_182
            .saturating_add(Weight::from_ref_time(55_111).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn vest_other_locked(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `544 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `10025`
        // Minimum execution time: 43_080 nanoseconds.
        Weight::from_parts(53_243_771, 10025)
            // Standard Error: 14_868
            .saturating_add(Weight::from_ref_time(104_972).saturating_mul(l.into()))
            // Standard Error: 26_454
            .saturating_add(Weight::from_ref_time(88_054).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn vest_other_unlocked(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `544 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `10025`
        // Minimum execution time: 43_710 nanoseconds.
        Weight::from_parts(54_207_984, 10025)
            // Standard Error: 20_293
            .saturating_add(Weight::from_ref_time(70_467).saturating_mul(l.into()))
            // Standard Error: 36_105
            .saturating_add(Weight::from_ref_time(118_924).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn vested_transfer(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `615 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `10025`
        // Minimum execution time: 62_491 nanoseconds.
        Weight::from_parts(77_320_572, 10025)
            // Standard Error: 20_801
            .saturating_add(Weight::from_ref_time(136_687).saturating_mul(l.into()))
            // Standard Error: 37_009
            .saturating_add(Weight::from_ref_time(17_532).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn force_vested_transfer(l: u32, _s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `754 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `12632`
        // Minimum execution time: 66_881 nanoseconds.
        Weight::from_parts(92_431_305, 12632)
            // Standard Error: 24_052
            .saturating_add(Weight::from_ref_time(49_314).saturating_mul(l.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn not_unlocking_merge_schedules(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `542 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `10025`
        // Minimum execution time: 45_940 nanoseconds.
        Weight::from_parts(54_408_753, 10025)
            // Standard Error: 13_614
            .saturating_add(Weight::from_ref_time(87_865).saturating_mul(l.into()))
            // Standard Error: 25_141
            .saturating_add(Weight::from_ref_time(155_964).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn unlocking_merge_schedules(_l: u32, _s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `542 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `10025`
        // Minimum execution time: 45_550 nanoseconds.
        Weight::from_parts(63_371_359, 10025)
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
}
