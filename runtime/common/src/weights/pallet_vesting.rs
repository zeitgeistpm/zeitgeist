// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2025-02-26`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ztg-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_vesting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_vesting (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_vesting::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1169), added: 3644, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[1, 28]`.
    fn vest_locked(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `343 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 38_751 nanoseconds.
        Weight::from_parts(39_187_704, 4764)
            // Standard Error: 2_439
            .saturating_add(Weight::from_parts(50_680, 0).saturating_mul(l.into()))
            // Standard Error: 4_339
            .saturating_add(Weight::from_parts(139_806, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1169), added: 3644, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[1, 28]`.
    fn vest_unlocked(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `343 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 42_860 nanoseconds.
        Weight::from_parts(45_054_715, 4764)
            // Standard Error: 4_032
            .saturating_add(Weight::from_parts(40_411, 0).saturating_mul(l.into()))
            // Standard Error: 7_175
            .saturating_add(Weight::from_parts(92_014, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1169), added: 3644, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[1, 28]`.
    fn vest_other_locked(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `450 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 42_411 nanoseconds.
        Weight::from_parts(42_102_096, 4764)
            // Standard Error: 3_404
            .saturating_add(Weight::from_parts(68_824, 0).saturating_mul(l.into()))
            // Standard Error: 6_057
            .saturating_add(Weight::from_parts(173_506, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1169), added: 3644, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[1, 28]`.
    fn vest_other_unlocked(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `450 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 45_981 nanoseconds.
        Weight::from_parts(49_180_111, 4764)
            // Standard Error: 3_267
            .saturating_add(Weight::from_parts(29_042, 0).saturating_mul(l.into()))
            // Standard Error: 5_814
            .saturating_add(Weight::from_parts(106_520, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1169), added: 3644, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[0, 27]`.
    fn vested_transfer(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `521 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 82_892 nanoseconds.
        Weight::from_parts(86_522_671, 4764)
            // Standard Error: 4_812
            .saturating_add(Weight::from_parts(49_713, 0).saturating_mul(l.into()))
            // Standard Error: 8_563
            .saturating_add(Weight::from_parts(146_906, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1169), added: 3644, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:2 w:2)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[0, 27]`.
    fn force_vested_transfer(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `628 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `6204`
        // Minimum execution time: 86_262 nanoseconds.
        Weight::from_parts(89_727_212, 6204)
            // Standard Error: 4_318
            .saturating_add(Weight::from_parts(49_156, 0).saturating_mul(l.into()))
            // Standard Error: 7_683
            .saturating_add(Weight::from_parts(158_476, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1169), added: 3644, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[2, 28]`.
    fn not_unlocking_merge_schedules(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `448 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 43_731 nanoseconds.
        Weight::from_parts(45_245_419, 4764)
            // Standard Error: 3_207
            .saturating_add(Weight::from_parts(51_545, 0).saturating_mul(l.into()))
            // Standard Error: 5_923
            .saturating_add(Weight::from_parts(102_919, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: `Vesting::Vesting` (r:1 w:1)
    /// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1169), added: 3644, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Locks` (r:1 w:1)
    /// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1299), added: 3774, mode: `MaxEncodedLen`)
    /// Storage: `Balances::Freezes` (r:1 w:0)
    /// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
    /// Storage: `System::Account` (r:1 w:1)
    /// Proof: `System::Account` (`max_values`: None, `max_size`: Some(132), added: 2607, mode: `MaxEncodedLen`)
    /// The range of component `l` is `[0, 49]`.
    /// The range of component `s` is `[2, 28]`.
    fn unlocking_merge_schedules(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `448 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `4764`
        // Minimum execution time: 48_601 nanoseconds.
        Weight::from_parts(48_935_989, 4764)
            // Standard Error: 2_762
            .saturating_add(Weight::from_parts(57_315, 0).saturating_mul(l.into()))
            // Standard Error: 5_101
            .saturating_add(Weight::from_parts(148_016, 0).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(3))
    }
}
