// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-09-19`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_vesting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_vesting (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_vesting::weights::WeightInfo for WeightInfo<T> {
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn vest_locked(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `405 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `7418`
        // Minimum execution time: 38_600 nanoseconds.
        Weight::from_parts(43_587_531, 7418)
            // Standard Error: 15_831
            .saturating_add(Weight::from_ref_time(68_812).saturating_mul(l.into()))
            // Standard Error: 28_166
            .saturating_add(Weight::from_ref_time(85_553).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn vest_unlocked(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `405 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `7418`
        // Minimum execution time: 38_721 nanoseconds.
        Weight::from_parts(40_131_560, 7418)
            // Standard Error: 12_751
            .saturating_add(Weight::from_ref_time(153_614).saturating_mul(l.into()))
            // Standard Error: 22_687
            .saturating_add(Weight::from_ref_time(106_312).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn vest_other_locked(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `544 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `10025`
        // Minimum execution time: 43_470 nanoseconds.
        Weight::from_parts(49_859_247, 10025)
            // Standard Error: 17_297
            .saturating_add(Weight::from_ref_time(82_500).saturating_mul(l.into()))
            // Standard Error: 30_776
            .saturating_add(Weight::from_ref_time(131_073).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn vest_other_unlocked(l: u32, _s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `544 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `10025`
        // Minimum execution time: 44_220 nanoseconds.
        Weight::from_parts(54_622_024, 10025)
            // Standard Error: 13_957
            .saturating_add(Weight::from_ref_time(64_053).saturating_mul(l.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn vested_transfer(l: u32, _s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `615 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `10025`
        // Minimum execution time: 63_530 nanoseconds.
        Weight::from_parts(81_340_929, 10025)
            // Standard Error: 24_465
            .saturating_add(Weight::from_ref_time(43_600).saturating_mul(l.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn force_vested_transfer(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `754 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `12632`
        // Minimum execution time: 67_830 nanoseconds.
        Weight::from_parts(77_854_612, 12632)
            // Standard Error: 27_906
            .saturating_add(Weight::from_ref_time(72_280).saturating_mul(l.into()))
            // Standard Error: 49_651
            .saturating_add(Weight::from_ref_time(135_728).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(4_u64))
            .saturating_add(T::DbWeight::get().writes(4_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn not_unlocking_merge_schedules(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `542 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `10025`
        // Minimum execution time: 45_830 nanoseconds.
        Weight::from_parts(50_112_392, 10025)
            // Standard Error: 16_706
            .saturating_add(Weight::from_ref_time(88_312).saturating_mul(l.into()))
            // Standard Error: 30_853
            .saturating_add(Weight::from_ref_time(115_089).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    /// Storage: Vesting Vesting (r:1 w:1)
    /// Proof: Vesting Vesting (max_values: None, max_size: Some(1169), added: 3644, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn unlocking_merge_schedules(l: u32, s: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `542 + l * (25 ±0) + s * (40 ±0)`
        //  Estimated: `10025`
        // Minimum execution time: 45_530 nanoseconds.
        Weight::from_parts(45_481_538, 10025)
            // Standard Error: 13_332
            .saturating_add(Weight::from_ref_time(273_701).saturating_mul(l.into()))
            // Standard Error: 24_620
            .saturating_add(Weight::from_ref_time(164_319).saturating_mul(s.into()))
            .saturating_add(T::DbWeight::get().reads(3_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
}
