// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_vesting
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-17, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_vesting
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_vesting (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_vesting::weights::WeightInfo for WeightInfo<T> {
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn vest_locked(l: u32, s: u32) -> Weight {
        (43_102_000 as Weight)
            // Standard Error: 15_000
            .saturating_add((133_000 as Weight).saturating_mul(l as Weight))
            // Standard Error: 30_000
            .saturating_add((151_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn vest_unlocked(_l: u32, s: u32) -> Weight {
        (46_083_000 as Weight)
            // Standard Error: 45_000
            .saturating_add((53_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn vest_other_locked(l: u32, s: u32) -> Weight {
        (44_604_000 as Weight)
            // Standard Error: 14_000
            .saturating_add((20_000 as Weight).saturating_mul(l as Weight))
            // Standard Error: 30_000
            .saturating_add((84_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    fn vest_other_unlocked(l: u32, _s: u32) -> Weight {
        (53_868_000 as Weight)
            // Standard Error: 30_000
            .saturating_add((43_000 as Weight).saturating_mul(l as Weight))
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn vested_transfer(_l: u32, _s: u32) -> Weight {
        (79_398_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(3 as Weight))
            .saturating_add(T::DbWeight::get().writes(3 as Weight))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: System Account (r:2 w:2)
    // Storage: Balances Locks (r:1 w:1)
    fn force_vested_transfer(_l: u32, _s: u32) -> Weight {
        (88_016_000 as Weight)
            .saturating_add(T::DbWeight::get().reads(4 as Weight))
            .saturating_add(T::DbWeight::get().writes(4 as Weight))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn not_unlocking_merge_schedules(_l: u32, s: u32) -> Weight {
        (48_296_000 as Weight)
            // Standard Error: 36_000
            .saturating_add((126_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
    // Storage: Vesting Vesting (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    fn unlocking_merge_schedules(_l: u32, s: u32) -> Weight {
        (49_081_000 as Weight)
            // Standard Error: 29_000
            .saturating_add((53_000 as Weight).saturating_mul(s as Weight))
            .saturating_add(T::DbWeight::get().reads(2 as Weight))
            .saturating_add(T::DbWeight::get().writes(2 as Weight))
    }
}
