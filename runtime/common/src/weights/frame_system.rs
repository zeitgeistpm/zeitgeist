// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for frame_system
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: `2025-06-24`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `msi-pro-b650-s`, CPU: `AMD Ryzen 9 7950X3D 16-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/release/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=2
// --repeat=0
// --pallet=frame_system
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for frame_system (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> frame_system::weights::WeightInfo for WeightInfo<T> {
    /// The range of component `b` is `[0, 3932160]`.
    fn remark(_b: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_910 nanoseconds.
        Weight::from_parts(35_955_092_000, 0)
    }
    /// The range of component `b` is `[0, 3932160]`.
    fn remark_with_event(_b: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 9_320 nanoseconds.
        Weight::from_parts(41_241_420_000, 0)
    }
    /// Storage: `System::Digest` (r:1 w:1)
    /// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: UNKNOWN KEY `0x3a686561707061676573` (r:0 w:1)
    /// Proof: UNKNOWN KEY `0x3a686561707061676573` (r:0 w:1)
    fn set_heap_pages() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `1485`
        // Minimum execution time: 7_500 nanoseconds.
        Weight::from_parts(7_500_000, 1485)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `System::Digest` (r:1 w:1)
    /// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: UNKNOWN KEY `0x3a636f6465` (r:0 w:1)
    /// Proof: UNKNOWN KEY `0x3a636f6465` (r:0 w:1)
    fn set_code() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `1485`
        // Minimum execution time: 133_863_952 nanoseconds.
        Weight::from_parts(133_863_952_000, 1485)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: `Skipped::Metadata` (r:0 w:0)
    /// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `i` is `[0, 1000]`.
    fn set_storage(_i: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 4_730 nanoseconds.
        Weight::from_parts(618_059_000, 0).saturating_add(T::DbWeight::get().writes(1000))
    }
    /// Storage: `Skipped::Metadata` (r:0 w:0)
    /// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `i` is `[0, 1000]`.
    fn kill_storage(_i: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_050 nanoseconds.
        Weight::from_parts(441_340_000, 0).saturating_add(T::DbWeight::get().writes(1000))
    }
    /// Storage: `Skipped::Metadata` (r:0 w:0)
    /// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `p` is `[0, 1000]`.
    fn kill_prefix(_p: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `6 + p * (69 Â±0)`
        //  Estimated: `69742`
        // Minimum execution time: 6_990 nanoseconds.
        Weight::from_parts(839_700_000, 69742)
            .saturating_add(T::DbWeight::get().reads(1000))
            .saturating_add(T::DbWeight::get().writes(1000))
    }
    /// Storage: `System::AuthorizedUpgrade` (r:0 w:1)
    /// Proof: `System::AuthorizedUpgrade` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
    fn authorize_upgrade() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 10_710 nanoseconds.
        Weight::from_parts(10_710_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: `System::AuthorizedUpgrade` (r:1 w:1)
    /// Proof: `System::AuthorizedUpgrade` (`max_values`: Some(1), `max_size`: Some(33), added: 528, mode: `MaxEncodedLen`)
    /// Storage: `System::Digest` (r:1 w:1)
    /// Proof: `System::Digest` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: UNKNOWN KEY `0x3a636f6465` (r:0 w:1)
    /// Proof: UNKNOWN KEY `0x3a636f6465` (r:0 w:1)
    fn apply_authorized_upgrade() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `22`
        //  Estimated: `1518`
        // Minimum execution time: 134_727_592 nanoseconds.
        Weight::from_parts(134_727_592_000, 1518)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
}
