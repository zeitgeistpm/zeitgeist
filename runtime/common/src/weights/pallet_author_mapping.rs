// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_author_mapping
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-10-12`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_author_mapping
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_author_mapping (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_author_mapping::weights::WeightInfo for WeightInfo<T> {
    /// Storage: AuthorMapping MappingWithDeposit (r:1 w:1)
    /// Proof Skipped: AuthorMapping MappingWithDeposit (max_values: None, max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: AuthorMapping NimbusLookup (r:0 w:1)
    /// Proof Skipped: AuthorMapping NimbusLookup (max_values: None, max_size: None, mode: Measured)
    fn add_association() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `462`
        //  Estimated: `6006`
        // Minimum execution time: 42_590 nanoseconds.
        Weight::from_parts(44_770_000, 6006)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: AuthorMapping MappingWithDeposit (r:2 w:2)
    /// Proof Skipped: AuthorMapping MappingWithDeposit (max_values: None, max_size: None, mode: Measured)
    /// Storage: AuthorMapping NimbusLookup (r:0 w:1)
    /// Proof Skipped: AuthorMapping NimbusLookup (max_values: None, max_size: None, mode: Measured)
    fn update_association() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `407`
        //  Estimated: `5764`
        // Minimum execution time: 36_420 nanoseconds.
        Weight::from_parts(38_180_000, 5764)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: AuthorMapping MappingWithDeposit (r:1 w:1)
    /// Proof Skipped: AuthorMapping MappingWithDeposit (max_values: None, max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: AuthorMapping NimbusLookup (r:0 w:1)
    /// Proof Skipped: AuthorMapping NimbusLookup (max_values: None, max_size: None, mode: Measured)
    fn clear_association() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `583`
        //  Estimated: `6248`
        // Minimum execution time: 49_801 nanoseconds.
        Weight::from_parts(51_321_000, 6248)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: AuthorMapping NimbusLookup (r:1 w:1)
    /// Proof Skipped: AuthorMapping NimbusLookup (max_values: None, max_size: None, mode: Measured)
    /// Storage: AuthorMapping MappingWithDeposit (r:1 w:1)
    /// Proof Skipped: AuthorMapping MappingWithDeposit (max_values: None, max_size: None, mode: Measured)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn remove_keys() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `689`
        //  Estimated: `8935`
        // Minimum execution time: 56_490 nanoseconds.
        Weight::from_parts(58_100_000, 8935)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: AuthorMapping NimbusLookup (r:1 w:1)
    /// Proof Skipped: AuthorMapping NimbusLookup (max_values: None, max_size: None, mode: Measured)
    /// Storage: AuthorMapping MappingWithDeposit (r:2 w:2)
    /// Proof Skipped: AuthorMapping MappingWithDeposit (max_values: None, max_size: None, mode: Measured)
    fn set_keys() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `513`
        //  Estimated: `8451`
        // Minimum execution time: 43_710 nanoseconds.
        Weight::from_parts(45_410_000, 8451)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
}
