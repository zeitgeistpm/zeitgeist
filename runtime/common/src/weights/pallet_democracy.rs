// Copyright 2022-2024 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_democracy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-01-15`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_democracy
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_democracy (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_democracy::weights::WeightInfo for WeightInfo<T> {
    /// Storage: Democracy PublicPropCount (r:1 w:1)
    /// Proof: Democracy PublicPropCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Democracy PublicProps (r:1 w:1)
    /// Proof: Democracy PublicProps (max_values: Some(1), max_size: Some(16702), added: 17197, mode: MaxEncodedLen)
    /// Storage: Democracy Blacklist (r:1 w:0)
    /// Proof: Democracy Blacklist (max_values: None, max_size: Some(3242), added: 5717, mode: MaxEncodedLen)
    /// Storage: Democracy DepositOf (r:0 w:1)
    /// Proof: Democracy DepositOf (max_values: None, max_size: Some(3230), added: 5705, mode: MaxEncodedLen)
    fn propose() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `4835`
        //  Estimated: `23413`
        // Minimum execution time: 52_740 nanoseconds.
        Weight::from_parts(64_651_000, 23413)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Democracy DepositOf (r:1 w:1)
    /// Proof: Democracy DepositOf (max_values: None, max_size: Some(3230), added: 5705, mode: MaxEncodedLen)
    fn second() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3591`
        //  Estimated: `5705`
        // Minimum execution time: 44_080 nanoseconds.
        Weight::from_parts(54_891_000, 5705)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Democracy ReferendumInfoOf (r:1 w:1)
    /// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
    /// Storage: Democracy VotingOf (r:1 w:1)
    /// Proof: Democracy VotingOf (max_values: None, max_size: Some(3799), added: 6274, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn vote_new() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3500`
        //  Estimated: `12732`
        // Minimum execution time: 60_500 nanoseconds.
        Weight::from_parts(74_880_000, 12732)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Democracy ReferendumInfoOf (r:1 w:1)
    /// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
    /// Storage: Democracy VotingOf (r:1 w:1)
    /// Proof: Democracy VotingOf (max_values: None, max_size: Some(3799), added: 6274, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    fn vote_existing() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3522`
        //  Estimated: `12732`
        // Minimum execution time: 60_861 nanoseconds.
        Weight::from_parts(74_420_000, 12732)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Democracy ReferendumInfoOf (r:1 w:1)
    /// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
    /// Storage: Democracy Cancellations (r:1 w:1)
    /// Proof: Democracy Cancellations (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
    fn emergency_cancel() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `295`
        //  Estimated: `5192`
        // Minimum execution time: 25_880 nanoseconds.
        Weight::from_parts(31_360_000, 5192)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Democracy PublicProps (r:1 w:1)
    /// Proof: Democracy PublicProps (max_values: Some(1), max_size: Some(16702), added: 17197, mode: MaxEncodedLen)
    /// Storage: Democracy DepositOf (r:1 w:1)
    /// Proof: Democracy DepositOf (max_values: None, max_size: Some(3230), added: 5705, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// Storage: Democracy NextExternal (r:1 w:1)
    /// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
    /// Storage: Democracy ReferendumInfoOf (r:1 w:1)
    /// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
    /// Storage: Democracy Blacklist (r:0 w:1)
    /// Proof: Democracy Blacklist (max_values: None, max_size: Some(3242), added: 5717, mode: MaxEncodedLen)
    fn blacklist() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `6251`
        //  Estimated: `31427`
        // Minimum execution time: 114_571 nanoseconds.
        Weight::from_parts(117_761_000, 31427)
            .saturating_add(T::DbWeight::get().reads(6))
            .saturating_add(T::DbWeight::get().writes(7))
    }
    /// Storage: Democracy NextExternal (r:1 w:1)
    /// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
    /// Storage: Democracy Blacklist (r:1 w:0)
    /// Proof: Democracy Blacklist (max_values: None, max_size: Some(3242), added: 5717, mode: MaxEncodedLen)
    fn external_propose() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3419`
        //  Estimated: `6344`
        // Minimum execution time: 23_560 nanoseconds.
        Weight::from_parts(24_710_000, 6344)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Democracy NextExternal (r:0 w:1)
    /// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
    fn external_propose_majority() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_150 nanoseconds.
        Weight::from_parts(5_440_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Democracy NextExternal (r:0 w:1)
    /// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
    fn external_propose_default() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_170 nanoseconds.
        Weight::from_parts(5_410_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Democracy NextExternal (r:1 w:1)
    /// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
    /// Storage: Democracy ReferendumCount (r:1 w:1)
    /// Proof: Democracy ReferendumCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Democracy ReferendumInfoOf (r:0 w:1)
    /// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
    fn fast_track() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `179`
        //  Estimated: `1126`
        // Minimum execution time: 25_400 nanoseconds.
        Weight::from_parts(34_080_000, 1126)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Democracy NextExternal (r:1 w:1)
    /// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
    /// Storage: Democracy Blacklist (r:1 w:1)
    /// Proof: Democracy Blacklist (max_values: None, max_size: Some(3242), added: 5717, mode: MaxEncodedLen)
    fn veto_external() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `3448`
        //  Estimated: `6344`
        // Minimum execution time: 35_771 nanoseconds.
        Weight::from_parts(40_850_000, 6344)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Democracy PublicProps (r:1 w:1)
    /// Proof: Democracy PublicProps (max_values: Some(1), max_size: Some(16702), added: 17197, mode: MaxEncodedLen)
    /// Storage: Democracy DepositOf (r:1 w:1)
    /// Proof: Democracy DepositOf (max_values: None, max_size: Some(3230), added: 5705, mode: MaxEncodedLen)
    /// Storage: System Account (r:2 w:2)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    fn cancel_proposal() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `6122`
        //  Estimated: `28116`
        // Minimum execution time: 94_010 nanoseconds.
        Weight::from_parts(100_940_000, 28116)
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: Democracy ReferendumInfoOf (r:0 w:1)
    /// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
    fn cancel_referendum() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 12_611 nanoseconds.
        Weight::from_parts(15_100_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Democracy LowestUnbaked (r:1 w:1)
    /// Proof: Democracy LowestUnbaked (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Democracy ReferendumCount (r:1 w:0)
    /// Proof: Democracy ReferendumCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Democracy ReferendumInfoOf (r:99 w:0)
    /// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 99]`.
    fn on_initialize_base(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `174 + r * (125 ±0)`
        //  Estimated: `998 + r * (2684 ±0)`
        // Minimum execution time: 13_280 nanoseconds.
        Weight::from_parts(14_127_260, 998)
            // Standard Error: 85_267
            .saturating_add(Weight::from_parts(4_607_877, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(Weight::from_parts(0, 2684).saturating_mul(r.into()))
    }
    /// Storage: Democracy LowestUnbaked (r:1 w:1)
    /// Proof: Democracy LowestUnbaked (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Democracy ReferendumCount (r:1 w:0)
    /// Proof: Democracy ReferendumCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
    /// Storage: Democracy LastTabledWasExternal (r:1 w:0)
    /// Proof: Democracy LastTabledWasExternal (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
    /// Storage: Democracy NextExternal (r:1 w:0)
    /// Proof: Democracy NextExternal (max_values: Some(1), max_size: Some(132), added: 627, mode: MaxEncodedLen)
    /// Storage: Democracy PublicProps (r:1 w:0)
    /// Proof: Democracy PublicProps (max_values: Some(1), max_size: Some(16702), added: 17197, mode: MaxEncodedLen)
    /// Storage: Democracy ReferendumInfoOf (r:99 w:0)
    /// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 99]`.
    fn on_initialize_base_with_launch_period(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `174 + r * (125 ±0)`
        //  Estimated: `19318 + r * (2684 ±0)`
        // Minimum execution time: 16_280 nanoseconds.
        Weight::from_parts(21_622_107, 19318)
            // Standard Error: 37_442
            .saturating_add(Weight::from_parts(4_611_492, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(5))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(T::DbWeight::get().writes(1))
            .saturating_add(Weight::from_parts(0, 2684).saturating_mul(r.into()))
    }
    /// Storage: Democracy VotingOf (r:3 w:3)
    /// Proof: Democracy VotingOf (max_values: None, max_size: Some(3799), added: 6274, mode: MaxEncodedLen)
    /// Storage: Democracy ReferendumInfoOf (r:99 w:99)
    /// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 99]`.
    fn delegate(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `897 + r * (147 ±0)`
        //  Estimated: `22596 + r * (2684 ±0)`
        // Minimum execution time: 57_840 nanoseconds.
        Weight::from_parts(77_974_592, 22596)
            // Standard Error: 82_756
            .saturating_add(Weight::from_parts(5_829_269, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(4))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_parts(0, 2684).saturating_mul(r.into()))
    }
    /// Storage: Democracy VotingOf (r:2 w:2)
    /// Proof: Democracy VotingOf (max_values: None, max_size: Some(3799), added: 6274, mode: MaxEncodedLen)
    /// Storage: Democracy ReferendumInfoOf (r:99 w:99)
    /// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 99]`.
    fn undelegate(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `522 + r * (147 ±0)`
        //  Estimated: `12548 + r * (2684 ±0)`
        // Minimum execution time: 33_540 nanoseconds.
        Weight::from_parts(51_316_369, 12548)
            // Standard Error: 45_199
            .saturating_add(Weight::from_parts(5_718_552, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(r.into())))
            .saturating_add(Weight::from_parts(0, 2684).saturating_mul(r.into()))
    }
    /// Storage: Democracy PublicProps (r:0 w:1)
    /// Proof: Democracy PublicProps (max_values: Some(1), max_size: Some(16702), added: 17197, mode: MaxEncodedLen)
    fn clear_public_proposals() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_190 nanoseconds.
        Weight::from_parts(5_960_000, 0).saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Democracy VotingOf (r:1 w:1)
    /// Proof: Democracy VotingOf (max_values: None, max_size: Some(3799), added: 6274, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 99]`.
    fn unlock_remove(_r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `554`
        //  Estimated: `12655`
        // Minimum execution time: 32_230 nanoseconds.
        Weight::from_parts(43_644_064, 12655)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Democracy VotingOf (r:1 w:1)
    /// Proof: Democracy VotingOf (max_values: None, max_size: Some(3799), added: 6274, mode: MaxEncodedLen)
    /// Storage: Balances Locks (r:1 w:1)
    /// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
    /// Storage: System Account (r:1 w:1)
    /// Proof: System Account (max_values: None, max_size: Some(132), added: 2607, mode: MaxEncodedLen)
    /// The range of component `r` is `[0, 99]`.
    fn unlock_set(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `555 + r * (22 ±0)`
        //  Estimated: `12655`
        // Minimum execution time: 34_951 nanoseconds.
        Weight::from_parts(41_750_676, 12655)
            // Standard Error: 8_881
            .saturating_add(Weight::from_parts(54_025, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Democracy ReferendumInfoOf (r:1 w:1)
    /// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
    /// Storage: Democracy VotingOf (r:1 w:1)
    /// Proof: Democracy VotingOf (max_values: None, max_size: Some(3799), added: 6274, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 100]`.
    fn remove_vote(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760 + r * (26 ±0)`
        //  Estimated: `8958`
        // Minimum execution time: 23_310 nanoseconds.
        Weight::from_parts(31_749_195, 8958)
            // Standard Error: 7_279
            .saturating_add(Weight::from_parts(80_521, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Democracy ReferendumInfoOf (r:1 w:1)
    /// Proof: Democracy ReferendumInfoOf (max_values: None, max_size: Some(209), added: 2684, mode: MaxEncodedLen)
    /// Storage: Democracy VotingOf (r:1 w:1)
    /// Proof: Democracy VotingOf (max_values: None, max_size: Some(3799), added: 6274, mode: MaxEncodedLen)
    /// The range of component `r` is `[1, 100]`.
    fn remove_other_vote(r: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `760 + r * (26 ±0)`
        //  Estimated: `8958`
        // Minimum execution time: 23_340 nanoseconds.
        Weight::from_parts(32_404_729, 8958)
            // Standard Error: 9_008
            .saturating_add(Weight::from_parts(72_842, 0).saturating_mul(r.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
