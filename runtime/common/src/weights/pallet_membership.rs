// Copyright 2022-2025 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_membership
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 48.0.0
//! DATE: `2025-07-10`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ztg-benchmark`, CPU: `AMD EPYC 7713 64-Core Processor`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime=target/production/wbuild/battery-station-runtime/battery_station_runtime.wasm
// --genesis-builder=runtime
// --genesis-builder-preset=development
// --steps=50
// --repeat=20
// --pallet=pallet_membership
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_membership (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_membership::weights::WeightInfo for WeightInfo<T> {
    /// Storage: `AdvisoryCommitteeMembership::Members` (r:1 w:1)
    /// Proof: `AdvisoryCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Members` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[1, 99]`.
    fn add_member(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `135 + m * (64 ±0)`
        //  Estimated: `4687 + m * (64 ±0)`
        // Minimum execution time: 20_550 nanoseconds.
        Weight::from_parts(21_562_033, 4687)
            // Standard Error: 892
            .saturating_add(Weight::from_parts(37_293, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommitteeMembership::Members` (r:1 w:1)
    /// Proof: `AdvisoryCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommitteeMembership::Prime` (r:1 w:0)
    /// Proof: `AdvisoryCommitteeMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
    /// Storage: `AdvisoryCommittee::Members` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[2, 100]`.
    fn remove_member(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `239 + m * (64 ±0)`
        //  Estimated: `4687 + m * (64 ±0)`
        // Minimum execution time: 23_511 nanoseconds.
        Weight::from_parts(24_513_778, 4687)
            // Standard Error: 744
            .saturating_add(Weight::from_parts(39_496, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommitteeMembership::Members` (r:1 w:1)
    /// Proof: `AdvisoryCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommitteeMembership::Prime` (r:1 w:0)
    /// Proof: `AdvisoryCommitteeMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
    /// Storage: `AdvisoryCommittee::Members` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[2, 100]`.
    fn swap_member(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `239 + m * (64 ±0)`
        //  Estimated: `4687 + m * (64 ±0)`
        // Minimum execution time: 23_841 nanoseconds.
        Weight::from_parts(24_667_949, 4687)
            // Standard Error: 1_179
            .saturating_add(Weight::from_parts(62_237, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommitteeMembership::Members` (r:1 w:1)
    /// Proof: `AdvisoryCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommitteeMembership::Prime` (r:1 w:0)
    /// Proof: `AdvisoryCommitteeMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
    /// Storage: `AdvisoryCommittee::Members` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[1, 100]`.
    fn reset_members(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `239 + m * (64 ±0)`
        //  Estimated: `4687 + m * (64 ±0)`
        // Minimum execution time: 23_491 nanoseconds.
        Weight::from_parts(24_862_705, 4687)
            // Standard Error: 1_920
            .saturating_add(Weight::from_parts(202_323, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommitteeMembership::Members` (r:1 w:1)
    /// Proof: `AdvisoryCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
    /// Storage: `AdvisoryCommittee::Proposals` (r:1 w:0)
    /// Proof: `AdvisoryCommittee::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommitteeMembership::Prime` (r:1 w:1)
    /// Proof: `AdvisoryCommitteeMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
    /// Storage: `AdvisoryCommittee::Members` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// Storage: `AdvisoryCommittee::Prime` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[1, 100]`.
    fn change_key(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `239 + m * (64 ±0)`
        //  Estimated: `4687 + m * (64 ±0)`
        // Minimum execution time: 24_190 nanoseconds.
        Weight::from_parts(25_218_057, 4687)
            // Standard Error: 1_812
            .saturating_add(Weight::from_parts(72_082, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(Weight::from_parts(0, 64).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommitteeMembership::Members` (r:1 w:0)
    /// Proof: `AdvisoryCommitteeMembership::Members` (`max_values`: Some(1), `max_size`: Some(3202), added: 3697, mode: `MaxEncodedLen`)
    /// Storage: `AdvisoryCommitteeMembership::Prime` (r:0 w:1)
    /// Proof: `AdvisoryCommitteeMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
    /// Storage: `AdvisoryCommittee::Prime` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    /// The range of component `m` is `[1, 100]`.
    fn set_prime(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `104 + m * (32 ±0)`
        //  Estimated: `4687 + m * (32 ±0)`
        // Minimum execution time: 12_411 nanoseconds.
        Weight::from_parts(13_209_533, 4687)
            // Standard Error: 491
            .saturating_add(Weight::from_parts(17_548, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
    }
    /// Storage: `AdvisoryCommitteeMembership::Prime` (r:0 w:1)
    /// Proof: `AdvisoryCommitteeMembership::Prime` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
    /// Storage: `AdvisoryCommittee::Prime` (r:0 w:1)
    /// Proof: `AdvisoryCommittee::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
    fn clear_prime() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 3_680 nanoseconds.
        Weight::from_parts(3_940_000, 0).saturating_add(T::DbWeight::get().writes(2))
    }
}
