// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_membership
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2024-02-15`, STEPS: `2`, REPEAT: `0`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zafoi`, CPU: `AMD Ryzen 9 5900X 12-Core Processor`
//! EXECUTION: `Some(Native)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=2
// --repeat=0
// --pallet=pallet_membership
// --extrinsic=*
// --execution=native
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_membership (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_membership::weights::WeightInfo for WeightInfo<T> {
    /// Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    /// Proof: AdvisoryCommitteeMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Members (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[1, 99]`.
    fn add_member(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `234 + m * (64 ±0)`
        //  Estimated: `23917`
        // Minimum execution time: 11_551 nanoseconds.
        Weight::from_parts(13_041_000, 23917)
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    /// Proof: AdvisoryCommitteeMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommitteeMembership Prime (r:1 w:0)
    /// Proof: AdvisoryCommitteeMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Members (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[2, 100]`.
    fn remove_member(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `340 + m * (64 ±0)`
        //  Estimated: `24948`
        // Minimum execution time: 12_650 nanoseconds.
        Weight::from_parts(14_640_000, 24948)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    /// Proof: AdvisoryCommitteeMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommitteeMembership Prime (r:1 w:0)
    /// Proof: AdvisoryCommitteeMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Members (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[2, 100]`.
    fn swap_member(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `340 + m * (64 ±0)`
        //  Estimated: `24948`
        // Minimum execution time: 12_840 nanoseconds.
        Weight::from_parts(15_381_000, 24948)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    /// Proof: AdvisoryCommitteeMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommitteeMembership Prime (r:1 w:0)
    /// Proof: AdvisoryCommitteeMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Members (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[1, 100]`.
    fn reset_member(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `338 + m * (64 ±0)`
        //  Estimated: `24948`
        // Minimum execution time: 12_720 nanoseconds.
        Weight::from_parts(21_581_000, 24948)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    /// Proof: AdvisoryCommitteeMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommitteeMembership Prime (r:1 w:1)
    /// Proof: AdvisoryCommitteeMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Members (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[1, 100]`.
    fn change_key(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `338 + m * (64 ±0)`
        //  Estimated: `24948`
        // Minimum execution time: 13_350 nanoseconds.
        Weight::from_parts(15_451_000, 24948)
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    /// Storage: AdvisoryCommitteeMembership Members (r:1 w:0)
    /// Proof: AdvisoryCommitteeMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommitteeMembership Prime (r:0 w:1)
    /// Proof: AdvisoryCommitteeMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[1, 100]`.
    fn set_prime(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `134 + m * (32 ±0)`
        //  Estimated: `7034`
        // Minimum execution time: 5_770 nanoseconds.
        Weight::from_parts(6_600_000, 7034)
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: AdvisoryCommitteeMembership Prime (r:0 w:1)
    /// Proof: AdvisoryCommitteeMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[1, 100]`.
    fn clear_prime(_m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 1_780 nanoseconds.
        Weight::from_parts(1_830_000, 0).saturating_add(T::DbWeight::get().writes(2))
    }
}
