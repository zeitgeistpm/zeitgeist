// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_membership
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_membership
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_membership (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_membership::weights::WeightInfo for WeightInfo<T> {
    // Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    // Storage: AdvisoryCommittee Proposals (r:1 w:0)
    // Storage: AdvisoryCommittee Members (r:0 w:1)
    // Storage: AdvisoryCommittee Prime (r:0 w:1)
    fn add_member(m: u32) -> Weight {
        Weight::from_ref_time(45_243_140)
            // Standard Error: 6_818
            .saturating_add(Weight::from_ref_time(54_998).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    // Storage: AdvisoryCommittee Proposals (r:1 w:0)
    // Storage: AdvisoryCommitteeMembership Prime (r:1 w:0)
    // Storage: AdvisoryCommittee Members (r:0 w:1)
    // Storage: AdvisoryCommittee Prime (r:0 w:1)
    fn remove_member(m: u32) -> Weight {
        Weight::from_ref_time(47_920_741)
            // Standard Error: 7_372
            .saturating_add(Weight::from_ref_time(73_246).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    // Storage: AdvisoryCommittee Proposals (r:1 w:0)
    // Storage: AdvisoryCommitteeMembership Prime (r:1 w:0)
    // Storage: AdvisoryCommittee Members (r:0 w:1)
    // Storage: AdvisoryCommittee Prime (r:0 w:1)
    fn swap_member(m: u32) -> Weight {
        Weight::from_ref_time(46_793_220)
            // Standard Error: 6_935
            .saturating_add(Weight::from_ref_time(114_705).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    // Storage: AdvisoryCommittee Proposals (r:1 w:0)
    // Storage: AdvisoryCommitteeMembership Prime (r:1 w:0)
    // Storage: AdvisoryCommittee Members (r:0 w:1)
    // Storage: AdvisoryCommittee Prime (r:0 w:1)
    fn reset_member(m: u32) -> Weight {
        Weight::from_ref_time(53_808_610)
            // Standard Error: 14_944
            .saturating_add(Weight::from_ref_time(172_290).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    // Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    // Storage: AdvisoryCommittee Proposals (r:1 w:0)
    // Storage: AdvisoryCommitteeMembership Prime (r:1 w:1)
    // Storage: AdvisoryCommittee Members (r:0 w:1)
    // Storage: AdvisoryCommittee Prime (r:0 w:1)
    fn change_key(m: u32) -> Weight {
        Weight::from_ref_time(48_637_357)
            // Standard Error: 3_984
            .saturating_add(Weight::from_ref_time(65_363).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(4))
    }
    // Storage: AdvisoryCommitteeMembership Members (r:1 w:0)
    // Storage: AdvisoryCommitteeMembership Prime (r:0 w:1)
    // Storage: AdvisoryCommittee Prime (r:0 w:1)
    fn set_prime(m: u32) -> Weight {
        Weight::from_ref_time(19_740_067)
            // Standard Error: 2_839
            .saturating_add(Weight::from_ref_time(4_630).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    // Storage: AdvisoryCommitteeMembership Prime (r:0 w:1)
    // Storage: AdvisoryCommittee Prime (r:0 w:1)
    fn clear_prime(m: u32) -> Weight {
        Weight::from_ref_time(10_636_405)
            // Standard Error: 656
            .saturating_add(Weight::from_ref_time(1_975).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
