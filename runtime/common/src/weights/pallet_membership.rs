// Copyright 2022-2023 Forecasting Technologies LTD.
// Copyright 2021-2022 Zeitgeist PM LLC.
//
// This file is part of Zeitgeist.
//
// Zeitgeist is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// Zeitgeist is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Zeitgeist. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_membership
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: `2023-10-11`, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `zeitgeist-benchmark`, CPU: `AMD EPYC 7601 32-Core Processor`
//! EXECUTION: `Some(Wasm)`, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/production/zeitgeist
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_membership
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --template=./misc/frame_weight_template.hbs
// --header=./HEADER_GPL3
// --output=./runtime/common/src/weights/

#![allow(unused_parens)]
#![allow(unused_imports)]

use core::marker::PhantomData;
use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};

/// Weight functions for pallet_membership (automatically generated)
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_membership::weights::WeightInfo for WeightInfo<T> {
    /// Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    /// Proof: AdvisoryCommitteeMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Members (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[1, 99]`.
    fn add_member(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `237 + m * (64 ±0)`
        //  Estimated: `4900 + m * (192 ±0)`
        // Minimum execution time: 28_540 nanoseconds.
        Weight::from_parts(31_571_960, 4900)
            // Standard Error: 5_294
            .saturating_add(Weight::from_parts(67_727, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 192).saturating_mul(m.into()))
    }
    /// Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    /// Proof: AdvisoryCommitteeMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommitteeMembership Prime (r:1 w:0)
    /// Proof: AdvisoryCommitteeMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Members (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[2, 100]`.
    fn remove_member(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `341 + m * (64 ±0)`
        //  Estimated: `5739 + m * (192 ±0)`
        // Minimum execution time: 32_620 nanoseconds.
        Weight::from_parts(36_167_124, 5739)
            // Standard Error: 6_458
            .saturating_add(Weight::from_parts(72_252, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 192).saturating_mul(m.into()))
    }
    /// Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    /// Proof: AdvisoryCommitteeMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommitteeMembership Prime (r:1 w:0)
    /// Proof: AdvisoryCommitteeMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Members (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[2, 100]`.
    fn swap_member(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `341 + m * (64 ±0)`
        //  Estimated: `5739 + m * (192 ±0)`
        // Minimum execution time: 31_710 nanoseconds.
        Weight::from_parts(36_940_570, 5739)
            // Standard Error: 6_184
            .saturating_add(Weight::from_parts(88_886, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 192).saturating_mul(m.into()))
    }
    /// Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    /// Proof: AdvisoryCommitteeMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommitteeMembership Prime (r:1 w:0)
    /// Proof: AdvisoryCommitteeMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Members (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[1, 100]`.
    fn reset_member(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `341 + m * (64 ±0)`
        //  Estimated: `5739 + m * (192 ±0)`
        // Minimum execution time: 32_290 nanoseconds.
        Weight::from_parts(33_529_250, 5739)
            // Standard Error: 44_044
            .saturating_add(Weight::from_parts(385_019, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
            .saturating_add(Weight::from_parts(0, 192).saturating_mul(m.into()))
    }
    /// Storage: AdvisoryCommitteeMembership Members (r:1 w:1)
    /// Proof: AdvisoryCommitteeMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Proposals (r:1 w:0)
    /// Proof Skipped: AdvisoryCommittee Proposals (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommitteeMembership Prime (r:1 w:1)
    /// Proof: AdvisoryCommitteeMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Members (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Members (max_values: Some(1), max_size: None, mode: Measured)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[1, 100]`.
    fn change_key(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `341 + m * (64 ±0)`
        //  Estimated: `5739 + m * (192 ±0)`
        // Minimum execution time: 34_460 nanoseconds.
        Weight::from_parts(37_785_815, 5739)
            // Standard Error: 5_395
            .saturating_add(Weight::from_parts(78_047, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(4))
            .saturating_add(Weight::from_parts(0, 192).saturating_mul(m.into()))
    }
    /// Storage: AdvisoryCommitteeMembership Members (r:1 w:0)
    /// Proof: AdvisoryCommitteeMembership Members (max_values: Some(1), max_size: Some(3202), added: 3697, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommitteeMembership Prime (r:0 w:1)
    /// Proof: AdvisoryCommitteeMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[1, 100]`.
    fn set_prime(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `136 + m * (32 ±0)`
        //  Estimated: `3833 + m * (32 ±0)`
        // Minimum execution time: 13_330 nanoseconds.
        Weight::from_parts(16_510_704, 3833)
            // Standard Error: 2_505
            .saturating_add(Weight::from_parts(32_863, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(2))
            .saturating_add(Weight::from_parts(0, 32).saturating_mul(m.into()))
    }
    /// Storage: AdvisoryCommitteeMembership Prime (r:0 w:1)
    /// Proof: AdvisoryCommitteeMembership Prime (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
    /// Storage: AdvisoryCommittee Prime (r:0 w:1)
    /// Proof Skipped: AdvisoryCommittee Prime (max_values: Some(1), max_size: None, mode: Measured)
    /// The range of component `m` is `[1, 100]`.
    fn clear_prime(m: u32) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 5_440 nanoseconds.
        Weight::from_parts(6_377_372, 0)
            // Standard Error: 851
            .saturating_add(Weight::from_parts(246, 0).saturating_mul(m.into()))
            .saturating_add(T::DbWeight::get().writes(2))
    }
}
