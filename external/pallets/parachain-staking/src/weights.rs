// Copyright 2019-2022 PureStake Inc.
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-19, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/moonbeam
// benchmark
// pallet
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// parachain_staking
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template=./benchmarking/frame-weight-template.hbs
// --json-file
// raw.json
// --output
// weights.rs

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
    traits::Get,
    weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
    #[rustfmt::skip]
    fn set_staking_expectations() -> Weight;
    #[rustfmt::skip]
    fn set_inflation() -> Weight;
    #[rustfmt::skip]
    fn set_parachain_bond_account() -> Weight;
    #[rustfmt::skip]
    fn set_parachain_bond_reserve_percent() -> Weight;
    #[rustfmt::skip]
    fn set_total_selected() -> Weight;
    #[rustfmt::skip]
    fn set_collator_commission() -> Weight;
    #[rustfmt::skip]
    fn set_blocks_per_round() -> Weight;
    #[rustfmt::skip]
    fn join_candidates(x: u32, ) -> Weight;
    #[rustfmt::skip]
    fn schedule_leave_candidates(x: u32, ) -> Weight;
    #[rustfmt::skip]
    fn execute_leave_candidates(x: u32, ) -> Weight;
    #[rustfmt::skip]
    fn cancel_leave_candidates(x: u32, ) -> Weight;
    #[rustfmt::skip]
    fn go_offline() -> Weight;
    #[rustfmt::skip]
    fn go_online() -> Weight;
    #[rustfmt::skip]
    fn candidate_bond_more() -> Weight;
    #[rustfmt::skip]
    fn schedule_candidate_bond_less() -> Weight;
    #[rustfmt::skip]
    fn execute_candidate_bond_less() -> Weight;
    #[rustfmt::skip]
    fn cancel_candidate_bond_less() -> Weight;
    #[rustfmt::skip]
    fn delegate(x: u32, y: u32, ) -> Weight;
    #[rustfmt::skip]
    fn schedule_leave_delegators() -> Weight;
    #[rustfmt::skip]
    fn execute_leave_delegators(x: u32, ) -> Weight;
    #[rustfmt::skip]
    fn cancel_leave_delegators() -> Weight;
    #[rustfmt::skip]
    fn schedule_revoke_delegation() -> Weight;
    #[rustfmt::skip]
    fn delegator_bond_more() -> Weight;
    #[rustfmt::skip]
    fn schedule_delegator_bond_less() -> Weight;
    #[rustfmt::skip]
    fn execute_revoke_delegation() -> Weight;
    #[rustfmt::skip]
    fn execute_delegator_bond_less() -> Weight;
    #[rustfmt::skip]
    fn cancel_revoke_delegation() -> Weight;
    #[rustfmt::skip]
    fn cancel_delegator_bond_less() -> Weight;
    #[rustfmt::skip]
    fn prepare_staking_payouts() -> Weight;
    #[rustfmt::skip]
    fn get_rewardable_delegators(y: u32, ) -> Weight;
    #[rustfmt::skip]
    fn select_top_candidates(x: u32, y: u32, ) -> Weight;
    #[rustfmt::skip]
    fn pay_one_collator_reward(y: u32, ) -> Weight;
    #[rustfmt::skip]
    fn base_on_initialize() -> Weight;
    #[rustfmt::skip]
    fn set_auto_compound(x: u32, y: u32, ) -> Weight;
    #[rustfmt::skip]
    fn delegate_with_auto_compound(x: u32, y: u32, z: u32, ) -> Weight;
    #[rustfmt::skip]
    fn mint_collator_reward() -> Weight;
}

/// Weights for parachain_staking using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
    // Storage: ParachainStaking InflationConfig (r:1 w:1)
    #[rustfmt::skip]
    fn set_staking_expectations() -> Weight {
        Weight::from_ref_time(48_225_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking InflationConfig (r:1 w:1)
    #[rustfmt::skip]
    fn set_inflation() -> Weight {
        Weight::from_ref_time(61_063_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
    #[rustfmt::skip]
    fn set_parachain_bond_account() -> Weight {
        Weight::from_ref_time(27_645_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
    #[rustfmt::skip]
    fn set_parachain_bond_reserve_percent() -> Weight {
        Weight::from_ref_time(26_922_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking TotalSelected (r:1 w:1)
    #[rustfmt::skip]
    fn set_total_selected() -> Weight {
        Weight::from_ref_time(29_263_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking CollatorCommission (r:1 w:1)
    #[rustfmt::skip]
    fn set_collator_commission() -> Weight {
        Weight::from_ref_time(25_867_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking TotalSelected (r:1 w:0)
    // Storage: ParachainStaking InflationConfig (r:1 w:1)
    #[rustfmt::skip]
    fn set_blocks_per_round() -> Weight {
        Weight::from_ref_time(66_047_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking DelegatorState (r:1 w:0)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:0 w:1)
    // Storage: ParachainStaking BottomDelegations (r:0 w:1)
    #[rustfmt::skip]
    fn join_candidates(x: u32, ) -> Weight {
        Weight::from_ref_time(93_609_702_u64)
            // Standard Error: 1_049
            .saturating_add(Weight::from_ref_time(156_227_u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    #[rustfmt::skip]
    fn schedule_leave_candidates(x: u32, ) -> Weight {
        Weight::from_ref_time(74_938_974_u64)
            // Standard Error: 1_813
            .saturating_add(Weight::from_ref_time(136_560_u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: Balances Locks (r:2 w:2)
    // Storage: System Account (r:2 w:2)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    // Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
    // Storage: ParachainStaking BottomDelegations (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    #[rustfmt::skip]
    fn execute_leave_candidates(x: u32, ) -> Weight {
        Weight::from_ref_time(120_885_000_u64)
            // Standard Error: 73_687
            .saturating_add(Weight::from_ref_time(31_457_020_u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(x as u64)))
            .saturating_add(T::DbWeight::get().writes(5_u64))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x as u64)))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    #[rustfmt::skip]
    fn cancel_leave_candidates(x: u32, ) -> Weight {
        Weight::from_ref_time(70_048_572_u64)
            // Standard Error: 1_524
            .saturating_add(Weight::from_ref_time(145_661_u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    #[rustfmt::skip]
    fn go_offline() -> Weight {
        Weight::from_ref_time(42_412_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    #[rustfmt::skip]
    fn go_online() -> Weight {
        Weight::from_ref_time(41_744_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    #[rustfmt::skip]
    fn candidate_bond_more() -> Weight {
        Weight::from_ref_time(68_900_000_u64)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    #[rustfmt::skip]
    fn schedule_candidate_bond_less() -> Weight {
        Weight::from_ref_time(38_239_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    #[rustfmt::skip]
    fn execute_candidate_bond_less() -> Weight {
        Weight::from_ref_time(76_166_000_u64)
            .saturating_add(T::DbWeight::get().reads(5_u64))
            .saturating_add(T::DbWeight::get().writes(5_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    #[rustfmt::skip]
    fn cancel_candidate_bond_less() -> Weight {
        Weight::from_ref_time(35_581_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    #[rustfmt::skip]
    fn delegate(x: u32, y: u32, ) -> Weight {
        Weight::from_ref_time(131_245_351_u64)
            // Standard Error: 19_323
            .saturating_add(Weight::from_ref_time(239_400_u64).saturating_mul(x as u64))
            // Standard Error: 6_339
            .saturating_add(Weight::from_ref_time(261_836_u64).saturating_mul(y as u64))
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    #[rustfmt::skip]
    fn schedule_leave_delegators() -> Weight {
        Weight::from_ref_time(44_609_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    // Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    #[rustfmt::skip]
    fn execute_leave_delegators(x: u32, ) -> Weight {
        Weight::from_ref_time(14_022_061_u64)
            // Standard Error: 30_972
            .saturating_add(Weight::from_ref_time(29_549_278_u64).saturating_mul(x as u64))
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x as u64)))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(x as u64)))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    #[rustfmt::skip]
    fn cancel_leave_delegators() -> Weight {
        Weight::from_ref_time(44_825_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    #[rustfmt::skip]
    fn schedule_revoke_delegation() -> Weight {
        Weight::from_ref_time(43_131_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    #[rustfmt::skip]
    fn delegator_bond_more() -> Weight {
        Weight::from_ref_time(90_452_000_u64)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(7_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    #[rustfmt::skip]
    fn schedule_delegator_bond_less() -> Weight {
        Weight::from_ref_time(43_388_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:0)
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    #[rustfmt::skip]
    fn execute_revoke_delegation() -> Weight {
        Weight::from_ref_time(112_401_000_u64)
            .saturating_add(T::DbWeight::get().reads(9_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    #[rustfmt::skip]
    fn execute_delegator_bond_less() -> Weight {
        Weight::from_ref_time(97_377_000_u64)
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    #[rustfmt::skip]
    fn cancel_revoke_delegation() -> Weight {
        Weight::from_ref_time(43_406_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    #[rustfmt::skip]
    fn cancel_delegator_bond_less() -> Weight {
        Weight::from_ref_time(49_020_000_u64)
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking Points (r:1 w:0)
    // Storage: ParachainStaking Staked (r:1 w:1)
    // Storage: ParachainStaking InflationConfig (r:1 w:0)
    // Storage: ParachainStaking ParachainBondInfo (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking CollatorCommission (r:1 w:0)
    // Storage: ParachainStaking DelayedPayouts (r:0 w:1)
    #[rustfmt::skip]
    fn prepare_staking_payouts() -> Weight {
        Weight::from_ref_time(59_628_000_u64)
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().writes(3_u64))
    }
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
    // Storage: ParachainStaking TopDelegations (r:1 w:0)
    #[rustfmt::skip]
    fn get_rewardable_delegators(y: u32, ) -> Weight {
        Weight::from_ref_time(16_322_694_u64)
            // Standard Error: 1_133
            .saturating_add(Weight::from_ref_time(233_812_u64).saturating_mul(y as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
    }
    // Storage: ParachainStaking CandidatePool (r:1 w:0)
    // Storage: ParachainStaking TotalSelected (r:1 w:0)
    // Storage: ParachainStaking CandidateInfo (r:1 w:0)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
    // Storage: ParachainStaking TopDelegations (r:1 w:0)
    // Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:0)
    // Storage: ParachainStaking SelectedCandidates (r:0 w:1)
    // Storage: ParachainStaking AtStake (r:0 w:1)
    #[rustfmt::skip]
    fn select_top_candidates(x: u32, y: u32, ) -> Weight {
        Weight::from_ref_time(44_110_000_u64)
            // Standard Error: 237_049
            .saturating_add(Weight::from_ref_time(24_788_127_u64).saturating_mul(x as u64))
            // Standard Error: 118_210
            .saturating_add(Weight::from_ref_time(2_957_731_u64).saturating_mul(y as u64))
            .saturating_add(T::DbWeight::get().reads(6_u64))
            .saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(x as u64)))
            .saturating_add(T::DbWeight::get().writes(2_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x as u64)))
    }
    // Storage: ParachainStaking DelayedPayouts (r:1 w:0)
    // Storage: ParachainStaking Points (r:1 w:0)
    // Storage: ParachainStaking AtStake (r:2 w:1)
    // Storage: ParachainStaking AwardedPts (r:1 w:1)
    // Storage: MoonbeamOrbiters OrbiterPerRound (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    #[rustfmt::skip]
    fn pay_one_collator_reward(y: u32, ) -> Weight {
        Weight::from_ref_time(65_307_432_u64)
            // Standard Error: 9_596
            .saturating_add(Weight::from_ref_time(17_073_916_u64).saturating_mul(y as u64))
            .saturating_add(T::DbWeight::get().reads(7_u64))
            .saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(y as u64)))
            .saturating_add(T::DbWeight::get().writes(3_u64))
            .saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(y as u64)))
    }
    #[rustfmt::skip]
    fn base_on_initialize() -> Weight {
        Weight::from_ref_time(10_890_000_u64)
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:0)
    // Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
    #[rustfmt::skip]
    fn set_auto_compound(x: u32, y: u32, ) -> Weight {
        Weight::from_ref_time(64_797_700_u64)
            // Standard Error: 5_810
            .saturating_add(Weight::from_ref_time(292_809_u64).saturating_mul(x as u64))
            // Standard Error: 17_394
            .saturating_add(Weight::from_ref_time(258_382_u64).saturating_mul(y as u64))
            .saturating_add(T::DbWeight::get().reads(2_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    // Storage: ParachainStaking BottomDelegations (r:1 w:1)
    #[rustfmt::skip]
    fn delegate_with_auto_compound(x: u32, y: u32, _z: u32, ) -> Weight {
        Weight::from_ref_time(181_911_542_u64)
            // Standard Error: 5_811
            .saturating_add(Weight::from_ref_time(120_473_u64).saturating_mul(x as u64))
            // Standard Error: 5_811
            .saturating_add(Weight::from_ref_time(80_638_u64).saturating_mul(y as u64))
            .saturating_add(T::DbWeight::get().reads(8_u64))
            .saturating_add(T::DbWeight::get().writes(8_u64))
    }
    // Storage: System Account (r:1 w:1)
    #[rustfmt::skip]
    fn mint_collator_reward() -> Weight {
        Weight::from_ref_time(40_146_000_u64)
            .saturating_add(T::DbWeight::get().reads(1_u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    // Storage: ParachainStaking InflationConfig (r:1 w:1)
    #[rustfmt::skip]
    fn set_staking_expectations() -> Weight {
        Weight::from_ref_time(48_225_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking InflationConfig (r:1 w:1)
    #[rustfmt::skip]
    fn set_inflation() -> Weight {
        Weight::from_ref_time(61_063_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
    #[rustfmt::skip]
    fn set_parachain_bond_account() -> Weight {
        Weight::from_ref_time(27_645_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking ParachainBondInfo (r:1 w:1)
    #[rustfmt::skip]
    fn set_parachain_bond_reserve_percent() -> Weight {
        Weight::from_ref_time(26_922_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking TotalSelected (r:1 w:1)
    #[rustfmt::skip]
    fn set_total_selected() -> Weight {
        Weight::from_ref_time(29_263_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking CollatorCommission (r:1 w:1)
    #[rustfmt::skip]
    fn set_collator_commission() -> Weight {
        Weight::from_ref_time(25_867_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking TotalSelected (r:1 w:0)
    // Storage: ParachainStaking InflationConfig (r:1 w:1)
    #[rustfmt::skip]
    fn set_blocks_per_round() -> Weight {
        Weight::from_ref_time(66_047_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking DelegatorState (r:1 w:0)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:0 w:1)
    // Storage: ParachainStaking BottomDelegations (r:0 w:1)
    #[rustfmt::skip]
    fn join_candidates(x: u32, ) -> Weight {
        Weight::from_ref_time(93_609_702_u64)
            // Standard Error: 1_049
            .saturating_add(Weight::from_ref_time(156_227_u64).saturating_mul(x as u64))
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(7_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    #[rustfmt::skip]
    fn schedule_leave_candidates(x: u32, ) -> Weight {
        Weight::from_ref_time(74_938_974_u64)
            // Standard Error: 1_813
            .saturating_add(Weight::from_ref_time(136_560_u64).saturating_mul(x as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: Balances Locks (r:2 w:2)
    // Storage: System Account (r:2 w:2)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    // Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
    // Storage: ParachainStaking BottomDelegations (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    #[rustfmt::skip]
    fn execute_leave_candidates(x: u32, ) -> Weight {
        Weight::from_ref_time(120_885_000_u64)
            // Standard Error: 73_687
            .saturating_add(Weight::from_ref_time(31_457_020_u64).saturating_mul(x as u64))
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().reads((3_u64).saturating_mul(x as u64)))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
            .saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(x as u64)))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    #[rustfmt::skip]
    fn cancel_leave_candidates(x: u32, ) -> Weight {
        Weight::from_ref_time(70_048_572_u64)
            // Standard Error: 1_524
            .saturating_add(Weight::from_ref_time(145_661_u64).saturating_mul(x as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    #[rustfmt::skip]
    fn go_offline() -> Weight {
        Weight::from_ref_time(42_412_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    #[rustfmt::skip]
    fn go_online() -> Weight {
        Weight::from_ref_time(41_744_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    #[rustfmt::skip]
    fn candidate_bond_more() -> Weight {
        Weight::from_ref_time(68_900_000_u64)
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    #[rustfmt::skip]
    fn schedule_candidate_bond_less() -> Weight {
        Weight::from_ref_time(38_239_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    #[rustfmt::skip]
    fn execute_candidate_bond_less() -> Weight {
        Weight::from_ref_time(76_166_000_u64)
            .saturating_add(RocksDbWeight::get().reads(5_u64))
            .saturating_add(RocksDbWeight::get().writes(5_u64))
    }
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    #[rustfmt::skip]
    fn cancel_candidate_bond_less() -> Weight {
        Weight::from_ref_time(35_581_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    #[rustfmt::skip]
    fn delegate(x: u32, y: u32, ) -> Weight {
        Weight::from_ref_time(131_245_351_u64)
            // Standard Error: 19_323
            .saturating_add(Weight::from_ref_time(239_400_u64).saturating_mul(x as u64))
            // Standard Error: 6_339
            .saturating_add(Weight::from_ref_time(261_836_u64).saturating_mul(y as u64))
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().writes(7_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    #[rustfmt::skip]
    fn schedule_leave_delegators() -> Weight {
        Weight::from_ref_time(44_609_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    // Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:0)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    #[rustfmt::skip]
    fn execute_leave_delegators(x: u32, ) -> Weight {
        Weight::from_ref_time(14_022_061_u64)
            // Standard Error: 30_972
            .saturating_add(Weight::from_ref_time(29_549_278_u64).saturating_mul(x as u64))
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(x as u64)))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((3_u64).saturating_mul(x as u64)))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    #[rustfmt::skip]
    fn cancel_leave_delegators() -> Weight {
        Weight::from_ref_time(44_825_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    #[rustfmt::skip]
    fn schedule_revoke_delegation() -> Weight {
        Weight::from_ref_time(43_131_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    #[rustfmt::skip]
    fn delegator_bond_more() -> Weight {
        Weight::from_ref_time(90_452_000_u64)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(7_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    #[rustfmt::skip]
    fn schedule_delegator_bond_less() -> Weight {
        Weight::from_ref_time(43_388_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:0)
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    #[rustfmt::skip]
    fn execute_revoke_delegation() -> Weight {
        Weight::from_ref_time(112_401_000_u64)
            .saturating_add(RocksDbWeight::get().reads(9_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    #[rustfmt::skip]
    fn execute_delegator_bond_less() -> Weight {
        Weight::from_ref_time(97_377_000_u64)
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    #[rustfmt::skip]
    fn cancel_revoke_delegation() -> Weight {
        Weight::from_ref_time(43_406_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:1)
    #[rustfmt::skip]
    fn cancel_delegator_bond_less() -> Weight {
        Weight::from_ref_time(49_020_000_u64)
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
    }
    // Storage: ParachainStaking Points (r:1 w:0)
    // Storage: ParachainStaking Staked (r:1 w:1)
    // Storage: ParachainStaking InflationConfig (r:1 w:0)
    // Storage: ParachainStaking ParachainBondInfo (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking CollatorCommission (r:1 w:0)
    // Storage: ParachainStaking DelayedPayouts (r:0 w:1)
    #[rustfmt::skip]
    fn prepare_staking_payouts() -> Weight {
        Weight::from_ref_time(59_628_000_u64)
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
    }
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
    // Storage: ParachainStaking TopDelegations (r:1 w:0)
    #[rustfmt::skip]
    fn get_rewardable_delegators(y: u32, ) -> Weight {
        Weight::from_ref_time(16_322_694_u64)
            // Standard Error: 1_133
            .saturating_add(Weight::from_ref_time(233_812_u64).saturating_mul(y as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
    }
    // Storage: ParachainStaking CandidatePool (r:1 w:0)
    // Storage: ParachainStaking TotalSelected (r:1 w:0)
    // Storage: ParachainStaking CandidateInfo (r:1 w:0)
    // Storage: ParachainStaking DelegationScheduledRequests (r:1 w:0)
    // Storage: ParachainStaking TopDelegations (r:1 w:0)
    // Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:0)
    // Storage: ParachainStaking SelectedCandidates (r:0 w:1)
    // Storage: ParachainStaking AtStake (r:0 w:1)
    #[rustfmt::skip]
    fn select_top_candidates(x: u32, y: u32, ) -> Weight {
        Weight::from_ref_time(44_110_000_u64)
            // Standard Error: 237_049
            .saturating_add(Weight::from_ref_time(24_788_127_u64).saturating_mul(x as u64))
            // Standard Error: 118_210
            .saturating_add(Weight::from_ref_time(2_957_731_u64).saturating_mul(y as u64))
            .saturating_add(RocksDbWeight::get().reads(6_u64))
            .saturating_add(RocksDbWeight::get().reads((4_u64).saturating_mul(x as u64)))
            .saturating_add(RocksDbWeight::get().writes(2_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(x as u64)))
    }
    // Storage: ParachainStaking DelayedPayouts (r:1 w:0)
    // Storage: ParachainStaking Points (r:1 w:0)
    // Storage: ParachainStaking AtStake (r:2 w:1)
    // Storage: ParachainStaking AwardedPts (r:1 w:1)
    // Storage: MoonbeamOrbiters OrbiterPerRound (r:1 w:0)
    // Storage: System Account (r:1 w:1)
    #[rustfmt::skip]
    fn pay_one_collator_reward(y: u32, ) -> Weight {
        Weight::from_ref_time(65_307_432_u64)
            // Standard Error: 9_596
            .saturating_add(Weight::from_ref_time(17_073_916_u64).saturating_mul(y as u64))
            .saturating_add(RocksDbWeight::get().reads(7_u64))
            .saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(y as u64)))
            .saturating_add(RocksDbWeight::get().writes(3_u64))
            .saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(y as u64)))
    }
    #[rustfmt::skip]
    fn base_on_initialize() -> Weight {
        Weight::from_ref_time(10_890_000_u64)
    }
    // Storage: ParachainStaking DelegatorState (r:1 w:0)
    // Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
    #[rustfmt::skip]
    fn set_auto_compound(x: u32, y: u32, ) -> Weight {
        Weight::from_ref_time(64_797_700_u64)
            // Standard Error: 5_810
            .saturating_add(Weight::from_ref_time(292_809_u64).saturating_mul(x as u64))
            // Standard Error: 17_394
            .saturating_add(Weight::from_ref_time(258_382_u64).saturating_mul(y as u64))
            .saturating_add(RocksDbWeight::get().reads(2_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
    // Storage: System Account (r:1 w:1)
    // Storage: ParachainStaking DelegatorState (r:1 w:1)
    // Storage: ParachainStaking CandidateInfo (r:1 w:1)
    // Storage: ParachainStaking AutoCompoundingDelegations (r:1 w:1)
    // Storage: ParachainStaking TopDelegations (r:1 w:1)
    // Storage: ParachainStaking CandidatePool (r:1 w:1)
    // Storage: Balances Locks (r:1 w:1)
    // Storage: ParachainStaking Total (r:1 w:1)
    // Storage: ParachainStaking BottomDelegations (r:1 w:1)
    #[rustfmt::skip]
    fn delegate_with_auto_compound(x: u32, y: u32, _z: u32, ) -> Weight {
        Weight::from_ref_time(181_911_542_u64)
            // Standard Error: 5_811
            .saturating_add(Weight::from_ref_time(120_473_u64).saturating_mul(x as u64))
            // Standard Error: 5_811
            .saturating_add(Weight::from_ref_time(80_638_u64).saturating_mul(y as u64))
            .saturating_add(RocksDbWeight::get().reads(8_u64))
            .saturating_add(RocksDbWeight::get().writes(8_u64))
    }
    // Storage: System Account (r:1 w:1)
    #[rustfmt::skip]
    fn mint_collator_reward() -> Weight {
        Weight::from_ref_time(40_146_000_u64)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
}
